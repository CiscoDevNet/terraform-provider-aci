// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/v2/client"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &TagAnnotationDataSource{}

func NewTagAnnotationDataSource() datasource.DataSource {
	return &TagAnnotationDataSource{}
}

// TagAnnotationDataSource defines the data source implementation.
type TagAnnotationDataSource struct {
	client *client.Client
}

func (d *TagAnnotationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	tflog.Trace(ctx, "start schema of datasource: aci_annotation")
	resp.TypeName = req.ProviderTypeName + "_annotation"
	tflog.Trace(ctx, "end schema of datasource: aci_annotation")
}

func (d *TagAnnotationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The annotation datasource for the 'tagAnnotation' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinquised name (DN) of the Annotation object.",
			},
			"parent_dn": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The distinquised name (DN) of the parent object.",
			},
			"key": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: `The key or password used to uniquely identify this configuration object.`,
			},
			"value": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `The value of the property.`,
			},
		},
	}
}

func (d *TagAnnotationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	tflog.Trace(ctx, "start configure of datasource: aci_annotation")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
	tflog.Trace(ctx, "end configure of datasource: aci_annotation")
}

func (d *TagAnnotationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	tflog.Trace(ctx, "start read of datasource: aci_annotation")
	var data *TagAnnotationResourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	setTagAnnotationId(ctx, data)

	tflog.Trace(ctx, fmt.Sprintf("read of datasource aci_annotation with id '%s'", data.Id.ValueString()))

	messageMap := setTagAnnotationAttributes(ctx, d.client, data)
	if messageMap != nil {
		resp.Diagnostics.AddError(messageMap.(map[string]string)["message"], messageMap.(map[string]string)["messageDetail"])
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Trace(ctx, "end read of datasource: aci_annotation")
}
