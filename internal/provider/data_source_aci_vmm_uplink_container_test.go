// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceVmmUplinkPContWithVmmDomP(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.2(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config:             testConfigVmmUplinkPContDataSourceDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("data.aci_vmm_uplink_container.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("data.aci_vmm_uplink_container.test", "name_alias", ""),
					resource.TestCheckResourceAttr("data.aci_vmm_uplink_container.test", "number_of_uplinks", "2"),
				),
			},
			{
				Config:      testConfigVmmUplinkPContNotExistingVmmDomP,
				ExpectError: regexp.MustCompile("Failed to read aci_vmm_uplink_container data source"),
			},
		},
	})
}

const testConfigVmmUplinkPContDataSourceDependencyWithVmmDomP = testConfigVmmUplinkPContMinDependencyWithVmmDomP + `
data "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  depends_on = [aci_vmm_uplink_container.test]
}
`

const testConfigVmmUplinkPContNotExistingVmmDomP = testConfigVmmDomPMin + `
data "aci_vmm_uplink_container" "test_non_existing" {
  parent_dn = aci_vmm_domain.test.id
}
`
