// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceFvRsCtxToBgpCtxAfPolWithFvCtx(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "1.1(1j)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtxAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test_2", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test_2", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test_2", "annotation", "orchestrator:terraform"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "1.1(1j)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtxAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "1.1(1j)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtxAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test_2", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test_2", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.allow_test_2", "annotation", "orchestrator:terraform"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "1.1(1j)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotation", "orchestrator:terraform"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolAllDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotation", "annotation"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolResetDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotation", "orchestrator:terraform"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_relation_from_vrf_to_bgp_address_family_context.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolChildrenDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "address_family", "ipv4-ucast"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "bgp_address_family_context_name", "test_tn_bgp_ctx_af_pol_name"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.1.value", "test_value"),
				),
			},
			// Refresh State before import testing to ensure that the state is up to date
			{
				RefreshState:       true,
				ExpectNonEmptyPlan: false,
			},
			// Import testing with children
			{
				ResourceName:      "aci_relation_from_vrf_to_bgp_address_family_context.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolChildrenRemoveFromConfigDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolChildrenRemoveOneDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigFvRsCtxToBgpCtxAfPolChildrenRemoveAllDependencyWithFvCtx,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_relation_from_vrf_to_bgp_address_family_context.test", "tags.#", "0"),
				),
			},
		},
		CheckDestroy: testCheckResourceDestroy,
	})
}

const testDependencyConfigFvRsCtxToBgpCtxAfPol = `
resource "aci_bgp_address_family_context" "test_bgp_address_family_context_0" {
  tenant_dn = aci_tenant.test.id
  name = "bgp_address_family_context_name_1"
}
`

const testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtxAllowExisting = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "allow_test" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
}
resource "aci_relation_from_vrf_to_bgp_address_family_context" "allow_test_2" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
  depends_on = [aci_relation_from_vrf_to_bgp_address_family_context.allow_test]
}
`

const testConfigFvRsCtxToBgpCtxAfPolMinDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
}
`

const testConfigFvRsCtxToBgpCtxAfPolAllDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
  address_family = "ipv4-ucast"
  annotation = "annotation"
}
`

const testConfigFvRsCtxToBgpCtxAfPolResetDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
  address_family = "ipv4-ucast"
  annotation = "orchestrator:terraform"
}
`
const testConfigFvRsCtxToBgpCtxAfPolChildrenDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
  annotations = [
    {
      key = "key_0"
      value = "value_1"
    },
    {
      key = "key_1"
      value = "test_value"
    },
  ]
  tags = [
    {
      key = "key_0"
      value = "value_1"
    },
    {
      key = "key_1"
      value = "test_value"
    },
  ]
}
`

const testConfigFvRsCtxToBgpCtxAfPolChildrenRemoveFromConfigDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
}
`

const testConfigFvRsCtxToBgpCtxAfPolChildrenRemoveOneDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigFvRsCtxToBgpCtxAfPolChildrenRemoveAllDependencyWithFvCtx = testDependencyConfigFvRsCtxToBgpCtxAfPol + testConfigFvCtxMinDependencyWithFvTenant + `
resource "aci_relation_from_vrf_to_bgp_address_family_context" "test" {
  parent_dn = aci_vrf.test.id
  address_family = "ipv4-ucast"
  bgp_address_family_context_name = "test_tn_bgp_ctx_af_pol_name"
  annotations = []
  tags = []
}
`
