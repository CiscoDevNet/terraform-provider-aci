// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceFvVmAttrWithFvCrtrn(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvCrtrnAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "value", "default_value"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigFvVmAttrMinDependencyWithFvCrtrnAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvCrtrnAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "value", "default_value"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigFvVmAttrAllDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", "all_category"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", "description"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", "label_name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", "name_alias"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "contains"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", "owner_key"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", "owner_tag"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "domain"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "all_value"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigFvVmAttrResetDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_epg_useg_vm_attribute.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
				),
			},
			// Update with children
			{
				Config:             testConfigFvVmAttrChildrenDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.value", "value_2"),
				),
			},
			// Import testing with children
			{
				ResourceName:      "aci_epg_useg_vm_attribute.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.value", "value_2"),
				),
			},
			// Update with children removed from config
			{
				Config:             testConfigFvVmAttrChildrenRemoveFromConfigDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigFvVmAttrChildrenRemoveOneDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigFvVmAttrChildrenRemoveAllDependencyWithFvCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.#", "0"),
				),
			},
		},
	})
}
func TestAccResourceFvVmAttrWithFvSCrtrn(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvSCrtrnAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "value", "default_value"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigFvVmAttrMinDependencyWithFvSCrtrnAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvSCrtrnAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test_2", "value", "default_value"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigFvVmAttrAllDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", "all_category"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", "description"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", "label_name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", "name_alias"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "contains"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", "owner_key"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", "owner_tag"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "domain"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "all_value"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigFvVmAttrMinDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigFvVmAttrResetDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_epg_useg_vm_attribute.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
				),
			},
			// Update with children
			{
				Config:             testConfigFvVmAttrChildrenDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.value", "value_2"),
				),
			},
			// Import testing with children
			{
				ResourceName:      "aci_epg_useg_vm_attribute.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name", "vm_attribute"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "value", "default_value"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "category", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "description", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "label_name", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "operator", "equals"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "type", "vm-name"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.value", "value_2"),
				),
			},
			// Update with children removed from config
			{
				Config:             testConfigFvVmAttrChildrenRemoveFromConfigDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigFvVmAttrChildrenRemoveOneDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigFvVmAttrChildrenRemoveAllDependencyWithFvSCrtrn,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_epg_useg_vm_attribute.test", "tags.#", "0"),
				),
			},
		},
	})
}

const testConfigFvVmAttrMinDependencyWithFvCrtrnAllowExisting = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
}
resource "aci_epg_useg_vm_attribute" "test_2" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  depends_on = [aci_epg_useg_vm_attribute.test]
}
`

const testConfigFvVmAttrMinDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
}
`

const testConfigFvVmAttrAllDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  annotation = "annotation"
  category = "all_category"
  description = "description"
  label_name = "label_name"
  name_alias = "name_alias"
  operator = "contains"
  owner_key = "owner_key"
  owner_tag = "owner_tag"
  type = "domain"
  value = "all_value"
}
`

const testConfigFvVmAttrResetDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  annotation = "orchestrator:terraform"
  category = ""
  description = ""
  label_name = ""
  name_alias = ""
  operator = "equals"
  owner_key = ""
  owner_tag = ""
  type = "vm-name"
  value = "default_value"
}
`
const testConfigFvVmAttrChildrenDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigFvVmAttrChildrenRemoveFromConfigDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
}
`

const testConfigFvVmAttrChildrenRemoveOneDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  annotations = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigFvVmAttrChildrenRemoveAllDependencyWithFvCrtrn = testConfigFvCrtrnMinDependencyWithFvAEPg + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  annotations = []
  tags = []
}
`

const testConfigFvVmAttrMinDependencyWithFvSCrtrnAllowExisting = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
}
resource "aci_epg_useg_vm_attribute" "test_2" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  depends_on = [aci_epg_useg_vm_attribute.test]
}
`

const testConfigFvVmAttrMinDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
}
`

const testConfigFvVmAttrAllDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  annotation = "annotation"
  category = "all_category"
  description = "description"
  label_name = "label_name"
  name_alias = "name_alias"
  operator = "contains"
  owner_key = "owner_key"
  owner_tag = "owner_tag"
  type = "domain"
  value = "all_value"
}
`

const testConfigFvVmAttrResetDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  annotation = "orchestrator:terraform"
  category = ""
  description = ""
  label_name = ""
  name_alias = ""
  operator = "equals"
  owner_key = ""
  owner_tag = ""
  type = "vm-name"
  value = "default_value"
}
`
const testConfigFvVmAttrChildrenDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigFvVmAttrChildrenRemoveFromConfigDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
}
`

const testConfigFvVmAttrChildrenRemoveOneDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  annotations = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigFvVmAttrChildrenRemoveAllDependencyWithFvSCrtrn = testConfigFvSCrtrnMinDependencyWithFvCrtrn + `
resource "aci_epg_useg_vm_attribute" "test" {
  parent_dn = aci_epg_useg_sub_block_statement.test.id
  name = "vm_attribute"
  value = "default_value"
  annotations = []
  tags = []
}
`
