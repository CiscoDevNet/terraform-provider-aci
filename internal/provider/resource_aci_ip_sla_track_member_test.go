// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
)

func TestAccResourceFvTrackMemberWithFvTenant(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.1(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvTrackMemberMinDependencyWithFvTenantAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "scope", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "scope", ""),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.1(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigFvTrackMemberMinDependencyWithFvTenantAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.1(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvTrackMemberMinDependencyWithFvTenantAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test", "scope", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.allow_test_2", "scope", ""),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.1(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvTrackMemberMinDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "scope", ""),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigFvTrackMemberAllDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "description", "description_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "destination_ip_address", "2.2.2.2"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_key", "owner_key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_tag", "owner_tag_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "scope", "uni/tn-test_tenant/BD-test_bd"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigFvTrackMemberMinDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name", "test_name"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigFvTrackMemberResetDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "scope", ""),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_ip_sla_track_member.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigFvTrackMemberChildrenDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "description", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "destination_ip_address", "0.0.0.0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "scope", ""),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.target_dn", "uni/tn-test_tenant/ipslaMonitoringPol-monitoring_policy_name_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.1.value", "test_value"),
				),
			},
			// Refresh State before import testing to ensure that the state is up to date
			{
				RefreshState:       true,
				ExpectNonEmptyPlan: false,
			},
			// Import testing with children
			{
				ResourceName:      "aci_ip_sla_track_member.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigFvTrackMemberChildrenRemoveFromConfigDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.#", "2"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "relation_to_monitoring_policy.target_dn", "uni/tn-test_tenant/ipslaMonitoringPol-monitoring_policy_name_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigFvTrackMemberChildrenRemoveOneDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.#", "1"),
				),
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.ExpectKnownValue("aci_ip_sla_track_member.test",
						tfjsonpath.New("relation_to_monitoring_policy"),
						knownvalue.MapExact(
							map[string]knownvalue.Check{
								"annotation":  knownvalue.Null(),
								"annotations": knownvalue.Null(),
								"tags":        knownvalue.Null(),
								"target_dn":   knownvalue.Null(),
							},
						),
					),
				},
			},
			// Update with all children removed
			{
				Config:             testConfigFvTrackMemberChildrenRemoveAllDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_ip_sla_track_member.test", "tags.#", "0"),
				),
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.ExpectKnownValue("aci_ip_sla_track_member.test",
						tfjsonpath.New("relation_to_monitoring_policy"),
						knownvalue.MapExact(
							map[string]knownvalue.Check{
								"annotation":  knownvalue.Null(),
								"annotations": knownvalue.Null(),
								"tags":        knownvalue.Null(),
								"target_dn":   knownvalue.Null(),
							},
						),
					),
				},
			},
		},
		CheckDestroy: testCheckResourceDestroy,
	})
}

const testChildDependencyConfigFvTrackMember = `
`

const testConfigFvTrackMemberMinDependencyWithFvTenantAllowExisting = testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "allow_test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
resource "aci_ip_sla_track_member" "allow_test_2" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  depends_on = [aci_ip_sla_track_member.allow_test]
}
`

const testConfigFvTrackMemberMinDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
`

const testConfigFvTrackMemberAllDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotation = "annotation"
  description = "description_1"
  destination_ip_address = "2.2.2.2"
  name_alias = "name_alias_1"
  owner_key = "owner_key_1"
  owner_tag = "owner_tag_1"
  scope = "uni/tn-test_tenant/BD-test_bd"
}
`

const testConfigFvTrackMemberResetDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotation = "orchestrator:terraform"
  description = ""
  destination_ip_address = "0.0.0.0"
  name_alias = ""
  owner_key = ""
  owner_tag = ""
  scope = ""
}
`
const testConfigFvTrackMemberChildrenDependencyWithFvTenant = testChildDependencyConfigFvTrackMember + testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = [
    {
      key = "key_0"
      value = "value_1"
    },
    {
      key = "key_1"
      value = "test_value"
    },
  ]
  relation_to_monitoring_policy = {
    annotation = "annotation_1"
    annotations = [
	  {
        key = "key_0"
        value = "value_1"
	  },
	  {
        key = "key_1"
        value = "test_value"
	  },
    ]
    tags = [
	  {
        key = "key_0"
        value = "value_1"
	  },
	  {
        key = "key_1"
        value = "test_value"
	  },
    ]
    target_dn = "uni/tn-test_tenant/ipslaMonitoringPol-monitoring_policy_name_1"
  }
  tags = [
    {
      key = "key_0"
      value = "value_1"
    },
    {
      key = "key_1"
      value = "test_value"
    },
  ]
}
`

const testConfigFvTrackMemberChildrenRemoveFromConfigDependencyWithFvTenant = testChildDependencyConfigFvTrackMember + testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
`

const testConfigFvTrackMemberChildrenRemoveOneDependencyWithFvTenant = testChildDependencyConfigFvTrackMember + testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  relation_to_monitoring_policy = {}
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigFvTrackMemberChildrenRemoveAllDependencyWithFvTenant = testChildDependencyConfigFvTrackMember + testConfigFvTenantMin + `
resource "aci_ip_sla_track_member" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = []
  relation_to_monitoring_policy = {}
  tags = []
}
`
