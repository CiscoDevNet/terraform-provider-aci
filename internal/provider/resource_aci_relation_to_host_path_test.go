// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceInfraRsHPathAttWithInfraHPathS(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigInfraRsHPathAttMinDependencyWithInfraHPathSAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test_2", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test_2", "annotation", "orchestrator:terraform"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigInfraRsHPathAttMinDependencyWithInfraHPathSAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigInfraRsHPathAttMinDependencyWithInfraHPathSAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test_2", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.allow_test_2", "annotation", "orchestrator:terraform"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigInfraRsHPathAttMinDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotation", "orchestrator:terraform"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigInfraRsHPathAttAllDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotation", "annotation"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigInfraRsHPathAttMinDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigInfraRsHPathAttResetDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotation", "orchestrator:terraform"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_relation_to_host_path.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigInfraRsHPathAttChildrenDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.1.value", "test_value"),
				),
			},
			// Import testing with children
			{
				ResourceName:      "aci_relation_to_host_path.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigInfraRsHPathAttChildrenRemoveFromConfigDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigInfraRsHPathAttChildrenRemoveOneDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigInfraRsHPathAttChildrenRemoveAllDependencyWithInfraHPathS,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_relation_to_host_path.test", "tags.#", "0"),
				),
			},
		},
	})
}

const testDependencyConfigInfraRsHPathAtt = `
`

const testConfigInfraRsHPathAttMinDependencyWithInfraHPathSAllowExisting = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "allow_test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
}
resource "aci_relation_to_host_path" "allow_test_2" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
  depends_on = [aci_relation_to_host_path.allow_test]
}
`

const testConfigInfraRsHPathAttMinDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
}
`

const testConfigInfraRsHPathAttAllDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
  annotation = "annotation"
}
`

const testConfigInfraRsHPathAttResetDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
  annotation = "orchestrator:terraform"
}
`
const testConfigInfraRsHPathAttChildrenDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigInfraRsHPathAttChildrenRemoveFromConfigDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
}
`

const testConfigInfraRsHPathAttChildrenRemoveOneDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigInfraRsHPathAttChildrenRemoveAllDependencyWithInfraHPathS = testDependencyConfigInfraRsHPathAtt + testConfigInfraHPathSMin + `
resource "aci_relation_to_host_path" "test" {
  parent_dn = aci_host_path_selector.test.id
  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
  annotations = []
  tags = []
}
`
