// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"
	"strings"

	"github.com/ciscoecosystem/aci-go-client/v2/client"
	"github.com/ciscoecosystem/aci-go-client/v2/container"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FvESgResource{}
var _ resource.ResourceWithImportState = &FvESgResource{}

func NewFvESgResource() resource.Resource {
	return &FvESgResource{}
}

// FvESgResource defines the resource implementation.
type FvESgResource struct {
	client *client.Client
}

// FvESgResourceModel describes the resource data model.
type FvESgResourceModel struct {
	Id                         types.String `tfsdk:"id"`
	ParentDn                   types.String `tfsdk:"parent_dn"`
	Annotation                 types.String `tfsdk:"annotation"`
	Descr                      types.String `tfsdk:"description"`
	ExceptionTag               types.String `tfsdk:"exception_tag"`
	MatchT                     types.String `tfsdk:"match_criteria"`
	Name                       types.String `tfsdk:"name"`
	NameAlias                  types.String `tfsdk:"name_alias"`
	PcEnfPref                  types.String `tfsdk:"intra_esg_isolation"`
	PrefGrMemb                 types.String `tfsdk:"preferred_group_member"`
	Shutdown                   types.String `tfsdk:"admin_state"`
	FvRsCons                   types.Set    `tfsdk:"relation_to_consumed_contracts"`
	FvRsConsIf                 types.Set    `tfsdk:"relation_to_imported_contracts"`
	FvRsIntraEpg               types.Set    `tfsdk:"relation_to_intra_epg_contracts"`
	FvRsProv                   types.Set    `tfsdk:"relation_to_provided_contracts"`
	FvRsScope                  types.Set    `tfsdk:"relation_to_vrf"`
	FvRsSecInherited           types.Set    `tfsdk:"relation_to_contract_masters"`
	TagAnnotation              types.Set    `tfsdk:"annotations"`
	TagTag                     types.Set    `tfsdk:"tags"`
	DeprecatedMatchT           types.String `tfsdk:"match_t"`
	DeprecatedParentDn         types.String `tfsdk:"application_profile_dn"`
	DeprecatedPcEnfPref        types.String `tfsdk:"pc_enf_pref"`
	DeprecatedPrefGrMemb       types.String `tfsdk:"pref_gr_memb"`
	DeprecatedFvRsSecInherited types.Set    `tfsdk:"relation_fv_rs_sec_inherited"`
	DeprecatedFvRsIntraEpg     types.Set    `tfsdk:"relation_fv_rs_intra_epg"`
	DeprecatedFvRsScope        types.String `tfsdk:"relation_fv_rs_scope"`
	DeprecatedFvRsCons         types.Set    `tfsdk:"relation_fv_rs_cons"`
	DeprecatedFvRsConsIf       types.Set    `tfsdk:"relation_fv_rs_cons_if"`
	DeprecatedFvRsProv         types.Set    `tfsdk:"relation_fv_rs_prov"`
}

func getEmptyFvESgResourceModel() *FvESgResourceModel {
	return &FvESgResourceModel{
		Id:           basetypes.NewStringNull(),
		ParentDn:     basetypes.NewStringNull(),
		Annotation:   basetypes.NewStringNull(),
		Descr:        basetypes.NewStringNull(),
		ExceptionTag: basetypes.NewStringNull(),
		MatchT:       basetypes.NewStringNull(),
		Name:         basetypes.NewStringNull(),
		NameAlias:    basetypes.NewStringNull(),
		PcEnfPref:    basetypes.NewStringNull(),
		PrefGrMemb:   basetypes.NewStringNull(),
		Shutdown:     basetypes.NewStringNull(),
		FvRsCons: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation":    types.StringType,
				"priority":      types.StringType,
				"contract_name": types.StringType,
			},
		}),
		FvRsConsIf: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation":             types.StringType,
				"priority":               types.StringType,
				"imported_contract_name": types.StringType,
			},
		}),
		FvRsIntraEpg: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation":    types.StringType,
				"contract_name": types.StringType,
			},
		}),
		FvRsProv: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation":     types.StringType,
				"match_criteria": types.StringType,
				"priority":       types.StringType,
				"contract_name":  types.StringType,
			},
		}),
		FvRsScope: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation": types.StringType,
				"vrf_name":   types.StringType,
			},
		}),
		FvRsSecInherited: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation": types.StringType,
				"target_dn":  types.StringType,
			},
		}),
		TagAnnotation: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		TagTag: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		DeprecatedMatchT:           types.String{},
		DeprecatedParentDn:         types.String{},
		DeprecatedPcEnfPref:        types.String{},
		DeprecatedPrefGrMemb:       types.String{},
		DeprecatedFvRsSecInherited: types.SetNull(types.StringType),
		DeprecatedFvRsIntraEpg:     types.SetNull(types.StringType),
		DeprecatedFvRsScope:        types.String{},
		DeprecatedFvRsCons:         types.SetNull(deprecatedFvRsConsType),
		DeprecatedFvRsConsIf:       types.SetNull(deprecatedFvRsConsIfType),
		DeprecatedFvRsProv:         types.SetNull(deprecatedFvRsProvType),
	}
}

// FvRsConsFvESgResourceModel describes the resource data model for the children without relation ships.
type FvRsConsFvESgResourceModel struct {
	Annotation   types.String `tfsdk:"annotation"`
	Prio         types.String `tfsdk:"priority"`
	TnVzBrCPName types.String `tfsdk:"contract_name"`
}

func getEmptyFvRsConsFvESgResourceModel() FvRsConsFvESgResourceModel {
	return FvRsConsFvESgResourceModel{
		Annotation:   basetypes.NewStringNull(),
		Prio:         basetypes.NewStringNull(),
		TnVzBrCPName: basetypes.NewStringNull(),
	}
}

// FvRsConsIfFvESgResourceModel describes the resource data model for the children without relation ships.
type FvRsConsIfFvESgResourceModel struct {
	Annotation   types.String `tfsdk:"annotation"`
	Prio         types.String `tfsdk:"priority"`
	TnVzCPIfName types.String `tfsdk:"imported_contract_name"`
}

func getEmptyFvRsConsIfFvESgResourceModel() FvRsConsIfFvESgResourceModel {
	return FvRsConsIfFvESgResourceModel{
		Annotation:   basetypes.NewStringNull(),
		Prio:         basetypes.NewStringNull(),
		TnVzCPIfName: basetypes.NewStringNull(),
	}
}

// FvRsIntraEpgFvESgResourceModel describes the resource data model for the children without relation ships.
type FvRsIntraEpgFvESgResourceModel struct {
	Annotation   types.String `tfsdk:"annotation"`
	TnVzBrCPName types.String `tfsdk:"contract_name"`
}

func getEmptyFvRsIntraEpgFvESgResourceModel() FvRsIntraEpgFvESgResourceModel {
	return FvRsIntraEpgFvESgResourceModel{
		Annotation:   basetypes.NewStringNull(),
		TnVzBrCPName: basetypes.NewStringNull(),
	}
}

// FvRsProvFvESgResourceModel describes the resource data model for the children without relation ships.
type FvRsProvFvESgResourceModel struct {
	Annotation   types.String `tfsdk:"annotation"`
	MatchT       types.String `tfsdk:"match_criteria"`
	Prio         types.String `tfsdk:"priority"`
	TnVzBrCPName types.String `tfsdk:"contract_name"`
}

func getEmptyFvRsProvFvESgResourceModel() FvRsProvFvESgResourceModel {
	return FvRsProvFvESgResourceModel{
		Annotation:   basetypes.NewStringNull(),
		MatchT:       basetypes.NewStringNull(),
		Prio:         basetypes.NewStringNull(),
		TnVzBrCPName: basetypes.NewStringNull(),
	}
}

// FvRsScopeFvESgResourceModel describes the resource data model for the children without relation ships.
type FvRsScopeFvESgResourceModel struct {
	Annotation  types.String `tfsdk:"annotation"`
	TnFvCtxName types.String `tfsdk:"vrf_name"`
}

func getEmptyFvRsScopeFvESgResourceModel() FvRsScopeFvESgResourceModel {
	return FvRsScopeFvESgResourceModel{
		Annotation:  basetypes.NewStringNull(),
		TnFvCtxName: basetypes.NewStringNull(),
	}
}

// FvRsSecInheritedFvESgResourceModel describes the resource data model for the children without relation ships.
type FvRsSecInheritedFvESgResourceModel struct {
	Annotation types.String `tfsdk:"annotation"`
	TDn        types.String `tfsdk:"target_dn"`
}

func getEmptyFvRsSecInheritedFvESgResourceModel() FvRsSecInheritedFvESgResourceModel {
	return FvRsSecInheritedFvESgResourceModel{
		Annotation: basetypes.NewStringNull(),
		TDn:        basetypes.NewStringNull(),
	}
}

// TagAnnotationFvESgResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationFvESgResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagAnnotationFvESgResourceModel() TagAnnotationFvESgResourceModel {
	return TagAnnotationFvESgResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

// TagTagFvESgResourceModel describes the resource data model for the children without relation ships.
type TagTagFvESgResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagTagFvESgResourceModel() TagTagFvESgResourceModel {
	return TagTagFvESgResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

type FvESgIdentifier struct {
	Name types.String
}

var deprecatedFvRsConsType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"target_dn": basetypes.StringType{},
		"prio":      basetypes.StringType{},
	},
}

var deprecatedFvRsConsIfType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"target_dn": basetypes.StringType{},
		"prio":      basetypes.StringType{},
	},
}

var deprecatedFvRsProvType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"target_dn": basetypes.StringType{},
		"match_t":   basetypes.StringType{},
		"prio":      basetypes.StringType{},
	},
}

type FvESgResourceModelV1 struct {
	Annotation                             types.String `tfsdk:"annotation"`
	Descr                                  types.String `tfsdk:"description"`
	Id                                     types.String `tfsdk:"id"`
	MatchT                                 types.String `tfsdk:"match_t"`
	Name                                   types.String `tfsdk:"name"`
	NameAlias                              types.String `tfsdk:"name_alias"`
	ParentDn                               types.String `tfsdk:"application_profile_dn"`
	PcEnfPref                              types.String `tfsdk:"pc_enf_pref"`
	PrefGrMemb                             types.String `tfsdk:"pref_gr_memb"`
	Deprecated_relation_fv_rs_cust_qos_pol types.String `tfsdk:"relation_fv_rs_cust_qos_pol"`
	Deprecated_relation_fv_rs_prot_by      types.Set    `tfsdk:"relation_fv_rs_prot_by"`
	FvRsSecInherited                       types.Set    `tfsdk:"relation_fv_rs_sec_inherited"`
	FvRsIntraEpg                           types.Set    `tfsdk:"relation_fv_rs_intra_epg"`
	FvRsScope                              types.String `tfsdk:"relation_fv_rs_scope"`
	FvRsCons                               types.Set    `tfsdk:"relation_fv_rs_cons"`
	FvRsConsIf                             types.Set    `tfsdk:"relation_fv_rs_cons_if"`
	FvRsProv                               types.Set    `tfsdk:"relation_fv_rs_prov"`
}

type FvRsConsFvESgResourceModelV1 struct {
	TargetDn types.String `tfsdk:"target_dn"`
	Prio     types.String `tfsdk:"prio"`
}

type FvRsConsIfFvESgResourceModelV1 struct {
	TargetDn types.String `tfsdk:"target_dn"`
	Prio     types.String `tfsdk:"prio"`
}

type FvRsProvFvESgResourceModelV1 struct {
	TargetDn types.String `tfsdk:"target_dn"`
	MatchT   types.String `tfsdk:"match_t"`
	Prio     types.String `tfsdk:"prio"`
}

func (r *FvESgResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	return map[int64]resource.StateUpgrader{
		1: {
			PriorSchema: &schema.Schema{
				Attributes: map[string]schema.Attribute{
					"annotation": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"description": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"id": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"match_t": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"name": schema.StringAttribute{
						Required: true,
						Optional: false,
						Computed: false,
					},
					"name_alias": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"application_profile_dn": schema.StringAttribute{
						Required: true,
						Optional: false,
						Computed: false,
					},
					"pc_enf_pref": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"pref_gr_memb": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: true,
					},
					"relation_fv_rs_cust_qos_pol": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: false,
					},
					"relation_fv_rs_prot_by": schema.SetAttribute{
						Required:    false,
						Optional:    true,
						Computed:    false,
						ElementType: types.StringType,
					},
					"relation_fv_rs_sec_inherited": schema.SetAttribute{
						Required:    false,
						Optional:    true,
						Computed:    false,
						ElementType: types.StringType,
					},
					"relation_fv_rs_intra_epg": schema.SetAttribute{
						Required:    false,
						Optional:    true,
						Computed:    false,
						ElementType: types.StringType,
					},
					"relation_fv_rs_scope": schema.StringAttribute{
						Required: false,
						Optional: true,
						Computed: false,
					},
				},
				Blocks: map[string]schema.Block{
					"relation_fv_rs_cons": schema.SetNestedBlock{
						NestedObject: schema.NestedBlockObject{
							Attributes: map[string]schema.Attribute{
								"target_dn": schema.StringAttribute{
									Required: true,
									Optional: false,
									Computed: false,
								},
								"prio": schema.StringAttribute{
									Required: false,
									Optional: true,
									Computed: false,
								},
							},
						},
					},
					"relation_fv_rs_cons_if": schema.SetNestedBlock{
						NestedObject: schema.NestedBlockObject{
							Attributes: map[string]schema.Attribute{
								"target_dn": schema.StringAttribute{
									Required: true,
									Optional: false,
									Computed: false,
								},
								"prio": schema.StringAttribute{
									Required: false,
									Optional: true,
									Computed: false,
								},
							},
						},
					},
					"relation_fv_rs_prov": schema.SetNestedBlock{
						NestedObject: schema.NestedBlockObject{
							Attributes: map[string]schema.Attribute{
								"target_dn": schema.StringAttribute{
									Required: true,
									Optional: false,
									Computed: false,
								},
								"match_t": schema.StringAttribute{
									Required: false,
									Optional: true,
									Computed: false,
								},
								"prio": schema.StringAttribute{
									Required: false,
									Optional: true,
									Computed: false,
								},
							},
						},
					},
				},
			},
			StateUpgrader: func(ctx context.Context, req resource.UpgradeStateRequest, resp *resource.UpgradeStateResponse) {
				var priorStateData FvESgResourceModelV1

				resp.Diagnostics.Append(req.State.Get(ctx, &priorStateData)...)

				if resp.Diagnostics.HasError() {
					return
				}

				upgradedStateData := FvESgResourceModel{
					Id:                   priorStateData.Id,
					ParentDn:             priorStateData.ParentDn,
					Annotation:           priorStateData.Annotation,
					Descr:                priorStateData.Descr,
					ExceptionTag:         basetypes.NewStringNull(),
					MatchT:               priorStateData.MatchT,
					Name:                 priorStateData.Name,
					NameAlias:            priorStateData.NameAlias,
					PcEnfPref:            priorStateData.PcEnfPref,
					PrefGrMemb:           priorStateData.PrefGrMemb,
					Shutdown:             basetypes.NewStringNull(),
					DeprecatedMatchT:     priorStateData.MatchT,
					DeprecatedParentDn:   priorStateData.ParentDn,
					DeprecatedPcEnfPref:  priorStateData.PcEnfPref,
					DeprecatedPrefGrMemb: priorStateData.PrefGrMemb,
					DeprecatedFvRsScope:  priorStateData.FvRsScope,
				}

				FvRsConsList := make([]FvRsConsFvESgResourceModel, 0)
				var priorStateDataFvRsConsList []FvRsConsFvESgResourceModelV1
				priorStateData.FvRsCons.ElementsAs(ctx, &priorStateDataFvRsConsList, false)
				for _, priorStateDataFvRsCons := range priorStateDataFvRsConsList {
					FvRsCons := FvRsConsFvESgResourceModel{
						Annotation:   basetypes.NewStringNull(),
						Prio:         priorStateDataFvRsCons.Prio,
						TnVzBrCPName: priorStateDataFvRsCons.TargetDn,
					}
					FvRsConsList = append(FvRsConsList, FvRsCons)
				}
				FvRsConsType := types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"annotation":    basetypes.StringType{},
						"priority":      basetypes.StringType{},
						"contract_name": basetypes.StringType{},
					},
				}
				FvRsConsSet, _ := types.SetValueFrom(ctx, FvRsConsType, FvRsConsList)
				upgradedStateData.FvRsCons = FvRsConsSet

				FvRsConsIfList := make([]FvRsConsIfFvESgResourceModel, 0)
				var priorStateDataFvRsConsIfList []FvRsConsIfFvESgResourceModelV1
				priorStateData.FvRsConsIf.ElementsAs(ctx, &priorStateDataFvRsConsIfList, false)
				for _, priorStateDataFvRsConsIf := range priorStateDataFvRsConsIfList {
					FvRsConsIf := FvRsConsIfFvESgResourceModel{
						Annotation:   basetypes.NewStringNull(),
						Prio:         priorStateDataFvRsConsIf.Prio,
						TnVzCPIfName: priorStateDataFvRsConsIf.TargetDn,
					}
					FvRsConsIfList = append(FvRsConsIfList, FvRsConsIf)
				}
				FvRsConsIfType := types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"annotation":             basetypes.StringType{},
						"priority":               basetypes.StringType{},
						"imported_contract_name": basetypes.StringType{},
					},
				}
				FvRsConsIfSet, _ := types.SetValueFrom(ctx, FvRsConsIfType, FvRsConsIfList)
				upgradedStateData.FvRsConsIf = FvRsConsIfSet

				FvRsIntraEpgList := make([]FvRsIntraEpgFvESgResourceModel, 0)
				var priorStateDataFvRsIntraEpgList []string
				priorStateData.FvRsIntraEpg.ElementsAs(ctx, &priorStateDataFvRsIntraEpgList, false)
				for _, priorStateDataFvRsIntraEpg := range priorStateDataFvRsIntraEpgList {
					FvRsIntraEpg := FvRsIntraEpgFvESgResourceModel{
						Annotation:   basetypes.NewStringNull(),
						TnVzBrCPName: basetypes.NewStringValue(GetMOName(priorStateDataFvRsIntraEpg)),
					}
					FvRsIntraEpgList = append(FvRsIntraEpgList, FvRsIntraEpg)
				}
				FvRsIntraEpgType := types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"annotation":    basetypes.StringType{},
						"contract_name": basetypes.StringType{},
					},
				}
				FvRsIntraEpgSet, _ := types.SetValueFrom(ctx, FvRsIntraEpgType, FvRsIntraEpgList)
				upgradedStateData.FvRsIntraEpg = FvRsIntraEpgSet

				FvRsProvList := make([]FvRsProvFvESgResourceModel, 0)
				var priorStateDataFvRsProvList []FvRsProvFvESgResourceModelV1
				priorStateData.FvRsProv.ElementsAs(ctx, &priorStateDataFvRsProvList, false)
				for _, priorStateDataFvRsProv := range priorStateDataFvRsProvList {
					FvRsProv := FvRsProvFvESgResourceModel{
						Annotation:   basetypes.NewStringNull(),
						MatchT:       priorStateDataFvRsProv.MatchT,
						Prio:         priorStateDataFvRsProv.Prio,
						TnVzBrCPName: priorStateDataFvRsProv.TargetDn,
					}
					FvRsProvList = append(FvRsProvList, FvRsProv)
				}
				FvRsProvType := types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"annotation":     basetypes.StringType{},
						"match_criteria": basetypes.StringType{},
						"priority":       basetypes.StringType{},
						"contract_name":  basetypes.StringType{},
					},
				}
				FvRsProvSet, _ := types.SetValueFrom(ctx, FvRsProvType, FvRsProvList)
				upgradedStateData.FvRsProv = FvRsProvSet

				FvRsScopeList := make([]FvRsScopeFvESgResourceModel, 0)
				FvRsScope := FvRsScopeFvESgResourceModel{
					Annotation:  basetypes.NewStringNull(),
					TnFvCtxName: basetypes.NewStringValue(GetMOName(priorStateData.FvRsScope.ValueString())),
				}
				FvRsScopeList = append(FvRsScopeList, FvRsScope)
				FvRsScopeType := types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"annotation": basetypes.StringType{},
						"vrf_name":   basetypes.StringType{},
					},
				}
				FvRsScopeSet, _ := types.SetValueFrom(ctx, FvRsScopeType, FvRsScopeList)
				upgradedStateData.FvRsScope = FvRsScopeSet

				FvRsSecInheritedList := make([]FvRsSecInheritedFvESgResourceModel, 0)
				var priorStateDataFvRsSecInheritedList []string
				priorStateData.FvRsSecInherited.ElementsAs(ctx, &priorStateDataFvRsSecInheritedList, false)
				for _, priorStateDataFvRsSecInherited := range priorStateDataFvRsSecInheritedList {
					FvRsSecInherited := FvRsSecInheritedFvESgResourceModel{
						Annotation: basetypes.NewStringNull(),
						TDn:        basetypes.NewStringValue(priorStateDataFvRsSecInherited),
					}
					FvRsSecInheritedList = append(FvRsSecInheritedList, FvRsSecInherited)
				}
				FvRsSecInheritedType := types.ObjectType{
					AttrTypes: map[string]attr.Type{
						"annotation": basetypes.StringType{},
						"target_dn":  basetypes.StringType{},
					},
				}
				FvRsSecInheritedSet, _ := types.SetValueFrom(ctx, FvRsSecInheritedType, FvRsSecInheritedList)
				upgradedStateData.FvRsSecInherited = FvRsSecInheritedSet

				upgradedStateData.TagAnnotation = types.SetNull(
					types.ObjectType{
						AttrTypes: map[string]attr.Type{
							"key":   basetypes.StringType{},
							"value": basetypes.StringType{},
						},
					},
				)

				upgradedStateData.TagTag = types.SetNull(
					types.ObjectType{
						AttrTypes: map[string]attr.Type{
							"key":   basetypes.StringType{},
							"value": basetypes.StringType{},
						},
					},
				)

				var deprecatedFvRsSecInheritedList []string
				priorStateData.FvRsSecInherited.ElementsAs(ctx, &deprecatedFvRsSecInheritedList, false)
				DeprecatedFvRsSecInheritedSet, _ := types.SetValueFrom(ctx, types.StringType, deprecatedFvRsSecInheritedList)
				upgradedStateData.DeprecatedFvRsSecInherited = DeprecatedFvRsSecInheritedSet

				var deprecatedFvRsIntraEpgList []string
				priorStateData.FvRsIntraEpg.ElementsAs(ctx, &deprecatedFvRsIntraEpgList, false)
				DeprecatedFvRsIntraEpgSet, _ := types.SetValueFrom(ctx, types.StringType, deprecatedFvRsIntraEpgList)
				upgradedStateData.DeprecatedFvRsIntraEpg = DeprecatedFvRsIntraEpgSet

				var FvRsConsV1List []FvRsConsFvESgResourceModelV1
				priorStateData.FvRsCons.ElementsAs(ctx, &FvRsConsV1List, false)
				FvRsConsV1Set, _ := types.SetValueFrom(ctx, deprecatedFvRsConsType, FvRsConsV1List)
				upgradedStateData.DeprecatedFvRsCons = FvRsConsV1Set

				var FvRsConsIfV1List []FvRsConsIfFvESgResourceModelV1
				priorStateData.FvRsConsIf.ElementsAs(ctx, &FvRsConsIfV1List, false)
				FvRsConsIfV1Set, _ := types.SetValueFrom(ctx, deprecatedFvRsConsIfType, FvRsConsIfV1List)
				upgradedStateData.DeprecatedFvRsConsIf = FvRsConsIfV1Set

				var FvRsProvV1List []FvRsProvFvESgResourceModelV1
				priorStateData.FvRsProv.ElementsAs(ctx, &FvRsProvV1List, false)
				FvRsProvV1Set, _ := types.SetValueFrom(ctx, deprecatedFvRsProvType, FvRsProvV1List)
				upgradedStateData.DeprecatedFvRsProv = FvRsProvV1Set

				resp.Diagnostics.Append(resp.State.Set(ctx, upgradedStateData)...)
			},
		},
	}
}

func setFvESgLegacyAttributes(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, classReadInfo []interface{}) {
	data.DeprecatedParentDn = data.ParentDn
	attributes := classReadInfo[0].(map[string]interface{})["attributes"].(map[string]interface{})
	for attributeName, attributeValue := range attributes {
		if attributeName == "matchT" {
			data.DeprecatedMatchT = basetypes.NewStringValue(attributeValue.(string))
		}
		if attributeName == "pcEnfPref" {
			data.DeprecatedPcEnfPref = basetypes.NewStringValue(attributeValue.(string))
		}
		if attributeName == "prefGrMemb" {
			data.DeprecatedPrefGrMemb = basetypes.NewStringValue(attributeValue.(string))
		}
	}
	DeprecatedFvRsIntraEpgFvESgList := make([]string, 0)
	data.DeprecatedFvRsScope = basetypes.NewStringNull()
	DeprecatedFvRsSecInheritedFvESgList := make([]string, 0)

	_, ok := classReadInfo[0].(map[string]interface{})["children"]
	if ok {
		children := classReadInfo[0].(map[string]interface{})["children"].([]interface{})
		for _, child := range children {
			for childClassName, childClassDetails := range child.(map[string]interface{}) {
				childAttributes := childClassDetails.(map[string]interface{})["attributes"].(map[string]interface{})
				if childClassName == "fvRsIntraEpg" {
					for childAttributeName, childAttributeValue := range childAttributes {
						if childAttributeName == "tDn" && childAttributeValue != "" {
							DeprecatedFvRsIntraEpgFvESgList = append(DeprecatedFvRsIntraEpgFvESgList, childAttributeValue.(string))
						}
					}
				}
				if childClassName == "fvRsScope" {
					for childAttributeName, childAttributeValue := range childAttributes {
						if childAttributeName == "tDn" {
							data.DeprecatedFvRsScope = basetypes.NewStringValue(childAttributeValue.(string))
						}
					}
				}
				if childClassName == "fvRsSecInherited" {
					for childAttributeName, childAttributeValue := range childAttributes {
						if childAttributeName == "tDn" && childAttributeValue != "" {
							DeprecatedFvRsSecInheritedFvESgList = append(DeprecatedFvRsSecInheritedFvESgList, childAttributeValue.(string))
						}
					}
				}
			}
		}
		data.DeprecatedFvRsCons = types.SetNull(deprecatedFvRsConsType)
		data.DeprecatedFvRsConsIf = types.SetNull(deprecatedFvRsConsIfType)
		fvRsIntraEpgSet, _ := types.SetValueFrom(ctx, data.DeprecatedFvRsIntraEpg.ElementType(ctx), DeprecatedFvRsIntraEpgFvESgList)
		data.DeprecatedFvRsIntraEpg = fvRsIntraEpgSet
		data.DeprecatedFvRsProv = types.SetNull(deprecatedFvRsProvType)
		fvRsSecInheritedSet, _ := types.SetValueFrom(ctx, data.DeprecatedFvRsSecInherited.ElementType(ctx), DeprecatedFvRsSecInheritedFvESgList)
		data.DeprecatedFvRsSecInherited = fvRsSecInheritedSet
	}
}

func (r *FvESgResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	if !req.Plan.Raw.IsNull() {
		var planData, stateData, configData *FvESgResourceModel
		resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)
		resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)
		resp.Diagnostics.Append(req.Config.Get(ctx, &configData)...)

		if resp.Diagnostics.HasError() {
			return
		}

		if (planData.Id.IsUnknown() || planData.Id.IsNull()) && !planData.ParentDn.IsUnknown() && !planData.Name.IsUnknown() {
			setFvESgId(ctx, planData)
		}

		if stateData == nil && !globalAllowExistingOnCreate && !planData.Id.IsUnknown() && !planData.Id.IsNull() {
			CheckDn(ctx, &resp.Diagnostics, r.client, "fvESg", planData.Id.ValueString())
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !configData.MatchT.IsNull() {
			planData.DeprecatedMatchT = configData.MatchT
		} else if !configData.DeprecatedMatchT.IsNull() {
			planData.MatchT = configData.DeprecatedMatchT
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedMatchT = stateData.DeprecatedMatchT
		}

		if !configData.ParentDn.IsNull() {
			planData.DeprecatedParentDn = configData.ParentDn
		} else if !configData.DeprecatedParentDn.IsNull() {
			planData.ParentDn = configData.DeprecatedParentDn
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedParentDn = stateData.DeprecatedParentDn
		}

		if !configData.PcEnfPref.IsNull() {
			planData.DeprecatedPcEnfPref = configData.PcEnfPref
		} else if !configData.DeprecatedPcEnfPref.IsNull() {
			planData.PcEnfPref = configData.DeprecatedPcEnfPref
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedPcEnfPref = stateData.DeprecatedPcEnfPref
		}

		if !configData.PrefGrMemb.IsNull() {
			planData.DeprecatedPrefGrMemb = configData.PrefGrMemb
		} else if !configData.DeprecatedPrefGrMemb.IsNull() {
			planData.PrefGrMemb = configData.DeprecatedPrefGrMemb
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedPrefGrMemb = stateData.DeprecatedPrefGrMemb
		}

		// HasNamedProperties false
		if !configData.FvRsSecInherited.IsNull() && stateData != nil {
			var attributeValues []FvRsSecInheritedFvESgResourceModel
			var newAttributeValues, stateAttributeValues []string
			configData.FvRsSecInherited.ElementsAs(ctx, &attributeValues, false)
			stateData.DeprecatedFvRsSecInherited.ElementsAs(ctx, &stateAttributeValues, false)
			for _, attributeValue := range attributeValues {
				newAttributeValues = append(newAttributeValues, attributeValue.TDn.ValueString())
			}

			if len(newAttributeValues) == len(stateAttributeValues) {
				allMatchState := true
				for _, stateAttributeValue := range stateAttributeValues {
					if !ContainsString(newAttributeValues, GetMOName(stateAttributeValue)) {
						allMatchState = false
						break
					}
				}
				if allMatchState {
					FvRsSecInheritedSet, _ := types.SetValueFrom(ctx, basetypes.StringType{}, stateAttributeValues)
					planData.DeprecatedFvRsSecInherited = FvRsSecInheritedSet
				}
			}
		} else if !configData.DeprecatedFvRsSecInherited.IsNull() {
			FvRsSecInheritedList := make([]FvRsSecInheritedFvESgResourceModel, 0)
			var attributeValues []string
			var newAttributeValues []FvRsSecInheritedFvESgResourceModel
			configData.DeprecatedFvRsSecInherited.ElementsAs(ctx, &attributeValues, false)
			if stateData != nil {
				stateData.FvRsSecInherited.ElementsAs(ctx, &newAttributeValues, false)
			}
			for _, attributeValue := range attributeValues {
				FvRsSecInheritedValue := FvRsSecInheritedFvESgResourceModel{}
				foundAttributeValue := false
				for _, newAttributeValue := range newAttributeValues {
					if newAttributeValue.TDn.ValueString() == attributeValue {
						FvRsSecInheritedValue = newAttributeValue
						foundAttributeValue = true
						break
					}
				}
				FvRsSecInherited := FvRsSecInheritedFvESgResourceModel{
					TDn: basetypes.NewStringValue(attributeValue),
				}

				if foundAttributeValue {
					FvRsSecInherited.Annotation = FvRsSecInheritedValue.Annotation
				} else {
					FvRsSecInherited.Annotation = planData.Annotation
				}
				FvRsSecInheritedList = append(FvRsSecInheritedList, FvRsSecInherited)
			}
			FvRsSecInheritedType := types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"annotation": basetypes.StringType{},
					"target_dn":  basetypes.StringType{},
				},
			}
			FvRsSecInheritedSet, _ := types.SetValueFrom(ctx, FvRsSecInheritedType, FvRsSecInheritedList)
			planData.FvRsSecInherited = FvRsSecInheritedSet
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedFvRsSecInherited = stateData.DeprecatedFvRsSecInherited
		}

		// HasNamedProperties true
		if !configData.FvRsIntraEpg.IsNull() && stateData != nil {
			var attributeValues []FvRsIntraEpgFvESgResourceModel
			var newAttributeValues, stateAttributeValues []string
			configData.FvRsIntraEpg.ElementsAs(ctx, &attributeValues, false)
			stateData.DeprecatedFvRsIntraEpg.ElementsAs(ctx, &stateAttributeValues, false)
			for _, attributeValue := range attributeValues {
				newAttributeValues = append(newAttributeValues, attributeValue.TnVzBrCPName.ValueString())
			}

			if len(newAttributeValues) == len(stateAttributeValues) {
				allMatchState := true
				for _, stateAttributeValue := range stateAttributeValues {
					if !ContainsString(newAttributeValues, GetMOName(stateAttributeValue)) {
						allMatchState = false
						break
					}
				}
				if allMatchState {
					FvRsIntraEpgSet, _ := types.SetValueFrom(ctx, basetypes.StringType{}, stateAttributeValues)
					planData.DeprecatedFvRsIntraEpg = FvRsIntraEpgSet
				}
			}
		} else if !configData.DeprecatedFvRsIntraEpg.IsNull() {
			FvRsIntraEpgList := make([]FvRsIntraEpgFvESgResourceModel, 0)
			var attributeValues []string
			var newAttributeValues []FvRsIntraEpgFvESgResourceModel
			configData.DeprecatedFvRsIntraEpg.ElementsAs(ctx, &attributeValues, false)
			if stateData != nil {
				stateData.FvRsIntraEpg.ElementsAs(ctx, &newAttributeValues, false)
			}
			for _, attributeValue := range attributeValues {
				FvRsIntraEpgValue := FvRsIntraEpgFvESgResourceModel{}
				foundAttributeValue := false
				for _, newAttributeValue := range newAttributeValues {
					if newAttributeValue.TnVzBrCPName.ValueString() == GetMOName(attributeValue) {
						FvRsIntraEpgValue = newAttributeValue
						foundAttributeValue = true
						break
					}
				}
				FvRsIntraEpg := FvRsIntraEpgFvESgResourceModel{
					TnVzBrCPName: basetypes.NewStringValue(GetMOName(attributeValue)),
				}

				if foundAttributeValue {
					FvRsIntraEpg.Annotation = FvRsIntraEpgValue.Annotation
				} else {
					FvRsIntraEpg.Annotation = planData.Annotation
				}
				FvRsIntraEpgList = append(FvRsIntraEpgList, FvRsIntraEpg)
			}
			FvRsIntraEpgType := types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"annotation":    basetypes.StringType{},
					"contract_name": basetypes.StringType{},
				},
			}
			FvRsIntraEpgSet, _ := types.SetValueFrom(ctx, FvRsIntraEpgType, FvRsIntraEpgList)
			planData.FvRsIntraEpg = FvRsIntraEpgSet
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedFvRsIntraEpg = stateData.DeprecatedFvRsIntraEpg
		}

		if !configData.FvRsScope.IsNull() && stateData != nil {
			var attributeValues []FvRsScopeFvESgResourceModel
			configData.FvRsScope.ElementsAs(ctx, &attributeValues, false)
			for _, attributeValue := range attributeValues {
				if GetMOName(stateData.DeprecatedFvRsScope.ValueString()) == attributeValue.TnFvCtxName.ValueString() {
					planData.DeprecatedFvRsScope = stateData.DeprecatedFvRsScope
				}
			}
		} else if !configData.DeprecatedFvRsScope.IsNull() {
			FvRsScopeList := make([]FvRsScopeFvESgResourceModel, 0)
			FvRsScope := FvRsScopeFvESgResourceModel{
				Annotation:  planData.Annotation,
				TnFvCtxName: basetypes.NewStringValue(GetMOName(configData.DeprecatedFvRsScope.ValueString())),
			}
			FvRsScopeList = append(FvRsScopeList, FvRsScope)
			FvRsScopeType := types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"annotation": basetypes.StringType{},
					"vrf_name":   basetypes.StringType{},
				},
			}
			FvRsScopeSet, _ := types.SetValueFrom(ctx, FvRsScopeType, FvRsScopeList)
			planData.FvRsScope = FvRsScopeSet
		} else if stateData != nil { // used to replace use state for unknown
			planData.DeprecatedFvRsScope = stateData.DeprecatedFvRsScope
		}

		planData.DeprecatedFvRsCons = types.SetNull(deprecatedFvRsConsType)
		if !configData.DeprecatedFvRsCons.IsNull() && stateData != nil {
			FvRsConsList := make([]FvRsConsFvESgResourceModel, 0)
			var attributeValues []FvRsConsFvESgResourceModelV1
			var newAttributeValues []FvRsConsFvESgResourceModel
			configData.DeprecatedFvRsCons.ElementsAs(ctx, &attributeValues, false)
			stateData.FvRsCons.ElementsAs(ctx, &newAttributeValues, false)
			for _, attributeValue := range attributeValues {
				plannedFvRsCons := FvRsConsFvESgResourceModel{}
				foundAttributeValue := false
				for _, newAttributeValue := range newAttributeValues {
					if newAttributeValue.TnVzBrCPName.ValueString() == GetMOName(attributeValue.TargetDn.ValueString()) {
						plannedFvRsCons = newAttributeValue
						foundAttributeValue = true
						break
					}
				}

				FvRsCons := FvRsConsFvESgResourceModel{
					Annotation: planData.Annotation,
					Prio:       attributeValue.Prio,
				}

				if foundAttributeValue {
					FvRsCons.TnVzBrCPName = plannedFvRsCons.TnVzBrCPName
				} else {
					FvRsCons.TnVzBrCPName = basetypes.NewStringValue(GetMOName(attributeValue.TargetDn.ValueString()))
				}

				FvRsConsList = append(FvRsConsList, FvRsCons)
			}

			FvRsConsType := types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"annotation":    basetypes.StringType{},
					"priority":      basetypes.StringType{},
					"contract_name": basetypes.StringType{},
				},
			}
			FvRsConsSet, _ := types.SetValueFrom(ctx, FvRsConsType, FvRsConsList)
			planData.FvRsCons = FvRsConsSet
		}

		planData.DeprecatedFvRsConsIf = types.SetNull(deprecatedFvRsConsIfType)
		if !configData.DeprecatedFvRsConsIf.IsNull() && stateData != nil {
			FvRsConsIfList := make([]FvRsConsIfFvESgResourceModel, 0)
			var attributeValues []FvRsConsIfFvESgResourceModelV1
			var newAttributeValues []FvRsConsIfFvESgResourceModel
			configData.DeprecatedFvRsConsIf.ElementsAs(ctx, &attributeValues, false)
			stateData.FvRsConsIf.ElementsAs(ctx, &newAttributeValues, false)
			for _, attributeValue := range attributeValues {
				plannedFvRsConsIf := FvRsConsIfFvESgResourceModel{}
				foundAttributeValue := false
				for _, newAttributeValue := range newAttributeValues {
					if newAttributeValue.TnVzCPIfName.ValueString() == GetMOName(attributeValue.TargetDn.ValueString()) {
						plannedFvRsConsIf = newAttributeValue
						foundAttributeValue = true
						break
					}
				}

				FvRsConsIf := FvRsConsIfFvESgResourceModel{
					Annotation: planData.Annotation,
					Prio:       attributeValue.Prio,
				}

				if foundAttributeValue {
					FvRsConsIf.TnVzCPIfName = plannedFvRsConsIf.TnVzCPIfName
				} else {
					FvRsConsIf.TnVzCPIfName = basetypes.NewStringValue(GetMOName(attributeValue.TargetDn.ValueString()))
				}

				FvRsConsIfList = append(FvRsConsIfList, FvRsConsIf)
			}

			FvRsConsIfType := types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"annotation":             basetypes.StringType{},
					"priority":               basetypes.StringType{},
					"imported_contract_name": basetypes.StringType{},
				},
			}
			FvRsConsIfSet, _ := types.SetValueFrom(ctx, FvRsConsIfType, FvRsConsIfList)
			planData.FvRsConsIf = FvRsConsIfSet
		}

		planData.DeprecatedFvRsProv = types.SetNull(deprecatedFvRsProvType)
		if !configData.DeprecatedFvRsProv.IsNull() && stateData != nil {
			FvRsProvList := make([]FvRsProvFvESgResourceModel, 0)
			var attributeValues []FvRsProvFvESgResourceModelV1
			var newAttributeValues []FvRsProvFvESgResourceModel
			configData.DeprecatedFvRsProv.ElementsAs(ctx, &attributeValues, false)
			stateData.FvRsProv.ElementsAs(ctx, &newAttributeValues, false)
			for _, attributeValue := range attributeValues {
				plannedFvRsProv := FvRsProvFvESgResourceModel{}
				foundAttributeValue := false
				for _, newAttributeValue := range newAttributeValues {
					if newAttributeValue.TnVzBrCPName.ValueString() == GetMOName(attributeValue.TargetDn.ValueString()) {
						plannedFvRsProv = newAttributeValue
						foundAttributeValue = true
						break
					}
				}

				FvRsProv := FvRsProvFvESgResourceModel{
					Annotation: planData.Annotation,
					MatchT:     attributeValue.MatchT,
					Prio:       attributeValue.Prio,
				}

				if foundAttributeValue {
					FvRsProv.TnVzBrCPName = plannedFvRsProv.TnVzBrCPName
				} else {
					FvRsProv.TnVzBrCPName = basetypes.NewStringValue(GetMOName(attributeValue.TargetDn.ValueString()))
				}

				FvRsProvList = append(FvRsProvList, FvRsProv)
			}

			FvRsProvType := types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"annotation":     basetypes.StringType{},
					"match_criteria": basetypes.StringType{},
					"priority":       basetypes.StringType{},
					"contract_name":  basetypes.StringType{},
				},
			}
			FvRsProvSet, _ := types.SetValueFrom(ctx, FvRsProvType, FvRsProvList)
			planData.FvRsProv = FvRsProvSet
		}

		resp.Diagnostics.Append(resp.Plan.Set(ctx, &planData)...)
	}
}

func (r *FvESgResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	tflog.Debug(ctx, "Start metadata of resource: aci_endpoint_security_group")
	resp.TypeName = req.ProviderTypeName + "_endpoint_security_group"
	tflog.Debug(ctx, "End metadata of resource: aci_endpoint_security_group")
}

func (r *FvESgResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	tflog.Debug(ctx, "Start schema of resource: aci_endpoint_security_group")
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The endpoint_security_group resource for the 'fvESg' class",
		Version:             2,

		Attributes: map[string]schema.Attribute{
			// Deprecated attributes
			"match_t": schema.StringAttribute{
				Optional:           true,
				Computed:           true,
				DeprecationMessage: "Attribute 'match_t' will be deprecated soon, please use 'match_criteria' instead",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("match_criteria"),
					}...),
				},
			},
			"application_profile_dn": schema.StringAttribute{
				Optional:           true,
				Computed:           true,
				DeprecationMessage: "Attribute 'application_profile_dn' will be deprecated soon, please use 'parent_dn' instead",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("parent_dn"),
					}...),
				},
			},
			"pc_enf_pref": schema.StringAttribute{
				Optional:           true,
				Computed:           true,
				DeprecationMessage: "Attribute 'pc_enf_pref' will be deprecated soon, please use 'intra_esg_isolation' instead",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("intra_esg_isolation"),
					}...),
				},
			},
			"pref_gr_memb": schema.StringAttribute{
				Optional:           true,
				Computed:           true,
				DeprecationMessage: "Attribute 'pref_gr_memb' will be deprecated soon, please use 'preferred_group_member' instead",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("preferred_group_member"),
					}...),
				},
			},
			"relation_fv_rs_sec_inherited": schema.SetAttribute{
				Optional:           true,
				Computed:           true,
				ElementType:        types.StringType,
				DeprecationMessage: "Attribute 'relation_fv_rs_sec_inherited' will be deprecated soon, please use 'relation_to_contract_masters.target_dn' instead",
				Validators: []validator.Set{
					setvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("relation_to_contract_masters"),
					}...),
				},
			},
			"relation_fv_rs_intra_epg": schema.SetAttribute{
				Optional:           true,
				Computed:           true,
				ElementType:        types.StringType,
				DeprecationMessage: "Attribute 'relation_fv_rs_intra_epg' will be deprecated soon, please use 'relation_to_intra_epg_contracts.contract_name' instead",
				Validators: []validator.Set{
					setvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("relation_to_intra_epg_contracts"),
					}...),
				},
			},
			"relation_fv_rs_scope": schema.StringAttribute{
				Optional:           true,
				Computed:           true,
				DeprecationMessage: "Attribute 'relation_fv_rs_scope' will be deprecated soon, please use 'relation_to_vrf.vrf_name' instead",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("relation_to_vrf"),
					}...),
				},
			},
			// End of deprecated attributes
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the Endpoint Security Group object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"parent_dn": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the parent object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.AtLeastOneOf(path.Expressions{
						path.MatchRoot("application_profile_dn"),
					}...),
				},
			},
			"annotation": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Default:             stringdefault.StaticString(globalAnnotation),
				MarkdownDescription: `The annotation of the Endpoint Security Group object.`,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The description of the Endpoint Security Group object.`,
			},
			"exception_tag": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `Contract Exception Tag.`,
			},
			"match_criteria": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("All", "AtleastOne", "AtmostOne", "None"),
				},
				MarkdownDescription: `The provider label match criteria.`,
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
					stringplanmodifier.RequiresReplace(),
				},
				MarkdownDescription: `The name of the Endpoint Security Group object.`,
			},
			"name_alias": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The name alias of the Endpoint Security Group object.`,
			},
			"intra_esg_isolation": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("enforced", "unenforced"),
				},
				MarkdownDescription: `Parameter used to determine whether communication between endpoints within the ESG is blocked.`,
			},
			"preferred_group_member": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("exclude", "include"),
				},
				MarkdownDescription: `Parameter used to determine whether the ESG is part of the preferred group. Members of this group are allowed to communicate without contracts.`,
			},
			"admin_state": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("no", "yes"),
				},
				MarkdownDescription: `Withdraw the ESG configuration from all nodes in the fabric.`,
			},
			"relation_to_consumed_contracts": schema.SetNestedAttribute{
				MarkdownDescription: `The Consumer contract profile information.`,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the Relation To Consumed Contract object.`,
						},
						"priority": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("level1", "level2", "level3", "level4", "level5", "level6", "unspecified"),
							},
							MarkdownDescription: `The Quality of Service (QoS) priority class ID. QoS refers to the capability of a network to provide better service to selected network traffic over various technologies. The primary goal of QoS is to provide priority including dedicated bandwidth, controlled jitter and latency (required by some real-time and interactive traffic), and improved loss characteristics. You can configure the bandwidth of each QoS level using QoS profiles.`,
						},
						"contract_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The consumer contract name.`,
						},
					},
				},
			},
			"relation_to_imported_contracts": schema.SetNestedAttribute{
				MarkdownDescription: `A contract for which the EPG will be a consumer.`,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the Relation To Imported Contract object.`,
						},
						"priority": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("level1", "level2", "level3", "level4", "level5", "level6", "unspecified"),
							},
							MarkdownDescription: `The Quality of Service (QoS) priority class ID. QoS refers to the capability of a network to provide better service to selected network traffic over various technologies. The primary goal of QoS is to provide priority including dedicated bandwidth, controlled jitter and latency (required by some real-time and interactive traffic), and improved loss characteristics. You can configure the bandwidth of each QoS level using QoS profiles.`,
						},
						"imported_contract_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The contract interface name.`,
						},
					},
				},
			},
			"relation_to_intra_epg_contracts": schema.SetNestedAttribute{
				MarkdownDescription: `Intra EPg contract:
                      Represents that the EPg is moving from "allow all within epg" mode
                      to a "deny all within epg" mode.
                      The only type of traffic allowed between EPs in this EPg is the one
                      specified by contracts EPg associates to with this relation.`,
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the Relation To Intra EPG Contract object.`,
						},
						"contract_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The contract name.`,
						},
					},
				},
			},
			"relation_to_provided_contracts": schema.SetNestedAttribute{
				MarkdownDescription: `A contract for which the EPG will be a provider.`,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the Relation To Provided Contract object.`,
						},
						"match_criteria": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("All", "AtleastOne", "AtmostOne", "None"),
							},
							MarkdownDescription: `The provider label match criteria.`,
						},
						"priority": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("level1", "level2", "level3", "level4", "level5", "level6", "unspecified"),
							},
							MarkdownDescription: `The Quality of Service (QoS) priority class ID. QoS refers to the capability of a network to provide better service to selected network traffic over various technologies. The primary goal of QoS is to provide priority including dedicated bandwidth, controlled jitter and latency (required by some real-time and interactive traffic), and improved loss characteristics. You can configure the bandwidth of each QoS level using QoS profiles.`,
						},
						"contract_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The provider contract name.`,
						},
					},
				},
			},
			"relation_to_vrf": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.Set{
					setvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the Relation To VRF object.`,
						},
						"vrf_name": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The name of the VRF object.`,
						},
					},
				},
			},
			"relation_to_contract_masters": schema.SetNestedAttribute{
				MarkdownDescription: `Represents that the EPg is inheriting security configuration from another EPg`,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the Relation To Contract Master object.`,
						},
						"target_dn": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The distinguished name of the target.`,
						},
					},
				},
			},
			"annotations": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
			"tags": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
		},
		Blocks: map[string]schema.Block{
			"relation_fv_rs_cons": schema.SetNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"target_dn": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'target_dn' will be deprecated soon, please use 'relation_to_consumed_contracts.contract_name' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_consumed_contracts"),
								}...),
							},
						},
						"prio": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'prio' will be deprecated soon, please use 'relation_to_consumed_contracts.priority' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_consumed_contracts"),
								}...),
							},
						},
					},
				},
			},
			"relation_fv_rs_cons_if": schema.SetNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"target_dn": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'target_dn' will be deprecated soon, please use 'relation_to_imported_contracts.imported_contract_name' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_imported_contracts"),
								}...),
							},
						},
						"prio": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'prio' will be deprecated soon, please use 'relation_to_imported_contracts.priority' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_imported_contracts"),
								}...),
							},
						},
					},
				},
			},
			"relation_fv_rs_prov": schema.SetNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"target_dn": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'target_dn' will be deprecated soon, please use 'relation_to_provided_contracts.contract_name' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_provided_contracts"),
								}...),
							},
						},
						"match_t": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'match_t' will be deprecated soon, please use 'relation_to_provided_contracts.match_criteria' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_provided_contracts"),
								}...),
							},
						},
						"prio": schema.StringAttribute{
							Optional:           true,
							Computed:           true,
							DeprecationMessage: "Attribute 'prio' will be deprecated soon, please use 'relation_to_provided_contracts.priority' instead",
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRoot("relation_to_provided_contracts"),
								}...),
							},
						},
					},
				},
			},
		},
	}
	tflog.Debug(ctx, "End schema of resource: aci_endpoint_security_group")
}

func (r *FvESgResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	tflog.Debug(ctx, "Start configure of resource: aci_endpoint_security_group")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	tflog.Debug(ctx, "End configure of resource: aci_endpoint_security_group")
}

func (r *FvESgResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Debug(ctx, "Start create of resource: aci_endpoint_security_group")
	// On create retrieve information on current state prior to making any changes in order to determine child delete operations
	var stateData *FvESgResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &stateData)...)
	if stateData.Id.IsUnknown() || stateData.Id.IsNull() {
		setFvESgId(ctx, stateData)
	}
	getAndSetFvESgAttributes(ctx, &resp.Diagnostics, r.client, stateData)
	if !globalAllowExistingOnCreate && !stateData.Id.IsNull() {
		resp.Diagnostics.AddError(
			"Object Already Exists",
			fmt.Sprintf("The fvESg object with DN '%s' already exists.", stateData.Id.ValueString()),
		)
		return
	}

	var data *FvESgResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsUnknown() || data.Id.IsNull() {
		setFvESgId(ctx, data)
	}

	tflog.Debug(ctx, fmt.Sprintf("Create of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))

	var fvRsConsPlan, fvRsConsState []FvRsConsFvESgResourceModel
	data.FvRsCons.ElementsAs(ctx, &fvRsConsPlan, false)
	stateData.FvRsCons.ElementsAs(ctx, &fvRsConsState, false)
	var fvRsConsIfPlan, fvRsConsIfState []FvRsConsIfFvESgResourceModel
	data.FvRsConsIf.ElementsAs(ctx, &fvRsConsIfPlan, false)
	stateData.FvRsConsIf.ElementsAs(ctx, &fvRsConsIfState, false)
	var fvRsIntraEpgPlan, fvRsIntraEpgState []FvRsIntraEpgFvESgResourceModel
	data.FvRsIntraEpg.ElementsAs(ctx, &fvRsIntraEpgPlan, false)
	stateData.FvRsIntraEpg.ElementsAs(ctx, &fvRsIntraEpgState, false)
	var fvRsProvPlan, fvRsProvState []FvRsProvFvESgResourceModel
	data.FvRsProv.ElementsAs(ctx, &fvRsProvPlan, false)
	stateData.FvRsProv.ElementsAs(ctx, &fvRsProvState, false)
	var fvRsScopePlan, fvRsScopeState []FvRsScopeFvESgResourceModel
	data.FvRsScope.ElementsAs(ctx, &fvRsScopePlan, false)
	stateData.FvRsScope.ElementsAs(ctx, &fvRsScopeState, false)
	var fvRsSecInheritedPlan, fvRsSecInheritedState []FvRsSecInheritedFvESgResourceModel
	data.FvRsSecInherited.ElementsAs(ctx, &fvRsSecInheritedPlan, false)
	stateData.FvRsSecInherited.ElementsAs(ctx, &fvRsSecInheritedState, false)
	var tagAnnotationPlan, tagAnnotationState []TagAnnotationFvESgResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagFvESgResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getFvESgCreateJsonPayload(ctx, &resp.Diagnostics, true, data, fvRsConsPlan, fvRsConsState, fvRsConsIfPlan, fvRsConsIfState, fvRsIntraEpgPlan, fvRsIntraEpgState, fvRsProvPlan, fvRsProvState, fvRsScopePlan, fvRsScopeState, fvRsSecInheritedPlan, fvRsSecInheritedState, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetFvESgAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End create of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))
}

func (r *FvESgResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Debug(ctx, "Start read of resource: aci_endpoint_security_group")
	var data *FvESgResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Read of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))

	getAndSetFvESgAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	if data.Id.IsNull() {
		var emptyData *FvESgResourceModel
		resp.Diagnostics.Append(resp.State.Set(ctx, &emptyData)...)
	} else {
		resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	}

	tflog.Debug(ctx, fmt.Sprintf("End read of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))
}

func (r *FvESgResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Debug(ctx, "Start update of resource: aci_endpoint_security_group")
	var data *FvESgResourceModel
	var stateData *FvESgResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))

	var fvRsConsPlan, fvRsConsState []FvRsConsFvESgResourceModel
	data.FvRsCons.ElementsAs(ctx, &fvRsConsPlan, false)
	stateData.FvRsCons.ElementsAs(ctx, &fvRsConsState, false)
	var fvRsConsIfPlan, fvRsConsIfState []FvRsConsIfFvESgResourceModel
	data.FvRsConsIf.ElementsAs(ctx, &fvRsConsIfPlan, false)
	stateData.FvRsConsIf.ElementsAs(ctx, &fvRsConsIfState, false)
	var fvRsIntraEpgPlan, fvRsIntraEpgState []FvRsIntraEpgFvESgResourceModel
	data.FvRsIntraEpg.ElementsAs(ctx, &fvRsIntraEpgPlan, false)
	stateData.FvRsIntraEpg.ElementsAs(ctx, &fvRsIntraEpgState, false)
	var fvRsProvPlan, fvRsProvState []FvRsProvFvESgResourceModel
	data.FvRsProv.ElementsAs(ctx, &fvRsProvPlan, false)
	stateData.FvRsProv.ElementsAs(ctx, &fvRsProvState, false)
	var fvRsScopePlan, fvRsScopeState []FvRsScopeFvESgResourceModel
	data.FvRsScope.ElementsAs(ctx, &fvRsScopePlan, false)
	stateData.FvRsScope.ElementsAs(ctx, &fvRsScopeState, false)
	var fvRsSecInheritedPlan, fvRsSecInheritedState []FvRsSecInheritedFvESgResourceModel
	data.FvRsSecInherited.ElementsAs(ctx, &fvRsSecInheritedPlan, false)
	stateData.FvRsSecInherited.ElementsAs(ctx, &fvRsSecInheritedState, false)
	var tagAnnotationPlan, tagAnnotationState []TagAnnotationFvESgResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagFvESgResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getFvESgCreateJsonPayload(ctx, &resp.Diagnostics, false, data, fvRsConsPlan, fvRsConsState, fvRsConsIfPlan, fvRsConsIfState, fvRsIntraEpgPlan, fvRsIntraEpgState, fvRsProvPlan, fvRsProvState, fvRsScopePlan, fvRsScopeState, fvRsSecInheritedPlan, fvRsSecInheritedState, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetFvESgAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End update of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))
}

func (r *FvESgResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Debug(ctx, "Start delete of resource: aci_endpoint_security_group")
	var data *FvESgResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Delete of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))
	jsonPayload := GetDeleteJsonPayload(ctx, &resp.Diagnostics, "fvESg", data.Id.ValueString())
	if resp.Diagnostics.HasError() {
		return
	}
	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("End delete of resource aci_endpoint_security_group with id '%s'", data.Id.ValueString()))
}

func (r *FvESgResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Start import state of resource: aci_endpoint_security_group")
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)

	var stateData *FvESgResourceModel
	resp.Diagnostics.Append(resp.State.Get(ctx, &stateData)...)
	tflog.Debug(ctx, fmt.Sprintf("Import state of resource aci_endpoint_security_group with id '%s'", stateData.Id.ValueString()))

	tflog.Debug(ctx, "End import of state resource: aci_endpoint_security_group")
}

func getAndSetFvESgAttributes(ctx context.Context, diags *diag.Diagnostics, client *client.Client, data *FvESgResourceModel) {
	requestData := DoRestRequest(ctx, diags, client, fmt.Sprintf("api/mo/%s.json?rsp-subtree=children&rsp-subtree-class=%s", data.Id.ValueString(), "fvESg,fvRsCons,fvRsConsIf,fvRsIntraEpg,fvRsProv,fvRsScope,fvRsSecInherited,tagAnnotation,tagTag"), "GET", nil)

	*data = *getEmptyFvESgResourceModel()

	if diags.HasError() {
		return
	}
	if requestData.Search("imdata").Search("fvESg").Data() != nil {
		classReadInfo := requestData.Search("imdata").Search("fvESg").Data().([]interface{})
		if len(classReadInfo) == 1 {
			attributes := classReadInfo[0].(map[string]interface{})["attributes"].(map[string]interface{})
			for attributeName, attributeValue := range attributes {
				if attributeName == "dn" {
					data.Id = basetypes.NewStringValue(attributeValue.(string))
					setFvESgParentDn(ctx, attributeValue.(string), data)
				}
				if attributeName == "annotation" {
					data.Annotation = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "descr" {
					data.Descr = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "exceptionTag" {
					data.ExceptionTag = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "matchT" {
					data.MatchT = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "name" {
					data.Name = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "nameAlias" {
					data.NameAlias = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "pcEnfPref" {
					data.PcEnfPref = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "prefGrMemb" {
					data.PrefGrMemb = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "shutdown" {
					data.Shutdown = basetypes.NewStringValue(attributeValue.(string))
				}
			}
			FvRsConsFvESgList := make([]FvRsConsFvESgResourceModel, 0)
			FvRsConsIfFvESgList := make([]FvRsConsIfFvESgResourceModel, 0)
			FvRsIntraEpgFvESgList := make([]FvRsIntraEpgFvESgResourceModel, 0)
			FvRsProvFvESgList := make([]FvRsProvFvESgResourceModel, 0)
			FvRsScopeFvESgList := make([]FvRsScopeFvESgResourceModel, 0)
			FvRsSecInheritedFvESgList := make([]FvRsSecInheritedFvESgResourceModel, 0)
			TagAnnotationFvESgList := make([]TagAnnotationFvESgResourceModel, 0)
			TagTagFvESgList := make([]TagTagFvESgResourceModel, 0)
			_, ok := classReadInfo[0].(map[string]interface{})["children"]
			if ok {
				children := classReadInfo[0].(map[string]interface{})["children"].([]interface{})
				for _, child := range children {
					for childClassName, childClassDetails := range child.(map[string]interface{}) {
						childAttributes := childClassDetails.(map[string]interface{})["attributes"].(map[string]interface{})
						if childClassName == "fvRsCons" {
							FvRsConsFvESg := getEmptyFvRsConsFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsConsFvESg.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "prio" {
									FvRsConsFvESg.Prio = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tnVzBrCPName" {
									FvRsConsFvESg.TnVzBrCPName = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							FvRsConsFvESgList = append(FvRsConsFvESgList, FvRsConsFvESg)
						}
						if childClassName == "fvRsConsIf" {
							FvRsConsIfFvESg := getEmptyFvRsConsIfFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsConsIfFvESg.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "prio" {
									FvRsConsIfFvESg.Prio = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tnVzCPIfName" {
									FvRsConsIfFvESg.TnVzCPIfName = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							FvRsConsIfFvESgList = append(FvRsConsIfFvESgList, FvRsConsIfFvESg)
						}
						if childClassName == "fvRsIntraEpg" {
							FvRsIntraEpgFvESg := getEmptyFvRsIntraEpgFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsIntraEpgFvESg.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tnVzBrCPName" {
									FvRsIntraEpgFvESg.TnVzBrCPName = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							FvRsIntraEpgFvESgList = append(FvRsIntraEpgFvESgList, FvRsIntraEpgFvESg)
						}
						if childClassName == "fvRsProv" {
							FvRsProvFvESg := getEmptyFvRsProvFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsProvFvESg.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "matchT" {
									FvRsProvFvESg.MatchT = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "prio" {
									FvRsProvFvESg.Prio = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tnVzBrCPName" {
									FvRsProvFvESg.TnVzBrCPName = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							FvRsProvFvESgList = append(FvRsProvFvESgList, FvRsProvFvESg)
						}
						if childClassName == "fvRsScope" {
							FvRsScopeFvESg := getEmptyFvRsScopeFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsScopeFvESg.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tnFvCtxName" {
									FvRsScopeFvESg.TnFvCtxName = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							FvRsScopeFvESgList = append(FvRsScopeFvESgList, FvRsScopeFvESg)
						}
						if childClassName == "fvRsSecInherited" {
							FvRsSecInheritedFvESg := getEmptyFvRsSecInheritedFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsSecInheritedFvESg.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tDn" {
									FvRsSecInheritedFvESg.TDn = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							FvRsSecInheritedFvESgList = append(FvRsSecInheritedFvESgList, FvRsSecInheritedFvESg)
						}
						if childClassName == "tagAnnotation" {
							TagAnnotationFvESg := getEmptyTagAnnotationFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagAnnotationFvESg.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagAnnotationFvESg.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							TagAnnotationFvESgList = append(TagAnnotationFvESgList, TagAnnotationFvESg)
						}
						if childClassName == "tagTag" {
							TagTagFvESg := getEmptyTagTagFvESgResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagTagFvESg.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagTagFvESg.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}
							}
							TagTagFvESgList = append(TagTagFvESgList, TagTagFvESg)
						}
					}
				}
			}
			fvRsConsSet, _ := types.SetValueFrom(ctx, data.FvRsCons.ElementType(ctx), FvRsConsFvESgList)
			data.FvRsCons = fvRsConsSet
			fvRsConsIfSet, _ := types.SetValueFrom(ctx, data.FvRsConsIf.ElementType(ctx), FvRsConsIfFvESgList)
			data.FvRsConsIf = fvRsConsIfSet
			fvRsIntraEpgSet, _ := types.SetValueFrom(ctx, data.FvRsIntraEpg.ElementType(ctx), FvRsIntraEpgFvESgList)
			data.FvRsIntraEpg = fvRsIntraEpgSet
			fvRsProvSet, _ := types.SetValueFrom(ctx, data.FvRsProv.ElementType(ctx), FvRsProvFvESgList)
			data.FvRsProv = fvRsProvSet
			fvRsScopeSet, _ := types.SetValueFrom(ctx, data.FvRsScope.ElementType(ctx), FvRsScopeFvESgList)
			data.FvRsScope = fvRsScopeSet
			fvRsSecInheritedSet, _ := types.SetValueFrom(ctx, data.FvRsSecInherited.ElementType(ctx), FvRsSecInheritedFvESgList)
			data.FvRsSecInherited = fvRsSecInheritedSet
			tagAnnotationSet, _ := types.SetValueFrom(ctx, data.TagAnnotation.ElementType(ctx), TagAnnotationFvESgList)
			data.TagAnnotation = tagAnnotationSet
			tagTagSet, _ := types.SetValueFrom(ctx, data.TagTag.ElementType(ctx), TagTagFvESgList)
			data.TagTag = tagTagSet
			setFvESgLegacyAttributes(ctx, diags, data, classReadInfo)
		} else {
			diags.AddError(
				"too many results in response",
				fmt.Sprintf("%v matches returned for class 'fvESg'. Please report this issue to the provider developers.", len(classReadInfo)),
			)
		}
	} else {
		data.Id = basetypes.NewStringNull()
	}
}

func getFvESgRn(ctx context.Context, data *FvESgResourceModel) string {
	rn := "esg-{name}"
	for _, identifier := range []string{"name"} {
		fieldName := fmt.Sprintf("%s%s", strings.ToUpper(identifier[:1]), identifier[1:])
		fieldValue := reflect.ValueOf(data).Elem().FieldByName(fieldName).Interface().(basetypes.StringValue).ValueString()
		rn = strings.ReplaceAll(rn, fmt.Sprintf("{%s}", identifier), fieldValue)
	}
	return rn
}

func setFvESgParentDn(ctx context.Context, dn string, data *FvESgResourceModel) {
	bracketIndex := 0
	rnIndex := 0
	for i := len(dn) - 1; i >= 0; i-- {
		if string(dn[i]) == "]" {
			bracketIndex = bracketIndex + 1
		} else if string(dn[i]) == "[" {
			bracketIndex = bracketIndex - 1
		} else if string(dn[i]) == "/" && bracketIndex == 0 {
			rnIndex = i
			break
		}
	}
	data.ParentDn = basetypes.NewStringValue(dn[:rnIndex])
}

func setFvESgId(ctx context.Context, data *FvESgResourceModel) {
	rn := getFvESgRn(ctx, data)
	data.Id = types.StringValue(fmt.Sprintf("%s/%s", data.ParentDn.ValueString(), rn))
}

func getFvESgFvRsConsChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, fvRsConsPlan, fvRsConsState []FvRsConsFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.FvRsCons.IsUnknown() {
		fvRsConsIdentifiers := []FvRsConsIdentifier{}
		for _, fvRsCons := range fvRsConsPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !fvRsCons.Annotation.IsUnknown() && !fvRsCons.Annotation.IsNull() {
				childMap["attributes"]["annotation"] = fvRsCons.Annotation.ValueString()
			} else {
				childMap["attributes"]["annotation"] = globalAnnotation
			}
			if !fvRsCons.Prio.IsUnknown() && !fvRsCons.Prio.IsNull() {
				childMap["attributes"]["prio"] = fvRsCons.Prio.ValueString()
			}
			if !fvRsCons.TnVzBrCPName.IsUnknown() && !fvRsCons.TnVzBrCPName.IsNull() {
				childMap["attributes"]["tnVzBrCPName"] = fvRsCons.TnVzBrCPName.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"fvRsCons": childMap})
			fvRsConsIdentifier := FvRsConsIdentifier{}
			fvRsConsIdentifier.TnVzBrCPName = fvRsCons.TnVzBrCPName
			fvRsConsIdentifiers = append(fvRsConsIdentifiers, fvRsConsIdentifier)
		}
		for _, fvRsCons := range fvRsConsState {
			delete := true
			for _, fvRsConsIdentifier := range fvRsConsIdentifiers {
				if fvRsConsIdentifier.TnVzBrCPName == fvRsCons.TnVzBrCPName {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["tnVzBrCPName"] = fvRsCons.TnVzBrCPName.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"fvRsCons": childMap})
			}
		}
	} else {
		data.FvRsCons = types.SetNull(data.FvRsCons.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgFvRsConsIfChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, fvRsConsIfPlan, fvRsConsIfState []FvRsConsIfFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.FvRsConsIf.IsUnknown() {
		fvRsConsIfIdentifiers := []FvRsConsIfIdentifier{}
		for _, fvRsConsIf := range fvRsConsIfPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !fvRsConsIf.Annotation.IsUnknown() && !fvRsConsIf.Annotation.IsNull() {
				childMap["attributes"]["annotation"] = fvRsConsIf.Annotation.ValueString()
			} else {
				childMap["attributes"]["annotation"] = globalAnnotation
			}
			if !fvRsConsIf.Prio.IsUnknown() && !fvRsConsIf.Prio.IsNull() {
				childMap["attributes"]["prio"] = fvRsConsIf.Prio.ValueString()
			}
			if !fvRsConsIf.TnVzCPIfName.IsUnknown() && !fvRsConsIf.TnVzCPIfName.IsNull() {
				childMap["attributes"]["tnVzCPIfName"] = fvRsConsIf.TnVzCPIfName.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"fvRsConsIf": childMap})
			fvRsConsIfIdentifier := FvRsConsIfIdentifier{}
			fvRsConsIfIdentifier.TnVzCPIfName = fvRsConsIf.TnVzCPIfName
			fvRsConsIfIdentifiers = append(fvRsConsIfIdentifiers, fvRsConsIfIdentifier)
		}
		for _, fvRsConsIf := range fvRsConsIfState {
			delete := true
			for _, fvRsConsIfIdentifier := range fvRsConsIfIdentifiers {
				if fvRsConsIfIdentifier.TnVzCPIfName == fvRsConsIf.TnVzCPIfName {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["tnVzCPIfName"] = fvRsConsIf.TnVzCPIfName.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"fvRsConsIf": childMap})
			}
		}
	} else {
		data.FvRsConsIf = types.SetNull(data.FvRsConsIf.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgFvRsIntraEpgChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, fvRsIntraEpgPlan, fvRsIntraEpgState []FvRsIntraEpgFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.FvRsIntraEpg.IsUnknown() {
		fvRsIntraEpgIdentifiers := []FvRsIntraEpgIdentifier{}
		for _, fvRsIntraEpg := range fvRsIntraEpgPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !fvRsIntraEpg.Annotation.IsUnknown() && !fvRsIntraEpg.Annotation.IsNull() {
				childMap["attributes"]["annotation"] = fvRsIntraEpg.Annotation.ValueString()
			} else {
				childMap["attributes"]["annotation"] = globalAnnotation
			}
			if !fvRsIntraEpg.TnVzBrCPName.IsUnknown() && !fvRsIntraEpg.TnVzBrCPName.IsNull() {
				childMap["attributes"]["tnVzBrCPName"] = fvRsIntraEpg.TnVzBrCPName.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"fvRsIntraEpg": childMap})
			fvRsIntraEpgIdentifier := FvRsIntraEpgIdentifier{}
			fvRsIntraEpgIdentifier.TnVzBrCPName = fvRsIntraEpg.TnVzBrCPName
			fvRsIntraEpgIdentifiers = append(fvRsIntraEpgIdentifiers, fvRsIntraEpgIdentifier)
		}
		for _, fvRsIntraEpg := range fvRsIntraEpgState {
			delete := true
			for _, fvRsIntraEpgIdentifier := range fvRsIntraEpgIdentifiers {
				if fvRsIntraEpgIdentifier.TnVzBrCPName == fvRsIntraEpg.TnVzBrCPName {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["tnVzBrCPName"] = fvRsIntraEpg.TnVzBrCPName.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"fvRsIntraEpg": childMap})
			}
		}
	} else {
		data.FvRsIntraEpg = types.SetNull(data.FvRsIntraEpg.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgFvRsProvChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, fvRsProvPlan, fvRsProvState []FvRsProvFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.FvRsProv.IsUnknown() {
		fvRsProvIdentifiers := []FvRsProvIdentifier{}
		for _, fvRsProv := range fvRsProvPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !fvRsProv.Annotation.IsUnknown() && !fvRsProv.Annotation.IsNull() {
				childMap["attributes"]["annotation"] = fvRsProv.Annotation.ValueString()
			} else {
				childMap["attributes"]["annotation"] = globalAnnotation
			}
			if !fvRsProv.MatchT.IsUnknown() && !fvRsProv.MatchT.IsNull() {
				childMap["attributes"]["matchT"] = fvRsProv.MatchT.ValueString()
			}
			if !fvRsProv.Prio.IsUnknown() && !fvRsProv.Prio.IsNull() {
				childMap["attributes"]["prio"] = fvRsProv.Prio.ValueString()
			}
			if !fvRsProv.TnVzBrCPName.IsUnknown() && !fvRsProv.TnVzBrCPName.IsNull() {
				childMap["attributes"]["tnVzBrCPName"] = fvRsProv.TnVzBrCPName.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"fvRsProv": childMap})
			fvRsProvIdentifier := FvRsProvIdentifier{}
			fvRsProvIdentifier.TnVzBrCPName = fvRsProv.TnVzBrCPName
			fvRsProvIdentifiers = append(fvRsProvIdentifiers, fvRsProvIdentifier)
		}
		for _, fvRsProv := range fvRsProvState {
			delete := true
			for _, fvRsProvIdentifier := range fvRsProvIdentifiers {
				if fvRsProvIdentifier.TnVzBrCPName == fvRsProv.TnVzBrCPName {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["tnVzBrCPName"] = fvRsProv.TnVzBrCPName.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"fvRsProv": childMap})
			}
		}
	} else {
		data.FvRsProv = types.SetNull(data.FvRsProv.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgFvRsScopeChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, fvRsScopePlan, fvRsScopeState []FvRsScopeFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.FvRsScope.IsUnknown() {
		for _, fvRsScope := range fvRsScopePlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !fvRsScope.Annotation.IsUnknown() && !fvRsScope.Annotation.IsNull() {
				childMap["attributes"]["annotation"] = fvRsScope.Annotation.ValueString()
			} else {
				childMap["attributes"]["annotation"] = globalAnnotation
			}
			if !fvRsScope.TnFvCtxName.IsUnknown() && !fvRsScope.TnFvCtxName.IsNull() {
				childMap["attributes"]["tnFvCtxName"] = fvRsScope.TnFvCtxName.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"fvRsScope": childMap})
		}
		if len(fvRsScopePlan) == 0 && len(fvRsScopeState) == 1 {
			diags.AddError(
				"FvRsScope object cannot be deleted",
				"deletion of child is only possible upon deletion of the parent",
			)
			return nil
		}
	} else {
		data.FvRsScope = types.SetNull(data.FvRsScope.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgFvRsSecInheritedChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, fvRsSecInheritedPlan, fvRsSecInheritedState []FvRsSecInheritedFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.FvRsSecInherited.IsUnknown() {
		fvRsSecInheritedIdentifiers := []FvRsSecInheritedIdentifier{}
		for _, fvRsSecInherited := range fvRsSecInheritedPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !fvRsSecInherited.Annotation.IsUnknown() && !fvRsSecInherited.Annotation.IsNull() {
				childMap["attributes"]["annotation"] = fvRsSecInherited.Annotation.ValueString()
			} else {
				childMap["attributes"]["annotation"] = globalAnnotation
			}
			if !fvRsSecInherited.TDn.IsUnknown() && !fvRsSecInherited.TDn.IsNull() {
				childMap["attributes"]["tDn"] = fvRsSecInherited.TDn.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"fvRsSecInherited": childMap})
			fvRsSecInheritedIdentifier := FvRsSecInheritedIdentifier{}
			fvRsSecInheritedIdentifier.TDn = fvRsSecInherited.TDn
			fvRsSecInheritedIdentifiers = append(fvRsSecInheritedIdentifiers, fvRsSecInheritedIdentifier)
		}
		for _, fvRsSecInherited := range fvRsSecInheritedState {
			delete := true
			for _, fvRsSecInheritedIdentifier := range fvRsSecInheritedIdentifiers {
				if fvRsSecInheritedIdentifier.TDn == fvRsSecInherited.TDn {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["tDn"] = fvRsSecInherited.TDn.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"fvRsSecInherited": childMap})
			}
		}
	} else {
		data.FvRsSecInherited = types.SetNull(data.FvRsSecInherited.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgTagAnnotationChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.TagAnnotation.IsUnknown() {
		tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
		for _, tagAnnotation := range tagAnnotationPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !tagAnnotation.Key.IsUnknown() && !tagAnnotation.Key.IsNull() {
				childMap["attributes"]["key"] = tagAnnotation.Key.ValueString()
			}
			if !tagAnnotation.Value.IsUnknown() && !tagAnnotation.Value.IsNull() {
				childMap["attributes"]["value"] = tagAnnotation.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": childMap})
			tagAnnotationIdentifier := TagAnnotationIdentifier{}
			tagAnnotationIdentifier.Key = tagAnnotation.Key
			tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
		}
		for _, tagAnnotation := range tagAnnotationState {
			delete := true
			for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
				if tagAnnotationIdentifier.Key == tagAnnotation.Key {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["key"] = tagAnnotation.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": childMap})
			}
		}
	} else {
		data.TagAnnotation = types.SetNull(data.TagAnnotation.ElementType(ctx))
	}

	return childPayloads
}
func getFvESgTagTagChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvESgResourceModel, tagTagPlan, tagTagState []TagTagFvESgResourceModel) []map[string]interface{} {

	childPayloads := []map[string]interface{}{}
	if !data.TagTag.IsUnknown() {
		tagTagIdentifiers := []TagTagIdentifier{}
		for _, tagTag := range tagTagPlan {
			childMap := map[string]map[string]interface{}{"attributes": {}}
			if !tagTag.Key.IsUnknown() && !tagTag.Key.IsNull() {
				childMap["attributes"]["key"] = tagTag.Key.ValueString()
			}
			if !tagTag.Value.IsUnknown() && !tagTag.Value.IsNull() {
				childMap["attributes"]["value"] = tagTag.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagTag": childMap})
			tagTagIdentifier := TagTagIdentifier{}
			tagTagIdentifier.Key = tagTag.Key
			tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
		}
		for _, tagTag := range tagTagState {
			delete := true
			for _, tagTagIdentifier := range tagTagIdentifiers {
				if tagTagIdentifier.Key == tagTag.Key {
					delete = false
					break
				}
			}
			if delete {
				childMap := map[string]map[string]interface{}{"attributes": {}}
				childMap["attributes"]["status"] = "deleted"
				childMap["attributes"]["key"] = tagTag.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagTag": childMap})
			}
		}
	} else {
		data.TagTag = types.SetNull(data.TagTag.ElementType(ctx))
	}

	return childPayloads
}

func getFvESgCreateJsonPayload(ctx context.Context, diags *diag.Diagnostics, createType bool, data *FvESgResourceModel, fvRsConsPlan, fvRsConsState []FvRsConsFvESgResourceModel, fvRsConsIfPlan, fvRsConsIfState []FvRsConsIfFvESgResourceModel, fvRsIntraEpgPlan, fvRsIntraEpgState []FvRsIntraEpgFvESgResourceModel, fvRsProvPlan, fvRsProvState []FvRsProvFvESgResourceModel, fvRsScopePlan, fvRsScopeState []FvRsScopeFvESgResourceModel, fvRsSecInheritedPlan, fvRsSecInheritedState []FvRsSecInheritedFvESgResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationFvESgResourceModel, tagTagPlan, tagTagState []TagTagFvESgResourceModel) *container.Container {
	payloadMap := map[string]interface{}{}
	payloadMap["attributes"] = map[string]string{}

	if createType && !globalAllowExistingOnCreate {
		payloadMap["attributes"].(map[string]string)["status"] = "created"
	}
	childPayloads := []map[string]interface{}{}

	FvRsConschildPayloads := getFvESgFvRsConsChildPayloads(ctx, diags, data, fvRsConsPlan, fvRsConsState)
	if FvRsConschildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsConschildPayloads...)

	FvRsConsIfchildPayloads := getFvESgFvRsConsIfChildPayloads(ctx, diags, data, fvRsConsIfPlan, fvRsConsIfState)
	if FvRsConsIfchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsConsIfchildPayloads...)

	FvRsIntraEpgchildPayloads := getFvESgFvRsIntraEpgChildPayloads(ctx, diags, data, fvRsIntraEpgPlan, fvRsIntraEpgState)
	if FvRsIntraEpgchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsIntraEpgchildPayloads...)

	FvRsProvchildPayloads := getFvESgFvRsProvChildPayloads(ctx, diags, data, fvRsProvPlan, fvRsProvState)
	if FvRsProvchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsProvchildPayloads...)

	FvRsScopechildPayloads := getFvESgFvRsScopeChildPayloads(ctx, diags, data, fvRsScopePlan, fvRsScopeState)
	if FvRsScopechildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsScopechildPayloads...)

	FvRsSecInheritedchildPayloads := getFvESgFvRsSecInheritedChildPayloads(ctx, diags, data, fvRsSecInheritedPlan, fvRsSecInheritedState)
	if FvRsSecInheritedchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsSecInheritedchildPayloads...)

	TagAnnotationchildPayloads := getFvESgTagAnnotationChildPayloads(ctx, diags, data, tagAnnotationPlan, tagAnnotationState)
	if TagAnnotationchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagAnnotationchildPayloads...)

	TagTagchildPayloads := getFvESgTagTagChildPayloads(ctx, diags, data, tagTagPlan, tagTagState)
	if TagTagchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagTagchildPayloads...)

	payloadMap["children"] = childPayloads
	if !data.Annotation.IsNull() && !data.Annotation.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["annotation"] = data.Annotation.ValueString()
	}
	if !data.Descr.IsNull() && !data.Descr.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["descr"] = data.Descr.ValueString()
	}
	if !data.ExceptionTag.IsNull() && !data.ExceptionTag.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["exceptionTag"] = data.ExceptionTag.ValueString()
	}
	if !data.MatchT.IsNull() && !data.MatchT.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["matchT"] = data.MatchT.ValueString()
	}
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["name"] = data.Name.ValueString()
	}
	if !data.NameAlias.IsNull() && !data.NameAlias.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["nameAlias"] = data.NameAlias.ValueString()
	}
	if !data.PcEnfPref.IsNull() && !data.PcEnfPref.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["pcEnfPref"] = data.PcEnfPref.ValueString()
	}
	if !data.PrefGrMemb.IsNull() && !data.PrefGrMemb.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["prefGrMemb"] = data.PrefGrMemb.ValueString()
	}
	if !data.Shutdown.IsNull() && !data.Shutdown.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["shutdown"] = data.Shutdown.ValueString()
	}

	payload, err := json.Marshal(map[string]interface{}{"fvESg": payloadMap})
	if err != nil {
		diags.AddError(
			"Marshalling of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}

	jsonPayload, err := container.ParseJSON(payload)

	if err != nil {
		diags.AddError(
			"Construction of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}
	return jsonPayload
}
