// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceFvAEPgWithFvAp(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvAEPgMinDependencyWithFvApAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "useg_epg", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "useg_epg", "no"),
					resource.TestCheckResourceAttrSet("aci_application_epg.allow_test", "pc_tag"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigFvAEPgMinDependencyWithFvApAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvAEPgMinDependencyWithFvApAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test", "useg_epg", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.allow_test_2", "useg_epg", "no"),
					resource.TestCheckResourceAttrSet("aci_application_epg.allow_test", "pc_tag"),
					resource.TestCheckResourceAttrSet("aci_application_epg.allow_test_2", "pc_tag"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFvAEPgMinDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "useg_epg", "no"),
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigFvAEPgAllDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "contract_exception_tag", "contract_exception_tag_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "forwarding_control", "proxy-arp"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "intra_epg_isolation", "enforced"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "match_criteria", "All"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "useg_epg", "no"),
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigFvAEPgMinDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.test", "name", "test_name"),
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigFvAEPgResetDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "useg_epg", "no"),
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_application_epg.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigFvAEPgChildrenDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_application_epg.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "admin_state", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "contract_exception_tag", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "description", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "flood_in_encapsulation", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "forwarding_control", "none"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "has_multicast_source", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "intra_epg_isolation", "unenforced"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "preferred_group_member", "exclude"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "priority", "unspecified"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "useg_epg", "no"),
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.match", "all"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.name", "criterion"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.owner_key", "owner_key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.owner_tag", "owner_tag_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.precedence", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.scope", "scope-bd"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.0.monitoring_policy_name", "monitoring_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.bridge_domain_name", "bridge_domain_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.contract_name", "contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.1.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.1.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.0.target_dn", "uni/tn-test_tenant/ap-test_ap/epg-epg_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.1.target_dn", "uni/tn-test_tenant/ap-test_ap/epg-epg_3"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.custom_qos_policy_name", "custom_qos_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.0.data_plane_policing_policy_name", "data_plane_policing_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.binding_type", "dynamicBinding"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.class_preference", "encap"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.custom_epg_name", "custom_epg_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.delimiter", "@"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.deployment_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.enable_netflow", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.encapsulation", "vlan-100"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.encapsulation_mode", "auto"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.epg_cos", "Cos0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.epg_cos_pref", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.lag_policy_name", "lag_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.netflow_direction", "both"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.number_of_ports", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.port_allocation", "elastic"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.primary_encapsulation", "vlan-200"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.primary_encapsulation_inner", "vlan-300"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.resolution_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.secondary_encapsulation_inner", "vlan-400"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.switching_mode", "AVE"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.target_dn", "uni/vmmp-VMware/dom-domain_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.untagged", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.vnet_only", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.binding_type", "ephemeral"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.class_preference", "useg"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.custom_epg_name", "custom_epg_name_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.delimiter", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.enable_netflow", "enabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.encapsulation_mode", "vlan"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.epg_cos", "Cos1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.epg_cos_pref", "enabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.lag_policy_name", "lag_policy_name_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.netflow_direction", "egress"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.number_of_ports", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.port_allocation", "fixed"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.primary_encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.primary_encapsulation_inner", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.resolution_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.secondary_encapsulation_inner", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.switching_mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.target_dn", "uni/vmmp-VMware/dom-domain_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.untagged", "yes"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.vnet_only", "yes"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.vsan", "vsan-10"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.vsan_mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.target_dn", "topology/pod-1/paths-101/pathep-[eth1/2]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.vsan", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.vsan_mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.imported_contract_name", "imported_contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.1.imported_contract_name", "imported_contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.1.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.0.contract_name", "contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.1.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.contract_name", "contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.match_criteria", "All"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.deployment_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.encapsulation", "vlan-100"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.target_dn", "topology/pod-1/node-101"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.encapsulation", "vlan-101"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.target_dn", "topology/pod-1/node-102"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.deployment_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.encapsulation", "vlan-202"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.primary_encapsulation", "vlan-203"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.encapsulation", "vlan-201"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.primary_encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.target_dn", "topology/pod-1/paths-101/pathep-[eth1/2]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.0.taboo_contract_name", "taboo_contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.1.taboo_contract_name", "taboo_contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.0.trust_control_policy_name", "trust_control_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.1.value", "test_value"),
				),
			},
			// Import testing with children
			{
				ResourceName:      "aci_application_epg.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigFvAEPgChildrenRemoveFromConfigDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.match", "all"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.name", "criterion"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.owner_key", "owner_key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.owner_tag", "owner_tag_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.precedence", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.0.scope", "scope-bd"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.0.monitoring_policy_name", "monitoring_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.bridge_domain_name", "bridge_domain_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.contract_name", "contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.1.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.1.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.0.target_dn", "uni/tn-test_tenant/ap-test_ap/epg-epg_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.1.target_dn", "uni/tn-test_tenant/ap-test_ap/epg-epg_3"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.custom_qos_policy_name", "custom_qos_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.0.data_plane_policing_policy_name", "data_plane_policing_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.binding_type", "dynamicBinding"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.class_preference", "encap"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.custom_epg_name", "custom_epg_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.delimiter", "@"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.deployment_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.enable_netflow", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.encapsulation", "vlan-100"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.encapsulation_mode", "auto"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.epg_cos", "Cos0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.epg_cos_pref", "disabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.lag_policy_name", "lag_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.netflow_direction", "both"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.number_of_ports", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.port_allocation", "elastic"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.primary_encapsulation", "vlan-200"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.primary_encapsulation_inner", "vlan-300"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.resolution_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.secondary_encapsulation_inner", "vlan-400"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.switching_mode", "AVE"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.target_dn", "uni/vmmp-VMware/dom-domain_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.untagged", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.vnet_only", "no"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.binding_type", "ephemeral"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.class_preference", "useg"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.custom_epg_name", "custom_epg_name_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.delimiter", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.enable_netflow", "enabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.encapsulation_mode", "vlan"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.epg_cos", "Cos1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.epg_cos_pref", "enabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.lag_policy_name", "lag_policy_name_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.netflow_direction", "egress"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.number_of_ports", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.port_allocation", "fixed"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.primary_encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.primary_encapsulation_inner", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.resolution_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.secondary_encapsulation_inner", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.switching_mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.target_dn", "uni/vmmp-VMware/dom-domain_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.untagged", "yes"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.1.vnet_only", "yes"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.vsan", "vsan-10"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.vsan_mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.target_dn", "topology/pod-1/paths-101/pathep-[eth1/2]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.vsan", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.1.vsan_mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.imported_contract_name", "imported_contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.1.imported_contract_name", "imported_contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.1.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.0.contract_name", "contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.1.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.contract_name", "contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.match_criteria", "All"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.priority", "level1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.1.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.deployment_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.encapsulation", "vlan-100"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.target_dn", "topology/pod-1/node-101"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.encapsulation", "vlan-101"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.1.target_dn", "topology/pod-1/node-102"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.deployment_immediacy", "immediate"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.description", "description_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.encapsulation", "vlan-202"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.primary_encapsulation", "vlan-203"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.target_dn", "topology/pod-1/paths-101/pathep-[eth1/1]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.encapsulation", "vlan-201"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.primary_encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.1.target_dn", "topology/pod-1/paths-101/pathep-[eth1/2]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.0.taboo_contract_name", "taboo_contract_name_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.1.taboo_contract_name", "taboo_contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.#", "2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.0.trust_control_policy_name", "trust_control_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigFvAEPgChildrenRemoveOneDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.bridge_domain_name", "bridge_domain_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.0.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.0.target_dn", "uni/tn-test_tenant/ap-test_ap/epg-epg_3"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.custom_qos_policy_name", "custom_qos_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.binding_type", "ephemeral"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.class_preference", "useg"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.custom_epg_name", "custom_epg_name_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.delimiter", ""),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.enable_netflow", "enabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.encapsulation_mode", "vlan"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.epg_cos", "Cos1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.epg_cos_pref", "enabled"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.lag_policy_name", "lag_policy_name_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.netflow_direction", "egress"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.number_of_ports", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.port_allocation", "fixed"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.primary_encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.primary_encapsulation_inner", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.resolution_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.secondary_encapsulation_inner", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.switching_mode", "native"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.target_dn", "uni/vmmp-VMware/dom-domain_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.untagged", "yes"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.0.vnet_only", "yes"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.target_dn", "topology/pod-1/paths-101/pathep-[eth1/2]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.vsan", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.0.vsan_mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.imported_contract_name", "imported_contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.0.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.0.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.contract_name", "contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.match_criteria", "AtleastOne"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.0.priority", "level2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.encapsulation", "vlan-101"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.0.target_dn", "topology/pod-1/node-102"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.deployment_immediacy", "lazy"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.description", "description_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.encapsulation", "vlan-201"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.mode", "regular"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.primary_encapsulation", "unknown"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.0.target_dn", "topology/pod-1/paths-101/pathep-[eth1/2]"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.0.taboo_contract_name", "taboo_contract_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigFvAEPgChildrenRemoveAllDependencyWithFvAp,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet("aci_application_epg.test", "pc_tag"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "epg_useg_block_statement.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_application_epg_monitoring_policy.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.0.bridge_domain_name", "bridge_domain_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_bridge_domain.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_consumed_contracts.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_contract_masters.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.0.custom_qos_policy_name", "custom_qos_policy_name_1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_custom_qos_policy.#", "1"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_data_plane_policing_policy.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_domains.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_fibre_channel_paths.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_imported_contracts.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_intra_epg_contracts.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_provided_contracts.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_leafs.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_static_paths.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_taboo_contracts.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "relation_to_trust_control_policy.#", "0"),
					resource.TestCheckResourceAttr("aci_application_epg.test", "tags.#", "0"),
				),
			},
		},
	})
}

const testChildDependencyConfigFvAEPg = `
resource "aci_application_epg" "test_application_epg_0"{
  application_profile_dn = aci_application_profile.test.id
  name = "epg_2"
}
resource "aci_application_epg" "test_application_epg_1"{
  application_profile_dn = aci_application_profile.test.id
  name = "epg_3"
}
`

const testConfigFvAEPgMinDependencyWithFvApAllowExisting = testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "allow_test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
}
resource "aci_application_epg" "allow_test_2" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
  depends_on = [aci_application_epg.allow_test]
}
`

const testConfigFvAEPgMinDependencyWithFvAp = testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
}
`

const testConfigFvAEPgAllDependencyWithFvAp = testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
  admin_state = "no"
  annotation = "annotation"
  contract_exception_tag = "contract_exception_tag_1"
  description = "description_1"
  flood_in_encapsulation = "disabled"
  forwarding_control = "proxy-arp"
  has_multicast_source = "no"
  intra_epg_isolation = "enforced"
  match_criteria = "All"
  name_alias = "name_alias_1"
  preferred_group_member = "exclude"
  priority = "level1"
  useg_epg = "no"
}
`

const testConfigFvAEPgResetDependencyWithFvAp = testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
  admin_state = "no"
  annotation = "orchestrator:terraform"
  contract_exception_tag = ""
  description = ""
  flood_in_encapsulation = "disabled"
  forwarding_control = "none"
  has_multicast_source = "no"
  intra_epg_isolation = "unenforced"
  match_criteria = "AtleastOne"
  name_alias = ""
  preferred_group_member = "exclude"
  priority = "unspecified"
  useg_epg = "no"
}
`
const testConfigFvAEPgChildrenDependencyWithFvAp = testChildDependencyConfigFvAEPg + testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  epg_useg_block_statement = [
	{
	  annotation = "annotation_1"
	  description = "description_1"
	  match = "all"
	  name = "criterion"
	  name_alias = "name_alias_1"
	  owner_key = "owner_key_1"
	  owner_tag = "owner_tag_1"
	  precedence = "1"
	  scope = "scope-bd"
	},
  ]
  relation_to_application_epg_monitoring_policy = [
	{
	  annotation = "annotation_1"
	  monitoring_policy_name = "monitoring_policy_name_1"
	},
  ]
  relation_to_bridge_domain = [
	{
	  annotation = "annotation_1"
	  bridge_domain_name = "bridge_domain_name_1"
	},
  ]
  relation_to_consumed_contracts = [
	{
	  annotation = "annotation_1"
	  contract_name = "contract_name_0"
	  priority = "level1"
	},
	{
	  annotation = "annotation_2"
	  contract_name = "contract_name_1"
	  priority = "level2"
	},
  ]
  relation_to_contract_masters = [
	{
	  annotation = "annotation_1"
	  target_dn = aci_application_epg.test_application_epg_0.id
	},
	{
	  annotation = "annotation_2"
	  target_dn = aci_application_epg.test_application_epg_1.id
	},
  ]
  relation_to_custom_qos_policy = [
	{
	  annotation = "annotation_1"
	  custom_qos_policy_name = "custom_qos_policy_name_1"
	},
  ]
  relation_to_data_plane_policing_policy = [
	{
	  annotation = "annotation_1"
	  data_plane_policing_policy_name = "data_plane_policing_policy_name_1"
	},
  ]
  relation_to_domains = [
	{
	  annotation = "annotation_1"
	  binding_type = "dynamicBinding"
	  class_preference = "encap"
	  custom_epg_name = "custom_epg_name_1"
	  delimiter = "@"
	  deployment_immediacy = "immediate"
	  enable_netflow = "disabled"
	  encapsulation = "vlan-100"
	  encapsulation_mode = "auto"
	  epg_cos = "Cos0"
	  epg_cos_pref = "disabled"
	  lag_policy_name = "lag_policy_name_1"
	  netflow_direction = "both"
	  number_of_ports = "1"
	  port_allocation = "elastic"
	  primary_encapsulation = "vlan-200"
	  primary_encapsulation_inner = "vlan-300"
	  resolution_immediacy = "immediate"
	  secondary_encapsulation_inner = "vlan-400"
	  switching_mode = "AVE"
	  target_dn = "uni/vmmp-VMware/dom-domain_1"
	  untagged = "no"
	  vnet_only = "no"
	},
	{
	  annotation = "annotation_2"
	  binding_type = "ephemeral"
	  class_preference = "useg"
	  custom_epg_name = "custom_epg_name_2"
	  delimiter = ""
	  deployment_immediacy = "lazy"
	  enable_netflow = "enabled"
	  encapsulation = "unknown"
	  encapsulation_mode = "vlan"
	  epg_cos = "Cos1"
	  epg_cos_pref = "enabled"
	  lag_policy_name = "lag_policy_name_2"
	  netflow_direction = "egress"
	  number_of_ports = "0"
	  port_allocation = "fixed"
	  primary_encapsulation = "unknown"
	  primary_encapsulation_inner = "unknown"
	  resolution_immediacy = "lazy"
	  secondary_encapsulation_inner = "unknown"
	  switching_mode = "native"
	  target_dn = "uni/vmmp-VMware/dom-domain_2"
	  untagged = "yes"
	  vnet_only = "yes"
	},
  ]
  relation_to_fibre_channel_paths = [
	{
	  annotation = "annotation_1"
	  description = "description_1"
	  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
	  vsan = "vsan-10"
	  vsan_mode = "native"
	},
	{
	  annotation = "annotation_2"
	  description = "description_2"
	  target_dn = "topology/pod-1/paths-101/pathep-[eth1/2]"
	  vsan = "unknown"
	  vsan_mode = "regular"
	},
  ]
  relation_to_imported_contracts = [
	{
	  annotation = "annotation_1"
	  imported_contract_name = "imported_contract_name_0"
	  priority = "level1"
	},
	{
	  annotation = "annotation_2"
	  imported_contract_name = "imported_contract_name_1"
	  priority = "level2"
	},
  ]
  relation_to_intra_epg_contracts = [
	{
	  annotation = "annotation_1"
	  contract_name = "contract_name_0"
	},
	{
	  annotation = "annotation_2"
	  contract_name = "contract_name_1"
	},
  ]
  relation_to_provided_contracts = [
	{
	  annotation = "annotation_1"
	  contract_name = "contract_name_0"
	  match_criteria = "All"
	  priority = "level1"
	},
	{
	  annotation = "annotation_2"
	  contract_name = "contract_name_1"
	  match_criteria = "AtleastOne"
	  priority = "level2"
	},
  ]
  relation_to_static_leafs = [
	{
	  annotation = "annotation_1"
	  deployment_immediacy = "immediate"
	  description = "description_1"
	  encapsulation = "vlan-100"
	  mode = "native"
	  target_dn = "topology/pod-1/node-101"
	},
	{
	  annotation = "annotation_2"
	  deployment_immediacy = "lazy"
	  description = "description_2"
	  encapsulation = "vlan-101"
	  mode = "regular"
	  target_dn = "topology/pod-1/node-102"
	},
  ]
  relation_to_static_paths = [
	{
	  annotation = "annotation_1"
	  deployment_immediacy = "immediate"
	  description = "description_1"
	  encapsulation = "vlan-202"
	  mode = "native"
	  primary_encapsulation = "vlan-203"
	  target_dn = "topology/pod-1/paths-101/pathep-[eth1/1]"
	},
	{
	  annotation = "annotation_2"
	  deployment_immediacy = "lazy"
	  description = "description_2"
	  encapsulation = "vlan-201"
	  mode = "regular"
	  primary_encapsulation = "unknown"
	  target_dn = "topology/pod-1/paths-101/pathep-[eth1/2]"
	},
  ]
  relation_to_taboo_contracts = [
	{
	  annotation = "annotation_1"
	  taboo_contract_name = "taboo_contract_name_0"
	},
	{
	  annotation = "annotation_2"
	  taboo_contract_name = "taboo_contract_name_1"
	},
  ]
  relation_to_trust_control_policy = [
	{
	  annotation = "annotation_1"
	  trust_control_policy_name = "trust_control_policy_name_1"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigFvAEPgChildrenRemoveFromConfigDependencyWithFvAp = testChildDependencyConfigFvAEPg + testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
}
`

const testConfigFvAEPgChildrenRemoveOneDependencyWithFvAp = testChildDependencyConfigFvAEPg + testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  epg_useg_block_statement = []
  relation_to_application_epg_monitoring_policy = []
  relation_to_consumed_contracts = [ 
	{
	  annotation = "annotation_2"
	  contract_name = "contract_name_1"
	  priority = "level2"
	},
  ]
  relation_to_contract_masters = [ 
	{
	  annotation = "annotation_2"
	  target_dn = aci_application_epg.test_application_epg_1.id
	},
  ]
  relation_to_data_plane_policing_policy = []
  relation_to_domains = [ 
	{
	  annotation = "annotation_2"
	  binding_type = "ephemeral"
	  class_preference = "useg"
	  custom_epg_name = "custom_epg_name_2"
	  delimiter = ""
	  deployment_immediacy = "lazy"
	  enable_netflow = "enabled"
	  encapsulation = "unknown"
	  encapsulation_mode = "vlan"
	  epg_cos = "Cos1"
	  epg_cos_pref = "enabled"
	  lag_policy_name = "lag_policy_name_2"
	  netflow_direction = "egress"
	  number_of_ports = "0"
	  port_allocation = "fixed"
	  primary_encapsulation = "unknown"
	  primary_encapsulation_inner = "unknown"
	  resolution_immediacy = "lazy"
	  secondary_encapsulation_inner = "unknown"
	  switching_mode = "native"
	  target_dn = "uni/vmmp-VMware/dom-domain_2"
	  untagged = "yes"
	  vnet_only = "yes"
	},
  ]
  relation_to_fibre_channel_paths = [ 
	{
	  annotation = "annotation_2"
	  description = "description_2"
	  target_dn = "topology/pod-1/paths-101/pathep-[eth1/2]"
	  vsan = "unknown"
	  vsan_mode = "regular"
	},
  ]
  relation_to_imported_contracts = [ 
	{
	  annotation = "annotation_2"
	  imported_contract_name = "imported_contract_name_1"
	  priority = "level2"
	},
  ]
  relation_to_intra_epg_contracts = [ 
	{
	  annotation = "annotation_2"
	  contract_name = "contract_name_1"
	},
  ]
  relation_to_provided_contracts = [ 
	{
	  annotation = "annotation_2"
	  contract_name = "contract_name_1"
	  match_criteria = "AtleastOne"
	  priority = "level2"
	},
  ]
  relation_to_static_leafs = [ 
	{
	  annotation = "annotation_2"
	  deployment_immediacy = "lazy"
	  description = "description_2"
	  encapsulation = "vlan-101"
	  mode = "regular"
	  target_dn = "topology/pod-1/node-102"
	},
  ]
  relation_to_static_paths = [ 
	{
	  annotation = "annotation_2"
	  deployment_immediacy = "lazy"
	  description = "description_2"
	  encapsulation = "vlan-201"
	  mode = "regular"
	  primary_encapsulation = "unknown"
	  target_dn = "topology/pod-1/paths-101/pathep-[eth1/2]"
	},
  ]
  relation_to_taboo_contracts = [ 
	{
	  annotation = "annotation_2"
	  taboo_contract_name = "taboo_contract_name_1"
	},
  ]
  relation_to_trust_control_policy = []
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigFvAEPgChildrenRemoveAllDependencyWithFvAp = testChildDependencyConfigFvAEPg + testConfigFvApMinDependencyWithFvTenant + `
resource "aci_application_epg" "test" {
  parent_dn = aci_application_profile.test.id
  name = "test_name"
  annotations = []
  epg_useg_block_statement = []
  relation_to_application_epg_monitoring_policy = []
  relation_to_consumed_contracts = []
  relation_to_contract_masters = []
  relation_to_data_plane_policing_policy = []
  relation_to_domains = []
  relation_to_fibre_channel_paths = []
  relation_to_imported_contracts = []
  relation_to_intra_epg_contracts = []
  relation_to_provided_contracts = []
  relation_to_static_leafs = []
  relation_to_static_paths = []
  relation_to_taboo_contracts = []
  relation_to_trust_control_policy = []
  tags = []
}
`
