// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceTagTagWithFvAEPg(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigTagTagMinDependencyWithFvAEPg,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigTagTagAllDependencyWithFvAEPg,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "value"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigTagTagMinDependencyWithFvAEPg,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigTagTagResetDependencyWithFvAEPg,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_tag.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
		},
	})
}
func TestAccResourceTagTagWithFvEpIpTag(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigTagTagMinDependencyWithFvEpIpTag,
				ExpectNonEmptyPlan: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigTagTagAllDependencyWithFvEpIpTag,
				ExpectNonEmptyPlan: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "value"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigTagTagMinDependencyWithFvEpIpTag,
				ExpectNonEmptyPlan: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigTagTagResetDependencyWithFvEpIpTag,
				ExpectNonEmptyPlan: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_tag.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_tag.test", "key", "test_key"),
					resource.TestCheckResourceAttr("aci_tag.test", "value", "test_value"),
				),
			},
		},
	})
}

const testConfigTagTagMinDependencyWithFvAEPg = testConfigFvAEPgMin + `
resource "aci_tag" "test" {
  parent_dn = aci_application_epg.test.id
  key = "test_key"
  value = "test_value"
}
`

const testConfigTagTagAllDependencyWithFvAEPg = testConfigFvAEPgMin + `
resource "aci_tag" "test" {
  parent_dn = aci_application_epg.test.id
  key = "test_key"
  value = "value"
}
`

const testConfigTagTagResetDependencyWithFvAEPg = testConfigFvAEPgMin + `
resource "aci_tag" "test" {
  parent_dn = aci_application_epg.test.id
  key = "test_key"
  value = "test_value"
}
`

const testConfigTagTagMinDependencyWithFvEpIpTag = testConfigFvEpIpTagMinDependencyWithFvTenant + `
resource "aci_tag" "test" {
  parent_dn = aci_endpoint_tag_ip.test.id
  key = "test_key"
  value = "test_value"
}
`

const testConfigTagTagAllDependencyWithFvEpIpTag = testConfigFvEpIpTagMinDependencyWithFvTenant + `
resource "aci_tag" "test" {
  parent_dn = aci_endpoint_tag_ip.test.id
  key = "test_key"
  value = "value"
}
`

const testConfigTagTagResetDependencyWithFvEpIpTag = testConfigFvEpIpTagMinDependencyWithFvTenant + `
resource "aci_tag" "test" {
  parent_dn = aci_endpoint_tag_ip.test.id
  key = "test_key"
  value = "test_value"
}
`
