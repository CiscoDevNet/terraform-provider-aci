// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceFhsTrustCtrlPolWithFvTenant(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFhsTrustCtrlPolMinDependencyWithFvTenantAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "trust_ra", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "trust_ra", "no"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigFhsTrustCtrlPolMinDependencyWithFvTenantAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFhsTrustCtrlPolMinDependencyWithFvTenantAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test", "trust_ra", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.allow_test_2", "trust_ra", "no"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigFhsTrustCtrlPolMinDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_ra", "no"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigFhsTrustCtrlPolAllDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "description", "description_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_key", "owner_key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_tag", "owner_tag_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_ra", "no"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigFhsTrustCtrlPolMinDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name", "test_name"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigFhsTrustCtrlPolResetDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_ra", "no"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_trust_control_policy.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigFhsTrustCtrlPolChildrenDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "description", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv4_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_dhcpv6_server", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "has_ipv6_router", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_arp", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_nd", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "trust_ra", "no"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.1.value", "test_value"),
				),
			},
			// Refresh State before import testing to ensure that the state is up to date
			{
				RefreshState:       true,
				ExpectNonEmptyPlan: false,
			},
			// Import testing with children
			{
				ResourceName:      "aci_trust_control_policy.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigFhsTrustCtrlPolChildrenRemoveFromConfigDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigFhsTrustCtrlPolChildrenRemoveOneDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigFhsTrustCtrlPolChildrenRemoveAllDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_trust_control_policy.test", "tags.#", "0"),
				),
			},
		},
	})
}

const testConfigFhsTrustCtrlPolMinDependencyWithFvTenantAllowExisting = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "allow_test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
resource "aci_trust_control_policy" "allow_test_2" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  depends_on = [aci_trust_control_policy.allow_test]
}
`

const testConfigFhsTrustCtrlPolMinDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
`

const testConfigFhsTrustCtrlPolAllDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotation = "annotation"
  description = "description_1"
  has_dhcpv4_server = "no"
  has_dhcpv6_server = "no"
  has_ipv6_router = "no"
  name_alias = "name_alias_1"
  owner_key = "owner_key_1"
  owner_tag = "owner_tag_1"
  trust_arp = "no"
  trust_nd = "no"
  trust_ra = "no"
}
`

const testConfigFhsTrustCtrlPolResetDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotation = "orchestrator:terraform"
  description = ""
  has_dhcpv4_server = "no"
  has_dhcpv6_server = "no"
  has_ipv6_router = "no"
  name_alias = ""
  owner_key = ""
  owner_tag = ""
  trust_arp = "no"
  trust_nd = "no"
  trust_ra = "no"
}
`
const testConfigFhsTrustCtrlPolChildrenDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigFhsTrustCtrlPolChildrenRemoveFromConfigDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
`

const testConfigFhsTrustCtrlPolChildrenRemoveOneDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigFhsTrustCtrlPolChildrenRemoveAllDependencyWithFvTenant = testConfigFvTenantMin + `
resource "aci_trust_control_policy" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = []
  tags = []
}
`
