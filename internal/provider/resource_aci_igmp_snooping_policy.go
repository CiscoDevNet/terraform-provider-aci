// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/ciscoecosystem/aci-go-client/v2/client"
	"github.com/ciscoecosystem/aci-go-client/v2/container"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &IgmpSnoopPolResource{}
var _ resource.ResourceWithImportState = &IgmpSnoopPolResource{}

func NewIgmpSnoopPolResource() resource.Resource {
	return &IgmpSnoopPolResource{}
}

// IgmpSnoopPolResource defines the resource implementation.
type IgmpSnoopPolResource struct {
	client *client.Client
}

// IgmpSnoopPolResourceModel describes the resource data model.
type IgmpSnoopPolResourceModel struct {
	Id              types.String `tfsdk:"id"`
	ParentDn        types.String `tfsdk:"parent_dn"`
	AdminSt         types.String `tfsdk:"admin_state"`
	Annotation      types.String `tfsdk:"annotation"`
	Ctrl            types.Set    `tfsdk:"control"`
	Descr           types.String `tfsdk:"description"`
	LastMbrIntvl    types.String `tfsdk:"last_member_interval"`
	Name            types.String `tfsdk:"name"`
	NameAlias       types.String `tfsdk:"name_alias"`
	OwnerKey        types.String `tfsdk:"owner_key"`
	OwnerTag        types.String `tfsdk:"owner_tag"`
	QueryIntvl      types.String `tfsdk:"query_interval"`
	RspIntvl        types.String `tfsdk:"response_interval"`
	StartQueryCnt   types.String `tfsdk:"start_query_count"`
	StartQueryIntvl types.String `tfsdk:"start_query_interval"`
	Ver             types.String `tfsdk:"querier_version"`
	TagAnnotation   types.Set    `tfsdk:"annotations"`
	TagTag          types.Set    `tfsdk:"tags"`
}

func getEmptyIgmpSnoopPolResourceModel() *IgmpSnoopPolResourceModel {
	return &IgmpSnoopPolResourceModel{
		Id:              basetypes.NewStringNull(),
		ParentDn:        basetypes.NewStringNull(),
		AdminSt:         basetypes.NewStringNull(),
		Annotation:      basetypes.NewStringNull(),
		Ctrl:            types.SetNull(types.StringType),
		Descr:           basetypes.NewStringNull(),
		LastMbrIntvl:    basetypes.NewStringNull(),
		Name:            basetypes.NewStringNull(),
		NameAlias:       basetypes.NewStringNull(),
		OwnerKey:        basetypes.NewStringNull(),
		OwnerTag:        basetypes.NewStringNull(),
		QueryIntvl:      basetypes.NewStringNull(),
		RspIntvl:        basetypes.NewStringNull(),
		StartQueryCnt:   basetypes.NewStringNull(),
		StartQueryIntvl: basetypes.NewStringNull(),
		Ver:             basetypes.NewStringNull(),
		TagAnnotation: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		TagTag: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
	}
}

// TagAnnotationIgmpSnoopPolResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationIgmpSnoopPolResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagAnnotationIgmpSnoopPolResourceModel() TagAnnotationIgmpSnoopPolResourceModel {
	return TagAnnotationIgmpSnoopPolResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagAnnotationIgmpSnoopPolType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// TagTagIgmpSnoopPolResourceModel describes the resource data model for the children without relation ships.
type TagTagIgmpSnoopPolResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagTagIgmpSnoopPolResourceModel() TagTagIgmpSnoopPolResourceModel {
	return TagTagIgmpSnoopPolResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagTagIgmpSnoopPolType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

type IgmpSnoopPolIdentifier struct {
	Name types.String
}

func (r *IgmpSnoopPolResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	if !req.Plan.Raw.IsNull() {
		var planData, stateData *IgmpSnoopPolResourceModel
		resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)
		resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

		if resp.Diagnostics.HasError() {
			return
		}

		if (planData.Id.IsUnknown() || planData.Id.IsNull()) && !planData.ParentDn.IsUnknown() && !planData.Name.IsUnknown() {
			setIgmpSnoopPolId(ctx, planData)
		}

		if stateData == nil && !globalAllowExistingOnCreate && !planData.Id.IsUnknown() && !planData.Id.IsNull() {
			CheckDn(ctx, &resp.Diagnostics, r.client, "igmpSnoopPol", planData.Id.ValueString())
			if resp.Diagnostics.HasError() {
				return
			}
		}

		resp.Diagnostics.Append(resp.Plan.Set(ctx, &planData)...)
	}
}

func (r *IgmpSnoopPolResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	tflog.Debug(ctx, "Start metadata of resource: aci_igmp_snooping_policy")
	resp.TypeName = req.ProviderTypeName + "_igmp_snooping_policy"
	tflog.Debug(ctx, "End metadata of resource: aci_igmp_snooping_policy")
}

func (r *IgmpSnoopPolResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	tflog.Debug(ctx, "Start schema of resource: aci_igmp_snooping_policy")
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The igmp_snooping_policy resource for the 'igmpSnoopPol' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the IGMP Snooping Policy object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"parent_dn": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The distinguished name (DN) of the parent object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"admin_state": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("disabled", "enabled"),
				},
				MarkdownDescription: `The administrative state of the IGMP Snooping Policy object.`,
			},
			"annotation": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Default:             stringdefault.StaticString(globalAnnotation),
				MarkdownDescription: `The annotation of the IGMP Snooping Policy object.`,
			},
			"control": schema.SetAttribute{
				MarkdownDescription: `The controls for the IGMP Snooping Policy object.`,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
					SetToSetNullWhenStateIsNullPlanIsUnknownDuringUpdate(nil),
				},
				Validators: []validator.Set{
					setvalidator.SizeAtMost(4),
					setvalidator.ValueStringsAre(
						stringvalidator.OneOf("fast-leave", "opt-flood", "querier", "routing"),
					),
				},
				ElementType: types.StringType,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The description of the IGMP Snooping Policy object.`,
			},
			"last_member_interval": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The last member interval (seconds) of the IGMP Snooping Policy object. The group state is removed when no host responds before the timeout.`,
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
					stringplanmodifier.RequiresReplace(),
				},
				MarkdownDescription: `The name of the IGMP Snooping Policy object.`,
			},
			"name_alias": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The name alias of the IGMP Snooping Policy object.`,
			},
			"owner_key": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The key for enabling clients to own their data for entity correlation.`,
			},
			"owner_tag": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `A tag for enabling clients to add their own data. For example, to indicate who created this object.`,
			},
			"query_interval": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The query interval (seconds) of the IGMP Snooping Policy object.`,
			},
			"response_interval": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The response interval (seconds) of the IGMP Snooping Policy object.`,
			},
			"start_query_count": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The start query count of the IGMP Snooping Policy object.`,
			},
			"start_query_interval": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The query interval (seconds) of the IGMP Snooping Policy object at start-up.`,
			},
			"querier_version": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("unspecified", "v1", "v2", "v3"),
				},
				MarkdownDescription: `The version of the IGMP querier.`,
			},
			"annotations": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
			"tags": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
		},
	}
	tflog.Debug(ctx, "End schema of resource: aci_igmp_snooping_policy")
}

func (r *IgmpSnoopPolResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	tflog.Debug(ctx, "Start configure of resource: aci_igmp_snooping_policy")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	tflog.Debug(ctx, "End configure of resource: aci_igmp_snooping_policy")
}

func (r *IgmpSnoopPolResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Debug(ctx, "Start create of resource: aci_igmp_snooping_policy")
	// On create retrieve information on current state prior to making any changes in order to determine child delete operations
	var stateData *IgmpSnoopPolResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &stateData)...)
	if stateData.Id.IsUnknown() || stateData.Id.IsNull() {
		setIgmpSnoopPolId(ctx, stateData)
	}
	getAndSetIgmpSnoopPolAttributes(ctx, &resp.Diagnostics, r.client, stateData)
	if !globalAllowExistingOnCreate && !stateData.Id.IsNull() {
		resp.Diagnostics.AddError(
			"Object Already Exists",
			fmt.Sprintf("The igmpSnoopPol object with DN '%s' already exists.", stateData.Id.ValueString()),
		)
		return
	}

	var data *IgmpSnoopPolResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsUnknown() || data.Id.IsNull() {
		setIgmpSnoopPolId(ctx, data)
	}

	tflog.Debug(ctx, fmt.Sprintf("Create of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))

	var tagAnnotationPlan, tagAnnotationState []TagAnnotationIgmpSnoopPolResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagIgmpSnoopPolResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getIgmpSnoopPolCreateJsonPayload(ctx, &resp.Diagnostics, true, data, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetIgmpSnoopPolAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End create of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))
}

func (r *IgmpSnoopPolResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Debug(ctx, "Start read of resource: aci_igmp_snooping_policy")
	var data *IgmpSnoopPolResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Read of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))

	getAndSetIgmpSnoopPolAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	if data.Id.IsNull() {
		var emptyData *IgmpSnoopPolResourceModel
		resp.Diagnostics.Append(resp.State.Set(ctx, &emptyData)...)
	} else {
		resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	}

	tflog.Debug(ctx, fmt.Sprintf("End read of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))
}

func (r *IgmpSnoopPolResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Debug(ctx, "Start update of resource: aci_igmp_snooping_policy")
	var data *IgmpSnoopPolResourceModel
	var stateData *IgmpSnoopPolResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))

	var tagAnnotationPlan, tagAnnotationState []TagAnnotationIgmpSnoopPolResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagIgmpSnoopPolResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getIgmpSnoopPolCreateJsonPayload(ctx, &resp.Diagnostics, false, data, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetIgmpSnoopPolAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End update of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))
}

func (r *IgmpSnoopPolResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Debug(ctx, "Start delete of resource: aci_igmp_snooping_policy")
	var data *IgmpSnoopPolResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Delete of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))
	jsonPayload := GetDeleteJsonPayload(ctx, &resp.Diagnostics, "igmpSnoopPol", data.Id.ValueString())
	if resp.Diagnostics.HasError() {
		return
	}
	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("End delete of resource aci_igmp_snooping_policy with id '%s'", data.Id.ValueString()))
}

func (r *IgmpSnoopPolResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Start import state of resource: aci_igmp_snooping_policy")
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)

	var stateData *IgmpSnoopPolResourceModel
	resp.Diagnostics.Append(resp.State.Get(ctx, &stateData)...)
	tflog.Debug(ctx, fmt.Sprintf("Import state of resource aci_igmp_snooping_policy with id '%s'", stateData.Id.ValueString()))

	tflog.Debug(ctx, "End import of state resource: aci_igmp_snooping_policy")
}

func getAndSetIgmpSnoopPolAttributes(ctx context.Context, diags *diag.Diagnostics, client *client.Client, data *IgmpSnoopPolResourceModel) {
	requestData := DoRestRequest(ctx, diags, client, fmt.Sprintf("api/mo/%s.json?rsp-subtree=full&rsp-subtree-class=%s", data.Id.ValueString(), "igmpSnoopPol,tagAnnotation,tagTag"), "GET", nil)

	readData := getEmptyIgmpSnoopPolResourceModel()

	if diags.HasError() {
		return
	}
	if requestData.Search("imdata").Search("igmpSnoopPol").Data() != nil {
		classReadInfo := requestData.Search("imdata").Search("igmpSnoopPol").Data().([]interface{})
		if len(classReadInfo) == 1 {
			attributes := classReadInfo[0].(map[string]interface{})["attributes"].(map[string]interface{})
			for attributeName, attributeValue := range attributes {
				if attributeName == "dn" {
					readData.Id = basetypes.NewStringValue(attributeValue.(string))
					setIgmpSnoopPolParentDn(ctx, attributeValue.(string), readData)
				}
				if attributeName == "adminSt" {
					readData.AdminSt = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "annotation" {
					readData.Annotation = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ctrl" {
					ctrlList := make([]string, 0)
					if attributeValue.(string) != "" {
						ctrlList = strings.Split(attributeValue.(string), ",")
					}
					ctrlSet, _ := types.SetValueFrom(ctx, readData.Ctrl.ElementType(ctx), ctrlList)
					readData.Ctrl = ctrlSet
				}
				if attributeName == "descr" {
					readData.Descr = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "lastMbrIntvl" {
					readData.LastMbrIntvl = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "name" {
					readData.Name = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "nameAlias" {
					readData.NameAlias = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ownerKey" {
					readData.OwnerKey = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ownerTag" {
					readData.OwnerTag = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "queryIntvl" {
					readData.QueryIntvl = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "rspIntvl" {
					readData.RspIntvl = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "startQueryCnt" {
					readData.StartQueryCnt = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "startQueryIntvl" {
					readData.StartQueryIntvl = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ver" {
					readData.Ver = basetypes.NewStringValue(attributeValue.(string))
				}
			}
			TagAnnotationIgmpSnoopPolList := make([]TagAnnotationIgmpSnoopPolResourceModel, 0)
			TagTagIgmpSnoopPolList := make([]TagTagIgmpSnoopPolResourceModel, 0)
			_, ok := classReadInfo[0].(map[string]interface{})["children"]
			if ok {
				children := classReadInfo[0].(map[string]interface{})["children"].([]interface{})
				for _, child := range children {
					for childClassName, childClassDetails := range child.(map[string]interface{}) {
						childAttributes := childClassDetails.(map[string]interface{})["attributes"].(map[string]interface{})
						if childClassName == "tagAnnotation" {
							TagAnnotationIgmpSnoopPol := getEmptyTagAnnotationIgmpSnoopPolResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagAnnotationIgmpSnoopPol.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagAnnotationIgmpSnoopPol.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagAnnotationIgmpSnoopPolList = append(TagAnnotationIgmpSnoopPolList, TagAnnotationIgmpSnoopPol)
						}
						if childClassName == "tagTag" {
							TagTagIgmpSnoopPol := getEmptyTagTagIgmpSnoopPolResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagTagIgmpSnoopPol.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagTagIgmpSnoopPol.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagTagIgmpSnoopPolList = append(TagTagIgmpSnoopPolList, TagTagIgmpSnoopPol)
						}
					}
				}
			}
			tagAnnotationSet, _ := types.SetValueFrom(ctx, readData.TagAnnotation.ElementType(ctx), TagAnnotationIgmpSnoopPolList)
			readData.TagAnnotation = tagAnnotationSet
			tagTagSet, _ := types.SetValueFrom(ctx, readData.TagTag.ElementType(ctx), TagTagIgmpSnoopPolList)
			readData.TagTag = tagTagSet
		} else {
			diags.AddError(
				"too many results in response",
				fmt.Sprintf("%v matches returned for class 'igmpSnoopPol'. Please report this issue to the provider developers.", len(classReadInfo)),
			)
		}
	} else {
		readData.Id = basetypes.NewStringNull()
	}
	*data = *readData
}

func getIgmpSnoopPolRn(ctx context.Context, data *IgmpSnoopPolResourceModel) string {
	return fmt.Sprintf("snPol-%s", data.Name.ValueString())
}

func setIgmpSnoopPolParentDn(ctx context.Context, dn string, data *IgmpSnoopPolResourceModel) {
	bracketIndex := 0
	rnIndex := 0
	for i := len(dn) - 1; i >= 0; i-- {
		if string(dn[i]) == "]" {
			bracketIndex = bracketIndex + 1
		} else if string(dn[i]) == "[" {
			bracketIndex = bracketIndex - 1
		} else if string(dn[i]) == "/" && bracketIndex == 0 {
			rnIndex = i
			break
		}
	}
	data.ParentDn = basetypes.NewStringValue(dn[:rnIndex])
}

func setIgmpSnoopPolId(ctx context.Context, data *IgmpSnoopPolResourceModel) {
	rn := getIgmpSnoopPolRn(ctx, data)
	data.Id = types.StringValue(fmt.Sprintf("%s/%s", data.ParentDn.ValueString(), rn))
}

func getIgmpSnoopPolTagAnnotationChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *IgmpSnoopPolResourceModel, tagAnnotationIgmpSnoopPolPlan, tagAnnotationIgmpSnoopPolState []TagAnnotationIgmpSnoopPolResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.TagAnnotation.IsNull() && !data.TagAnnotation.IsUnknown() {
		tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
		for _, tagAnnotationIgmpSnoopPol := range tagAnnotationIgmpSnoopPolPlan {
			childMap := NewAciObject()
			if !tagAnnotationIgmpSnoopPol.Key.IsNull() && !tagAnnotationIgmpSnoopPol.Key.IsUnknown() {
				childMap.Attributes["key"] = tagAnnotationIgmpSnoopPol.Key.ValueString()
			}
			if !tagAnnotationIgmpSnoopPol.Value.IsNull() && !tagAnnotationIgmpSnoopPol.Value.IsUnknown() {
				childMap.Attributes["value"] = tagAnnotationIgmpSnoopPol.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": childMap})
			tagAnnotationIdentifier := TagAnnotationIdentifier{}
			tagAnnotationIdentifier.Key = tagAnnotationIgmpSnoopPol.Key
			tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
		}
		for _, tagAnnotation := range tagAnnotationIgmpSnoopPolState {
			delete := true
			for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
				if tagAnnotationIdentifier.Key == tagAnnotation.Key {
					delete = false
					break
				}
			}
			if delete {
				tagAnnotationChildMapForDelete := NewAciObject()
				tagAnnotationChildMapForDelete.Attributes["status"] = "deleted"
				tagAnnotationChildMapForDelete.Attributes["key"] = tagAnnotation.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": tagAnnotationChildMapForDelete})
			}
		}
	} else {
		data.TagAnnotation = types.SetNull(data.TagAnnotation.ElementType(ctx))
	}

	return childPayloads
}

func getIgmpSnoopPolTagTagChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *IgmpSnoopPolResourceModel, tagTagIgmpSnoopPolPlan, tagTagIgmpSnoopPolState []TagTagIgmpSnoopPolResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.TagTag.IsNull() && !data.TagTag.IsUnknown() {
		tagTagIdentifiers := []TagTagIdentifier{}
		for _, tagTagIgmpSnoopPol := range tagTagIgmpSnoopPolPlan {
			childMap := NewAciObject()
			if !tagTagIgmpSnoopPol.Key.IsNull() && !tagTagIgmpSnoopPol.Key.IsUnknown() {
				childMap.Attributes["key"] = tagTagIgmpSnoopPol.Key.ValueString()
			}
			if !tagTagIgmpSnoopPol.Value.IsNull() && !tagTagIgmpSnoopPol.Value.IsUnknown() {
				childMap.Attributes["value"] = tagTagIgmpSnoopPol.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagTag": childMap})
			tagTagIdentifier := TagTagIdentifier{}
			tagTagIdentifier.Key = tagTagIgmpSnoopPol.Key
			tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
		}
		for _, tagTag := range tagTagIgmpSnoopPolState {
			delete := true
			for _, tagTagIdentifier := range tagTagIdentifiers {
				if tagTagIdentifier.Key == tagTag.Key {
					delete = false
					break
				}
			}
			if delete {
				tagTagChildMapForDelete := NewAciObject()
				tagTagChildMapForDelete.Attributes["status"] = "deleted"
				tagTagChildMapForDelete.Attributes["key"] = tagTag.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagTag": tagTagChildMapForDelete})
			}
		}
	} else {
		data.TagTag = types.SetNull(data.TagTag.ElementType(ctx))
	}

	return childPayloads
}

func getIgmpSnoopPolCreateJsonPayload(ctx context.Context, diags *diag.Diagnostics, createType bool, data *IgmpSnoopPolResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationIgmpSnoopPolResourceModel, tagTagPlan, tagTagState []TagTagIgmpSnoopPolResourceModel) *container.Container {
	payloadMap := map[string]interface{}{}
	payloadMap["attributes"] = map[string]string{}

	if createType && !globalAllowExistingOnCreate {
		payloadMap["attributes"].(map[string]string)["status"] = "created"
	}
	childPayloads := []map[string]interface{}{}

	TagAnnotationchildPayloads := getIgmpSnoopPolTagAnnotationChildPayloads(ctx, diags, data, tagAnnotationPlan, tagAnnotationState)
	if TagAnnotationchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagAnnotationchildPayloads...)

	TagTagchildPayloads := getIgmpSnoopPolTagTagChildPayloads(ctx, diags, data, tagTagPlan, tagTagState)
	if TagTagchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagTagchildPayloads...)

	payloadMap["children"] = childPayloads
	if !data.AdminSt.IsNull() && !data.AdminSt.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["adminSt"] = data.AdminSt.ValueString()
	}
	if !data.Annotation.IsNull() && !data.Annotation.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["annotation"] = data.Annotation.ValueString()
	}
	if !data.Ctrl.IsNull() && !data.Ctrl.IsUnknown() {
		var tmpCtrl []string
		data.Ctrl.ElementsAs(ctx, &tmpCtrl, false)
		payloadMap["attributes"].(map[string]string)["ctrl"] = strings.Join(tmpCtrl, ",")
	}
	if !data.Descr.IsNull() && !data.Descr.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["descr"] = data.Descr.ValueString()
	}
	if !data.LastMbrIntvl.IsNull() && !data.LastMbrIntvl.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["lastMbrIntvl"] = data.LastMbrIntvl.ValueString()
	}
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["name"] = data.Name.ValueString()
	}
	if !data.NameAlias.IsNull() && !data.NameAlias.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["nameAlias"] = data.NameAlias.ValueString()
	}
	if !data.OwnerKey.IsNull() && !data.OwnerKey.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ownerKey"] = data.OwnerKey.ValueString()
	}
	if !data.OwnerTag.IsNull() && !data.OwnerTag.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ownerTag"] = data.OwnerTag.ValueString()
	}
	if !data.QueryIntvl.IsNull() && !data.QueryIntvl.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["queryIntvl"] = data.QueryIntvl.ValueString()
	}
	if !data.RspIntvl.IsNull() && !data.RspIntvl.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["rspIntvl"] = data.RspIntvl.ValueString()
	}
	if !data.StartQueryCnt.IsNull() && !data.StartQueryCnt.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["startQueryCnt"] = data.StartQueryCnt.ValueString()
	}
	if !data.StartQueryIntvl.IsNull() && !data.StartQueryIntvl.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["startQueryIntvl"] = data.StartQueryIntvl.ValueString()
	}
	if !data.Ver.IsNull() && !data.Ver.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ver"] = data.Ver.ValueString()
	}
	payload, err := json.Marshal(map[string]interface{}{"igmpSnoopPol": payloadMap})
	if err != nil {
		diags.AddError(
			"Marshalling of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}

	jsonPayload, err := container.ParseJSON(payload)

	if err != nil {
		diags.AddError(
			"Construction of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}
	return jsonPayload
}
