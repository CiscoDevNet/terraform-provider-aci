// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceVmmUplinkPContWithVmmDomP(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.2(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigVmmUplinkPContMinDependencyWithVmmDomPAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test", "number_of_uplinks", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test_2", "number_of_uplinks", "2"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.2(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigVmmUplinkPContMinDependencyWithVmmDomPAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.2(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigVmmUplinkPContMinDependencyWithVmmDomPAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test", "number_of_uplinks", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.allow_test_2", "number_of_uplinks", "2"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "4.2(1i)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigVmmUplinkPContMinDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "number_of_uplinks", "2"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigVmmUplinkPContAllDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "number_of_uplinks", "1"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigVmmUplinkPContMinDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "number_of_uplinks", "2"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigVmmUplinkPContResetDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "number_of_uplinks", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "name_alias", ""),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_vmm_uplink_container.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigVmmUplinkPContChildrenDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "number_of_uplinks", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.uplink_id", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.uplink_name", "uplink_name_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.name_alias", "name_alias_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.uplink_id", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.uplink_name", "uplink_name_1"),
				),
			},
			// Refresh State before import testing to ensure that the state is up to date
			{
				RefreshState:       true,
				ExpectNonEmptyPlan: false,
			},
			// Import testing with children
			{
				ResourceName:      "aci_vmm_uplink_container.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigVmmUplinkPContChildrenRemoveFromConfigDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.#", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotation", "annotation_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.#", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.name_alias", "name_alias_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.uplink_id", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.uplink_name", "uplink_name_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.#", "2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.name_alias", "name_alias_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.uplink_id", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.1.uplink_name", "uplink_name_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigVmmUplinkPContChildrenRemoveOneDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.#", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotation", "annotation_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.tags.#", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.name_alias", "name_alias_2"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.uplink_id", "1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.0.uplink_name", "uplink_name_1"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigVmmUplinkPContChildrenRemoveAllDependencyWithVmmDomP,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "tags.#", "0"),
					resource.TestCheckResourceAttr("aci_vmm_uplink_container.test", "uplink_policies.#", "0"),
				),
			},
		},
		CheckDestroy: testCheckResourceDestroy,
	})
}

const testConfigVmmUplinkPContMinDependencyWithVmmDomPAllowExisting = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "allow_test" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
}
resource "aci_vmm_uplink_container" "allow_test_2" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
  depends_on = [aci_vmm_uplink_container.allow_test]
}
`

const testConfigVmmUplinkPContMinDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
}
`

const testConfigVmmUplinkPContAllDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  annotation = "annotation"
  name_alias = "name_alias_1"
  number_of_uplinks = "1"
}
`

const testConfigVmmUplinkPContResetDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  annotation = "orchestrator:terraform"
  name_alias = ""
  number_of_uplinks = "2"
}
`
const testConfigVmmUplinkPContChildrenDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
  annotations = [
    {
      key = "key_0"
      value = "value_1"
    },
    {
      key = "key_1"
      value = "test_value"
    },
  ]
  tags = [
    {
      key = "key_0"
      value = "value_1"
    },
    {
      key = "key_1"
      value = "test_value"
    },
  ]
  uplink_policies = [
    {
      annotation = "annotation_1"
      annotations = [
	    {
          key = "key_0"
          value = "value_1"
	    },
	    {
          key = "key_1"
          value = "test_value"
	    },
      ]
      tags = [
	    {
          key = "key_0"
          value = "value_1"
	    },
	    {
          key = "key_1"
          value = "test_value"
	    },
      ]
      name_alias = "name_alias_1"
      uplink_id = "2"
      uplink_name = "uplink_name_2"
    },
    {
      annotation = "annotation_2"
      annotations = [
	    {
          key = "key_0"
          value = "value_1"
	    },
	    {
          key = "key_1"
          value = "test_value"
	    },
      ]
      tags = [
	    {
          key = "key_0"
          value = "value_1"
	    },
	    {
          key = "key_1"
          value = "test_value"
	    },
      ]
      name_alias = "name_alias_2"
      uplink_id = "1"
      uplink_name = "uplink_name_1"
    },
  ]
}
`

const testConfigVmmUplinkPContChildrenRemoveFromConfigDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
}
`

const testConfigVmmUplinkPContChildrenRemoveOneDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  uplink_policies = [ 
	{
	  annotation = "annotation_2"
      annotations = [ 
	    {
          key = "key_1"
          value = "test_value"
	    },
      ]
      tags = [ 
	    {
          key = "key_1"
          value = "test_value"
	    },
      ]
	  name_alias = "name_alias_2"
	  uplink_id = "1"
	  uplink_name = "uplink_name_1"
	},
  ]
}
`

const testConfigVmmUplinkPContChildrenRemoveAllDependencyWithVmmDomP = testConfigVmmDomPMin + `
resource "aci_vmm_uplink_container" "test" {
  parent_dn = aci_vmm_domain.test.id
  number_of_uplinks = "2"
  annotations = []
  tags = []
  uplink_policies = []
}
`
