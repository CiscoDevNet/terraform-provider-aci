// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourceL3extRsLblToProfileWithL3extConsLbl(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "5.0(1k)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigL3extRsLblToProfileMinDependencyWithL3extConsLblAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test_2", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test", "direction", "import"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test_2", "direction", "import"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "5.0(1k)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:      testConfigL3extRsLblToProfileMinDependencyWithL3extConsLblAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "5.0(1k)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigL3extRsLblToProfileMinDependencyWithL3extConsLblAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test_2", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test", "direction", "import"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test_2", "direction", "import"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "5.0(1k)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigL3extRsLblToProfileMinDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "direction", "import"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigL3extRsLblToProfileAllDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "direction", "export"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigL3extRsLblToProfileMinDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "direction", "import"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigL3extRsLblToProfileResetDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "direction", "import"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotation", "orchestrator:terraform"),
				),
			},
			// Import testing
			{
				ResourceName:      "aci_relation_from_l3out_consumer_label_to_route_control_profile.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children
			{
				Config:             testConfigL3extRsLblToProfileChildrenDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "direction", "import"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "target_dn", "uni/tn-test_tenant/prof-rt_ctrl_profile_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.1.value", "test_value"),
				),
			},
			// Refresh State before import testing to ensure that the state is up to date
			{
				RefreshState:       true,
				ExpectNonEmptyPlan: false,
			},
			// Import testing with children
			{
				ResourceName:      "aci_relation_from_l3out_consumer_label_to_route_control_profile.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config:             testConfigL3extRsLblToProfileChildrenRemoveFromConfigDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.1.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigL3extRsLblToProfileChildrenRemoveOneDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.0.value", "test_value"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigL3extRsLblToProfileChildrenRemoveAllDependencyWithL3extConsLbl,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_relation_from_l3out_consumer_label_to_route_control_profile.test", "tags.#", "0"),
				),
			},
		},
		CheckDestroy: testCheckResourceDestroy,
	})
}

const testDependencyConfigL3extRsLblToProfile = `
`

const testConfigL3extRsLblToProfileMinDependencyWithL3extConsLblAllowExisting = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "allow_test" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
}
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "allow_test_2" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
  depends_on = [aci_relation_from_l3out_consumer_label_to_route_control_profile.allow_test]
}
`

const testConfigL3extRsLblToProfileMinDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
}
`

const testConfigL3extRsLblToProfileAllDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
  annotation = "annotation"
  direction = "export"
}
`

const testConfigL3extRsLblToProfileResetDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
  annotation = "orchestrator:terraform"
  direction = "import"
}
`
const testConfigL3extRsLblToProfileChildrenDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigL3extRsLblToProfileChildrenRemoveFromConfigDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
}
`

const testConfigL3extRsLblToProfileChildrenRemoveOneDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
  annotations = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "test_value"
	},
  ]
}
`

const testConfigL3extRsLblToProfileChildrenRemoveAllDependencyWithL3extConsLbl = testDependencyConfigL3extRsLblToProfile + testConfigL3extConsLblMinDependencyWithL3extOut + `
resource "aci_relation_from_l3out_consumer_label_to_route_control_profile" "test" {
  parent_dn = aci_l3out_consumer_label.test.id
  direction = "import"
  target_dn = "uni/tn-test_tenant/prof-rt_ctrl_profile_1"
  annotations = []
  tags = []
}
`
