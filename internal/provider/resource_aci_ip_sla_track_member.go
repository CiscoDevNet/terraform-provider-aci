// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/v2/client"
	"github.com/ciscoecosystem/aci-go-client/v2/container"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FvTrackMemberResource{}
var _ resource.ResourceWithImportState = &FvTrackMemberResource{}

func NewFvTrackMemberResource() resource.Resource {
	return &FvTrackMemberResource{}
}

// FvTrackMemberResource defines the resource implementation.
type FvTrackMemberResource struct {
	client *client.Client
}

// FvTrackMemberResourceModel describes the resource data model.
type FvTrackMemberResourceModel struct {
	Id              types.String `tfsdk:"id"`
	ParentDn        types.String `tfsdk:"parent_dn"`
	Annotation      types.String `tfsdk:"annotation"`
	Descr           types.String `tfsdk:"description"`
	DstIpAddr       types.String `tfsdk:"destination_ip_address"`
	Name            types.String `tfsdk:"name"`
	NameAlias       types.String `tfsdk:"name_alias"`
	OwnerKey        types.String `tfsdk:"owner_key"`
	OwnerTag        types.String `tfsdk:"owner_tag"`
	ScopeDn         types.String `tfsdk:"scope"`
	FvRsIpslaMonPol types.Object `tfsdk:"relation_to_monitoring_policy"`
	TagAnnotation   types.Set    `tfsdk:"annotations"`
	TagTag          types.Set    `tfsdk:"tags"`
}

func getEmptyFvTrackMemberResourceModel() *FvTrackMemberResourceModel {
	return &FvTrackMemberResourceModel{
		Id:         basetypes.NewStringNull(),
		ParentDn:   basetypes.NewStringNull(),
		Annotation: basetypes.NewStringNull(),
		Descr:      basetypes.NewStringNull(),
		DstIpAddr:  basetypes.NewStringNull(),
		Name:       basetypes.NewStringNull(),
		NameAlias:  basetypes.NewStringNull(),
		OwnerKey:   basetypes.NewStringNull(),
		OwnerTag:   basetypes.NewStringNull(),
		ScopeDn:    basetypes.NewStringNull(),
		FvRsIpslaMonPol: types.ObjectNull(map[string]attr.Type{
			"annotation":  types.StringType,
			"target_dn":   types.StringType,
			"annotations": types.SetType{ElemType: TagAnnotationFvRsIpslaMonPolFvTrackMemberType},
			"tags":        types.SetType{ElemType: TagTagFvRsIpslaMonPolFvTrackMemberType},
		}),
		TagAnnotation: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		TagTag: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
	}
}

// FvRsIpslaMonPolFvTrackMemberResourceModel describes the resource data model for the children without relation ships.
type FvRsIpslaMonPolFvTrackMemberResourceModel struct {
	Annotation    types.String `tfsdk:"annotation"`
	TDn           types.String `tfsdk:"target_dn"`
	TagAnnotation types.Set    `tfsdk:"annotations"`
	TagTag        types.Set    `tfsdk:"tags"`
}

func getEmptyFvRsIpslaMonPolFvTrackMemberResourceModel() FvRsIpslaMonPolFvTrackMemberResourceModel {
	return FvRsIpslaMonPolFvTrackMemberResourceModel{
		Annotation: basetypes.NewStringNull(),
		TDn:        basetypes.NewStringNull(),
		TagAnnotation: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		TagTag: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
	}
}

var FvRsIpslaMonPolFvTrackMemberType = map[string]attr.Type{
	"annotation":  types.StringType,
	"target_dn":   types.StringType,
	"annotations": types.SetType{ElemType: TagAnnotationFvRsIpslaMonPolFvTrackMemberType},
	"tags":        types.SetType{ElemType: TagTagFvRsIpslaMonPolFvTrackMemberType},
}

// TagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel() TagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel {
	return TagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagAnnotationFvRsIpslaMonPolFvTrackMemberType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// TagTagFvRsIpslaMonPolFvTrackMemberResourceModel describes the resource data model for the children without relation ships.
type TagTagFvRsIpslaMonPolFvTrackMemberResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagTagFvRsIpslaMonPolFvTrackMemberResourceModel() TagTagFvRsIpslaMonPolFvTrackMemberResourceModel {
	return TagTagFvRsIpslaMonPolFvTrackMemberResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagTagFvRsIpslaMonPolFvTrackMemberType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// TagAnnotationFvTrackMemberResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationFvTrackMemberResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagAnnotationFvTrackMemberResourceModel() TagAnnotationFvTrackMemberResourceModel {
	return TagAnnotationFvTrackMemberResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagAnnotationFvTrackMemberType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// TagTagFvTrackMemberResourceModel describes the resource data model for the children without relation ships.
type TagTagFvTrackMemberResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagTagFvTrackMemberResourceModel() TagTagFvTrackMemberResourceModel {
	return TagTagFvTrackMemberResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagTagFvTrackMemberType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

type FvTrackMemberIdentifier struct {
	Name types.String
}

func (r *FvTrackMemberResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	if !req.Plan.Raw.IsNull() {
		var planData, stateData, configData *FvTrackMemberResourceModel
		resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)
		resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)
		resp.Diagnostics.Append(req.Config.Get(ctx, &configData)...)

		if resp.Diagnostics.HasError() {
			return
		}

		if (planData.Id.IsUnknown() || planData.Id.IsNull()) && !planData.ParentDn.IsUnknown() && !planData.Name.IsUnknown() {
			setFvTrackMemberId(ctx, planData)
		}

		if stateData == nil && !globalAllowExistingOnCreate && !planData.Id.IsUnknown() && !planData.Id.IsNull() {
			CheckDn(ctx, &resp.Diagnostics, r.client, "fvTrackMember", planData.Id.ValueString())
			if resp.Diagnostics.HasError() {
				return
			}
		}
		if !configData.FvRsIpslaMonPol.IsNull() && stateData != nil {
			if IsEmptySingleNestedAttribute(configData.FvRsIpslaMonPol.Attributes()) {
				FvRsIpslaMonPolObject, _ := types.ObjectValueFrom(ctx, FvRsIpslaMonPolFvTrackMemberType, getEmptyFvRsIpslaMonPolFvTrackMemberResourceModel())
				planData.FvRsIpslaMonPol = FvRsIpslaMonPolObject
			}
		}

		resp.Diagnostics.Append(resp.Plan.Set(ctx, &planData)...)
	}
}

func (r *FvTrackMemberResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	tflog.Debug(ctx, "Start metadata of resource: aci_ip_sla_track_member")
	resp.TypeName = req.ProviderTypeName + "_ip_sla_track_member"
	tflog.Debug(ctx, "End metadata of resource: aci_ip_sla_track_member")
}

func (r *FvTrackMemberResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	tflog.Debug(ctx, "Start schema of resource: aci_ip_sla_track_member")
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The ip_sla_track_member resource for the 'fvTrackMember' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the IP SLA Track Member object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"parent_dn": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The distinguished name (DN) of the parent object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"annotation": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Default:             stringdefault.StaticString(globalAnnotation),
				MarkdownDescription: `The annotation of the IP SLA Track Member object.`,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The description of the IP SLA Track Member object.`,
			},
			"destination_ip_address": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The destination IP address to be tracked.`,
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
					stringplanmodifier.RequiresReplace(),
				},
				MarkdownDescription: `The name of the IP SLA Track Member object.`,
			},
			"name_alias": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The name alias of the IP SLA Track Member object.`,
			},
			"owner_key": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The key for enabling clients to own their data for entity correlation.`,
			},
			"owner_tag": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `A tag for enabling clients to add their own data. For example, to indicate who created this object.`,
			},
			"scope": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The scope (Bridge Domain or L3Out) of the IP SLA Track Member. For a Bridge Domain this attribute can be referenced from a [resource](https://registry.terraform.io/providers/CiscoDevNet/aci/latest/docs/resources/bridge_domain) with 'aci_bridge_domain.example.id' or from a [datasource](https://registry.terraform.io/providers/CiscoDevNet/aci/latest/docs/data-sources/bridge_domain) with 'data.aci_bridge_domain.example.id'. For a L3out this attribute can be referenced from a [resource](https://registry.terraform.io/providers/CiscoDevNet/aci/latest/docs/resources/l3_outside) with 'aci_l3_outside.example.id' or from a [datasource](https://registry.terraform.io/providers/CiscoDevNet/aci/latest/docs/data-sources/l3_outside) with 'data.aci_l3_outside.example.id'.`,
			},
			"relation_to_monitoring_policy": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.UseStateForUnknown(),
				},
				Attributes: map[string]schema.Attribute{
					"annotation": schema.StringAttribute{
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
						MarkdownDescription: `The annotation of the Relation To IP SLA Monitoring Policy object.`,
					},
					"target_dn": schema.StringAttribute{
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
						MarkdownDescription: `The distinguished name (DN) of the IP SLA Monitoring Policy.`,
					},
					"annotations": schema.SetNestedAttribute{
						MarkdownDescription: ``,
						Optional:            true,
						Computed:            true,
						PlanModifiers: []planmodifier.Set{
							setplanmodifier.UseStateForUnknown(),
						},
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Required: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.UseStateForUnknown(),
									},
									MarkdownDescription: `The key used to uniquely identify this configuration object.`,
								},
								"value": schema.StringAttribute{
									Required: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.UseStateForUnknown(),
									},
									MarkdownDescription: `The value of the property.`,
								},
							},
						},
					},
					"tags": schema.SetNestedAttribute{
						MarkdownDescription: ``,
						Optional:            true,
						Computed:            true,
						PlanModifiers: []planmodifier.Set{
							setplanmodifier.UseStateForUnknown(),
						},
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Required: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.UseStateForUnknown(),
									},
									MarkdownDescription: `The key used to uniquely identify this configuration object.`,
								},
								"value": schema.StringAttribute{
									Required: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.UseStateForUnknown(),
									},
									MarkdownDescription: `The value of the property.`,
								},
							},
						},
					},
				},
			},
			"annotations": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
			"tags": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
		},
	}
	tflog.Debug(ctx, "End schema of resource: aci_ip_sla_track_member")
}

func (r *FvTrackMemberResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	tflog.Debug(ctx, "Start configure of resource: aci_ip_sla_track_member")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	tflog.Debug(ctx, "End configure of resource: aci_ip_sla_track_member")
}

func (r *FvTrackMemberResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Debug(ctx, "Start create of resource: aci_ip_sla_track_member")
	// On create retrieve information on current state prior to making any changes in order to determine child delete operations
	var stateData *FvTrackMemberResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &stateData)...)
	if stateData.Id.IsUnknown() || stateData.Id.IsNull() {
		setFvTrackMemberId(ctx, stateData)
	}
	getAndSetFvTrackMemberAttributes(ctx, &resp.Diagnostics, r.client, stateData)
	if !globalAllowExistingOnCreate && !stateData.Id.IsNull() {
		resp.Diagnostics.AddError(
			"Object Already Exists",
			fmt.Sprintf("The fvTrackMember object with DN '%s' already exists.", stateData.Id.ValueString()),
		)
		return
	}

	var data *FvTrackMemberResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsUnknown() || data.Id.IsNull() {
		setFvTrackMemberId(ctx, data)
	}

	tflog.Debug(ctx, fmt.Sprintf("Create of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))

	var fvRsIpslaMonPolPlan, fvRsIpslaMonPolState FvRsIpslaMonPolFvTrackMemberResourceModel
	data.FvRsIpslaMonPol.As(ctx, &fvRsIpslaMonPolPlan, basetypes.ObjectAsOptions{})
	stateData.FvRsIpslaMonPol.As(ctx, &fvRsIpslaMonPolState, basetypes.ObjectAsOptions{})
	var tagAnnotationPlan, tagAnnotationState []TagAnnotationFvTrackMemberResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagFvTrackMemberResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getFvTrackMemberCreateJsonPayload(ctx, &resp.Diagnostics, true, data, fvRsIpslaMonPolPlan, fvRsIpslaMonPolState, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetFvTrackMemberAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End create of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))
}

func (r *FvTrackMemberResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Debug(ctx, "Start read of resource: aci_ip_sla_track_member")
	var data *FvTrackMemberResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Read of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))

	getAndSetFvTrackMemberAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	if data.Id.IsNull() {
		var emptyData *FvTrackMemberResourceModel
		resp.Diagnostics.Append(resp.State.Set(ctx, &emptyData)...)
	} else {
		resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	}

	tflog.Debug(ctx, fmt.Sprintf("End read of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))
}

func (r *FvTrackMemberResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Debug(ctx, "Start update of resource: aci_ip_sla_track_member")
	var data *FvTrackMemberResourceModel
	var stateData *FvTrackMemberResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))

	var fvRsIpslaMonPolPlan, fvRsIpslaMonPolState FvRsIpslaMonPolFvTrackMemberResourceModel
	data.FvRsIpslaMonPol.As(ctx, &fvRsIpslaMonPolPlan, basetypes.ObjectAsOptions{})
	stateData.FvRsIpslaMonPol.As(ctx, &fvRsIpslaMonPolState, basetypes.ObjectAsOptions{})
	var tagAnnotationPlan, tagAnnotationState []TagAnnotationFvTrackMemberResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagFvTrackMemberResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getFvTrackMemberCreateJsonPayload(ctx, &resp.Diagnostics, false, data, fvRsIpslaMonPolPlan, fvRsIpslaMonPolState, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetFvTrackMemberAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End update of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))
}

func (r *FvTrackMemberResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Debug(ctx, "Start delete of resource: aci_ip_sla_track_member")
	var data *FvTrackMemberResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Delete of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))
	jsonPayload := GetDeleteJsonPayload(ctx, &resp.Diagnostics, "fvTrackMember", data.Id.ValueString())
	if resp.Diagnostics.HasError() {
		return
	}
	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("End delete of resource aci_ip_sla_track_member with id '%s'", data.Id.ValueString()))
}

func (r *FvTrackMemberResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Start import state of resource: aci_ip_sla_track_member")
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)

	var stateData *FvTrackMemberResourceModel
	resp.Diagnostics.Append(resp.State.Get(ctx, &stateData)...)
	tflog.Debug(ctx, fmt.Sprintf("Import state of resource aci_ip_sla_track_member with id '%s'", stateData.Id.ValueString()))

	tflog.Debug(ctx, "End import of state resource: aci_ip_sla_track_member")
}

func getAndSetFvTrackMemberAttributes(ctx context.Context, diags *diag.Diagnostics, client *client.Client, data *FvTrackMemberResourceModel) {
	requestData := DoRestRequest(ctx, diags, client, fmt.Sprintf("api/mo/%s.json?rsp-subtree=full&rsp-subtree-class=%s", data.Id.ValueString(), "fvTrackMember,fvRsIpslaMonPol,tagAnnotation,tagTag,tagAnnotation,tagTag"), "GET", nil)

	readData := getEmptyFvTrackMemberResourceModel()

	if diags.HasError() {
		return
	}
	if requestData.Search("imdata").Search("fvTrackMember").Data() != nil {
		classReadInfo := requestData.Search("imdata").Search("fvTrackMember").Data().([]interface{})
		if len(classReadInfo) == 1 {
			attributes := classReadInfo[0].(map[string]interface{})["attributes"].(map[string]interface{})
			for attributeName, attributeValue := range attributes {
				if attributeName == "dn" {
					readData.Id = basetypes.NewStringValue(attributeValue.(string))
					setFvTrackMemberParentDn(ctx, attributeValue.(string), readData)
				}
				if attributeName == "annotation" {
					readData.Annotation = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "descr" {
					readData.Descr = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "dstIpAddr" {
					readData.DstIpAddr = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "name" {
					readData.Name = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "nameAlias" {
					readData.NameAlias = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ownerKey" {
					readData.OwnerKey = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ownerTag" {
					readData.OwnerTag = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "scopeDn" {
					readData.ScopeDn = basetypes.NewStringValue(attributeValue.(string))
				}
			}
			FvRsIpslaMonPolFvTrackMemberList := make([]FvRsIpslaMonPolFvTrackMemberResourceModel, 0)
			TagAnnotationFvTrackMemberList := make([]TagAnnotationFvTrackMemberResourceModel, 0)
			TagTagFvTrackMemberList := make([]TagTagFvTrackMemberResourceModel, 0)
			_, ok := classReadInfo[0].(map[string]interface{})["children"]
			if ok {
				children := classReadInfo[0].(map[string]interface{})["children"].([]interface{})
				for _, child := range children {
					for childClassName, childClassDetails := range child.(map[string]interface{}) {
						childAttributes := childClassDetails.(map[string]interface{})["attributes"].(map[string]interface{})
						if childClassName == "fvRsIpslaMonPol" {
							FvRsIpslaMonPolFvTrackMember := getEmptyFvRsIpslaMonPolFvTrackMemberResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									FvRsIpslaMonPolFvTrackMember.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "tDn" {
									FvRsIpslaMonPolFvTrackMember.TDn = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagAnnotationFvRsIpslaMonPolFvTrackMemberList := make([]TagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel, 0)
							TagTagFvRsIpslaMonPolFvTrackMemberList := make([]TagTagFvRsIpslaMonPolFvTrackMemberResourceModel, 0)
							childrenOfFvRsIpslaMonPolFvTrackMember, childrenOfFvRsIpslaMonPolFvTrackMemberExist := childClassDetails.(map[string]interface{})["children"]
							if childrenOfFvRsIpslaMonPolFvTrackMemberExist {
								for _, childFvRsIpslaMonPolFvTrackMember := range childrenOfFvRsIpslaMonPolFvTrackMember.([]interface{}) {
									for childClassNameFvRsIpslaMonPolFvTrackMember, childClassDetailsFvRsIpslaMonPolFvTrackMember := range childFvRsIpslaMonPolFvTrackMember.(map[string]interface{}) {
										if childClassNameFvRsIpslaMonPolFvTrackMember == "tagAnnotation" {
											TagAnnotationFvRsIpslaMonPolFvTrackMember := getEmptyTagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel()
											tagAnnotationchildAttributeValue := childClassDetailsFvRsIpslaMonPolFvTrackMember.(map[string]interface{})["attributes"].(map[string]interface{})
											for childAttributeName, childAttributeValue := range tagAnnotationchildAttributeValue {
												if childAttributeName == "key" {
													TagAnnotationFvRsIpslaMonPolFvTrackMember.Key = basetypes.NewStringValue(childAttributeValue.(string))
												}
												if childAttributeName == "value" {
													TagAnnotationFvRsIpslaMonPolFvTrackMember.Value = basetypes.NewStringValue(childAttributeValue.(string))
												}
											}
											TagAnnotationFvRsIpslaMonPolFvTrackMemberList = append(TagAnnotationFvRsIpslaMonPolFvTrackMemberList, TagAnnotationFvRsIpslaMonPolFvTrackMember)
										}
										if childClassNameFvRsIpslaMonPolFvTrackMember == "tagTag" {
											TagTagFvRsIpslaMonPolFvTrackMember := getEmptyTagTagFvRsIpslaMonPolFvTrackMemberResourceModel()
											tagTagchildAttributeValue := childClassDetailsFvRsIpslaMonPolFvTrackMember.(map[string]interface{})["attributes"].(map[string]interface{})
											for childAttributeName, childAttributeValue := range tagTagchildAttributeValue {
												if childAttributeName == "key" {
													TagTagFvRsIpslaMonPolFvTrackMember.Key = basetypes.NewStringValue(childAttributeValue.(string))
												}
												if childAttributeName == "value" {
													TagTagFvRsIpslaMonPolFvTrackMember.Value = basetypes.NewStringValue(childAttributeValue.(string))
												}
											}
											TagTagFvRsIpslaMonPolFvTrackMemberList = append(TagTagFvRsIpslaMonPolFvTrackMemberList, TagTagFvRsIpslaMonPolFvTrackMember)
										}
									}
								}
							}
							TagAnnotationFvRsIpslaMonPolFvTrackMemberSet, _ := types.SetValueFrom(ctx, TagAnnotationFvRsIpslaMonPolFvTrackMemberType, TagAnnotationFvRsIpslaMonPolFvTrackMemberList)
							FvRsIpslaMonPolFvTrackMember.TagAnnotation = TagAnnotationFvRsIpslaMonPolFvTrackMemberSet
							TagTagFvRsIpslaMonPolFvTrackMemberSet, _ := types.SetValueFrom(ctx, TagTagFvRsIpslaMonPolFvTrackMemberType, TagTagFvRsIpslaMonPolFvTrackMemberList)
							FvRsIpslaMonPolFvTrackMember.TagTag = TagTagFvRsIpslaMonPolFvTrackMemberSet
							FvRsIpslaMonPolFvTrackMemberList = append(FvRsIpslaMonPolFvTrackMemberList, FvRsIpslaMonPolFvTrackMember)
						}
						if childClassName == "tagAnnotation" {
							TagAnnotationFvTrackMember := getEmptyTagAnnotationFvTrackMemberResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagAnnotationFvTrackMember.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagAnnotationFvTrackMember.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagAnnotationFvTrackMemberList = append(TagAnnotationFvTrackMemberList, TagAnnotationFvTrackMember)
						}
						if childClassName == "tagTag" {
							TagTagFvTrackMember := getEmptyTagTagFvTrackMemberResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagTagFvTrackMember.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagTagFvTrackMember.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagTagFvTrackMemberList = append(TagTagFvTrackMemberList, TagTagFvTrackMember)
						}
					}
				}
			}
			if len(FvRsIpslaMonPolFvTrackMemberList) == 1 {
				fvRsIpslaMonPolObject, _ := types.ObjectValueFrom(ctx, FvRsIpslaMonPolFvTrackMemberType, FvRsIpslaMonPolFvTrackMemberList[0])
				readData.FvRsIpslaMonPol = fvRsIpslaMonPolObject
			} else {
				fvRsIpslaMonPolObject, _ := types.ObjectValueFrom(ctx, FvRsIpslaMonPolFvTrackMemberType, getEmptyFvRsIpslaMonPolFvTrackMemberResourceModel())
				readData.FvRsIpslaMonPol = fvRsIpslaMonPolObject
			}
			tagAnnotationSet, _ := types.SetValueFrom(ctx, readData.TagAnnotation.ElementType(ctx), TagAnnotationFvTrackMemberList)
			readData.TagAnnotation = tagAnnotationSet
			tagTagSet, _ := types.SetValueFrom(ctx, readData.TagTag.ElementType(ctx), TagTagFvTrackMemberList)
			readData.TagTag = tagTagSet
		} else {
			diags.AddError(
				"too many results in response",
				fmt.Sprintf("%v matches returned for class 'fvTrackMember'. Please report this issue to the provider developers.", len(classReadInfo)),
			)
		}
	} else {
		readData.Id = basetypes.NewStringNull()
	}
	*data = *readData
}

func getFvTrackMemberRn(ctx context.Context, data *FvTrackMemberResourceModel) string {
	return fmt.Sprintf("trackmember-%s", data.Name.ValueString())
}

func setFvTrackMemberParentDn(ctx context.Context, dn string, data *FvTrackMemberResourceModel) {
	bracketIndex := 0
	rnIndex := 0
	for i := len(dn) - 1; i >= 0; i-- {
		if string(dn[i]) == "]" {
			bracketIndex = bracketIndex + 1
		} else if string(dn[i]) == "[" {
			bracketIndex = bracketIndex - 1
		} else if string(dn[i]) == "/" && bracketIndex == 0 {
			rnIndex = i
			break
		}
	}
	data.ParentDn = basetypes.NewStringValue(dn[:rnIndex])
}

func setFvTrackMemberId(ctx context.Context, data *FvTrackMemberResourceModel) {
	rn := getFvTrackMemberRn(ctx, data)
	data.Id = types.StringValue(fmt.Sprintf("%s/%s", data.ParentDn.ValueString(), rn))
}

func getFvTrackMemberFvRsIpslaMonPolChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvTrackMemberResourceModel, fvRsIpslaMonPolFvTrackMemberPlan, fvRsIpslaMonPolFvTrackMemberState FvRsIpslaMonPolFvTrackMemberResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.FvRsIpslaMonPol.IsNull() && !data.FvRsIpslaMonPol.IsUnknown() {
		FvRsIpslaMonPolFvTrackMemberChildren := make([]map[string]interface{}, 0)
		childMap := NewAciObject()
		if !IsEmptySingleNestedAttribute(data.FvRsIpslaMonPol.Attributes()) {
			if !fvRsIpslaMonPolFvTrackMemberPlan.Annotation.IsUnknown() && !fvRsIpslaMonPolFvTrackMemberPlan.Annotation.IsNull() {
				childMap.Attributes["annotation"] = fvRsIpslaMonPolFvTrackMemberPlan.Annotation.ValueString()
			} else {
				childMap.Attributes["annotation"] = globalAnnotation
			}
			if !fvRsIpslaMonPolFvTrackMemberPlan.TDn.IsUnknown() && !fvRsIpslaMonPolFvTrackMemberPlan.TDn.IsNull() {
				childMap.Attributes["tDn"] = fvRsIpslaMonPolFvTrackMemberPlan.TDn.ValueString()
			}
		} else {
			childMap.Attributes["status"] = "deleted"
		}

		var tagAnnotationFvRsIpslaMonPolFvTrackMemberPlan, tagAnnotationFvRsIpslaMonPolFvTrackMemberState []TagAnnotationFvRsIpslaMonPolFvTrackMemberResourceModel
		fvRsIpslaMonPolFvTrackMemberPlan.TagAnnotation.ElementsAs(ctx, &tagAnnotationFvRsIpslaMonPolFvTrackMemberPlan, false)
		if !fvRsIpslaMonPolFvTrackMemberState.TagAnnotation.IsNull() {
			fvRsIpslaMonPolFvTrackMemberState.TagAnnotation.ElementsAs(ctx, &tagAnnotationFvRsIpslaMonPolFvTrackMemberState, false)
		}
		if !fvRsIpslaMonPolFvTrackMemberPlan.TagAnnotation.IsNull() && !fvRsIpslaMonPolFvTrackMemberPlan.TagAnnotation.IsUnknown() {
			tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
			for _, tagAnnotationFvRsIpslaMonPolFvTrackMember := range tagAnnotationFvRsIpslaMonPolFvTrackMemberPlan {
				tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMap := NewAciObject()
				if !tagAnnotationFvRsIpslaMonPolFvTrackMember.Key.IsNull() && !tagAnnotationFvRsIpslaMonPolFvTrackMember.Key.IsUnknown() {
					tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMap.Attributes["key"] = tagAnnotationFvRsIpslaMonPolFvTrackMember.Key.ValueString()
				}
				if !tagAnnotationFvRsIpslaMonPolFvTrackMember.Value.IsNull() && !tagAnnotationFvRsIpslaMonPolFvTrackMember.Value.IsUnknown() {
					tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMap.Attributes["value"] = tagAnnotationFvRsIpslaMonPolFvTrackMember.Value.ValueString()
				}
				FvRsIpslaMonPolFvTrackMemberChildren = append(FvRsIpslaMonPolFvTrackMemberChildren, map[string]interface{}{"tagAnnotation": tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMap})
				tagAnnotationIdentifier := TagAnnotationIdentifier{}
				tagAnnotationIdentifier.Key = tagAnnotationFvRsIpslaMonPolFvTrackMember.Key
				tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
			}
			for _, tagAnnotationFvRsIpslaMonPolFvTrackMember := range tagAnnotationFvRsIpslaMonPolFvTrackMemberState {
				delete := true
				for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
					if tagAnnotationIdentifier.Key == tagAnnotationFvRsIpslaMonPolFvTrackMember.Key {
						delete = false
						break
					}
				}
				if delete {
					tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMapForDelete := NewAciObject()
					tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMapForDelete.Attributes["status"] = "deleted"
					tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMapForDelete.Attributes["key"] = tagAnnotationFvRsIpslaMonPolFvTrackMember.Key.ValueString()
					FvRsIpslaMonPolFvTrackMemberChildren = append(FvRsIpslaMonPolFvTrackMemberChildren, map[string]interface{}{"tagAnnotation": tagAnnotationFvRsIpslaMonPolFvTrackMemberChildMapForDelete})
				}
			}
		}

		var tagTagFvRsIpslaMonPolFvTrackMemberPlan, tagTagFvRsIpslaMonPolFvTrackMemberState []TagTagFvRsIpslaMonPolFvTrackMemberResourceModel
		fvRsIpslaMonPolFvTrackMemberPlan.TagTag.ElementsAs(ctx, &tagTagFvRsIpslaMonPolFvTrackMemberPlan, false)
		if !fvRsIpslaMonPolFvTrackMemberState.TagTag.IsNull() {
			fvRsIpslaMonPolFvTrackMemberState.TagTag.ElementsAs(ctx, &tagTagFvRsIpslaMonPolFvTrackMemberState, false)
		}
		if !fvRsIpslaMonPolFvTrackMemberPlan.TagTag.IsNull() && !fvRsIpslaMonPolFvTrackMemberPlan.TagTag.IsUnknown() {
			tagTagIdentifiers := []TagTagIdentifier{}
			for _, tagTagFvRsIpslaMonPolFvTrackMember := range tagTagFvRsIpslaMonPolFvTrackMemberPlan {
				tagTagFvRsIpslaMonPolFvTrackMemberChildMap := NewAciObject()
				if !tagTagFvRsIpslaMonPolFvTrackMember.Key.IsNull() && !tagTagFvRsIpslaMonPolFvTrackMember.Key.IsUnknown() {
					tagTagFvRsIpslaMonPolFvTrackMemberChildMap.Attributes["key"] = tagTagFvRsIpslaMonPolFvTrackMember.Key.ValueString()
				}
				if !tagTagFvRsIpslaMonPolFvTrackMember.Value.IsNull() && !tagTagFvRsIpslaMonPolFvTrackMember.Value.IsUnknown() {
					tagTagFvRsIpslaMonPolFvTrackMemberChildMap.Attributes["value"] = tagTagFvRsIpslaMonPolFvTrackMember.Value.ValueString()
				}
				FvRsIpslaMonPolFvTrackMemberChildren = append(FvRsIpslaMonPolFvTrackMemberChildren, map[string]interface{}{"tagTag": tagTagFvRsIpslaMonPolFvTrackMemberChildMap})
				tagTagIdentifier := TagTagIdentifier{}
				tagTagIdentifier.Key = tagTagFvRsIpslaMonPolFvTrackMember.Key
				tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
			}
			for _, tagTagFvRsIpslaMonPolFvTrackMember := range tagTagFvRsIpslaMonPolFvTrackMemberState {
				delete := true
				for _, tagTagIdentifier := range tagTagIdentifiers {
					if tagTagIdentifier.Key == tagTagFvRsIpslaMonPolFvTrackMember.Key {
						delete = false
						break
					}
				}
				if delete {
					tagTagFvRsIpslaMonPolFvTrackMemberChildMapForDelete := NewAciObject()
					tagTagFvRsIpslaMonPolFvTrackMemberChildMapForDelete.Attributes["status"] = "deleted"
					tagTagFvRsIpslaMonPolFvTrackMemberChildMapForDelete.Attributes["key"] = tagTagFvRsIpslaMonPolFvTrackMember.Key.ValueString()
					FvRsIpslaMonPolFvTrackMemberChildren = append(FvRsIpslaMonPolFvTrackMemberChildren, map[string]interface{}{"tagTag": tagTagFvRsIpslaMonPolFvTrackMemberChildMapForDelete})
				}
			}
		}
		childMap.Children = FvRsIpslaMonPolFvTrackMemberChildren
		childPayloads = append(childPayloads, map[string]interface{}{"fvRsIpslaMonPol": childMap})
	} else {
		FvRsIpslaMonPolObject, _ := types.ObjectValueFrom(ctx, FvRsIpslaMonPolFvTrackMemberType, getEmptyFvRsIpslaMonPolFvTrackMemberResourceModel())
		data.FvRsIpslaMonPol = FvRsIpslaMonPolObject
	}

	return childPayloads
}

func getFvTrackMemberTagAnnotationChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvTrackMemberResourceModel, tagAnnotationFvTrackMemberPlan, tagAnnotationFvTrackMemberState []TagAnnotationFvTrackMemberResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.TagAnnotation.IsNull() && !data.TagAnnotation.IsUnknown() {
		tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
		for _, tagAnnotationFvTrackMember := range tagAnnotationFvTrackMemberPlan {
			childMap := NewAciObject()
			if !tagAnnotationFvTrackMember.Key.IsNull() && !tagAnnotationFvTrackMember.Key.IsUnknown() {
				childMap.Attributes["key"] = tagAnnotationFvTrackMember.Key.ValueString()
			}
			if !tagAnnotationFvTrackMember.Value.IsNull() && !tagAnnotationFvTrackMember.Value.IsUnknown() {
				childMap.Attributes["value"] = tagAnnotationFvTrackMember.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": childMap})
			tagAnnotationIdentifier := TagAnnotationIdentifier{}
			tagAnnotationIdentifier.Key = tagAnnotationFvTrackMember.Key
			tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
		}
		for _, tagAnnotation := range tagAnnotationFvTrackMemberState {
			delete := true
			for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
				if tagAnnotationIdentifier.Key == tagAnnotation.Key {
					delete = false
					break
				}
			}
			if delete {
				tagAnnotationChildMapForDelete := NewAciObject()
				tagAnnotationChildMapForDelete.Attributes["status"] = "deleted"
				tagAnnotationChildMapForDelete.Attributes["key"] = tagAnnotation.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": tagAnnotationChildMapForDelete})
			}
		}
	} else {
		data.TagAnnotation = types.SetNull(data.TagAnnotation.ElementType(ctx))
	}

	return childPayloads
}

func getFvTrackMemberTagTagChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *FvTrackMemberResourceModel, tagTagFvTrackMemberPlan, tagTagFvTrackMemberState []TagTagFvTrackMemberResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.TagTag.IsNull() && !data.TagTag.IsUnknown() {
		tagTagIdentifiers := []TagTagIdentifier{}
		for _, tagTagFvTrackMember := range tagTagFvTrackMemberPlan {
			childMap := NewAciObject()
			if !tagTagFvTrackMember.Key.IsNull() && !tagTagFvTrackMember.Key.IsUnknown() {
				childMap.Attributes["key"] = tagTagFvTrackMember.Key.ValueString()
			}
			if !tagTagFvTrackMember.Value.IsNull() && !tagTagFvTrackMember.Value.IsUnknown() {
				childMap.Attributes["value"] = tagTagFvTrackMember.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagTag": childMap})
			tagTagIdentifier := TagTagIdentifier{}
			tagTagIdentifier.Key = tagTagFvTrackMember.Key
			tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
		}
		for _, tagTag := range tagTagFvTrackMemberState {
			delete := true
			for _, tagTagIdentifier := range tagTagIdentifiers {
				if tagTagIdentifier.Key == tagTag.Key {
					delete = false
					break
				}
			}
			if delete {
				tagTagChildMapForDelete := NewAciObject()
				tagTagChildMapForDelete.Attributes["status"] = "deleted"
				tagTagChildMapForDelete.Attributes["key"] = tagTag.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagTag": tagTagChildMapForDelete})
			}
		}
	} else {
		data.TagTag = types.SetNull(data.TagTag.ElementType(ctx))
	}

	return childPayloads
}

func getFvTrackMemberCreateJsonPayload(ctx context.Context, diags *diag.Diagnostics, createType bool, data *FvTrackMemberResourceModel, fvRsIpslaMonPolPlan, fvRsIpslaMonPolState FvRsIpslaMonPolFvTrackMemberResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationFvTrackMemberResourceModel, tagTagPlan, tagTagState []TagTagFvTrackMemberResourceModel) *container.Container {
	payloadMap := map[string]interface{}{}
	payloadMap["attributes"] = map[string]string{}

	if createType && !globalAllowExistingOnCreate {
		payloadMap["attributes"].(map[string]string)["status"] = "created"
	}
	childPayloads := []map[string]interface{}{}

	FvRsIpslaMonPolchildPayloads := getFvTrackMemberFvRsIpslaMonPolChildPayloads(ctx, diags, data, fvRsIpslaMonPolPlan, fvRsIpslaMonPolState)
	if FvRsIpslaMonPolchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, FvRsIpslaMonPolchildPayloads...)

	TagAnnotationchildPayloads := getFvTrackMemberTagAnnotationChildPayloads(ctx, diags, data, tagAnnotationPlan, tagAnnotationState)
	if TagAnnotationchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagAnnotationchildPayloads...)

	TagTagchildPayloads := getFvTrackMemberTagTagChildPayloads(ctx, diags, data, tagTagPlan, tagTagState)
	if TagTagchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagTagchildPayloads...)

	payloadMap["children"] = childPayloads
	if !data.Annotation.IsNull() && !data.Annotation.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["annotation"] = data.Annotation.ValueString()
	}
	if !data.Descr.IsNull() && !data.Descr.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["descr"] = data.Descr.ValueString()
	}
	if !data.DstIpAddr.IsNull() && !data.DstIpAddr.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["dstIpAddr"] = data.DstIpAddr.ValueString()
	}
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["name"] = data.Name.ValueString()
	}
	if !data.NameAlias.IsNull() && !data.NameAlias.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["nameAlias"] = data.NameAlias.ValueString()
	}
	if !data.OwnerKey.IsNull() && !data.OwnerKey.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ownerKey"] = data.OwnerKey.ValueString()
	}
	if !data.OwnerTag.IsNull() && !data.OwnerTag.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ownerTag"] = data.OwnerTag.ValueString()
	}
	if !data.ScopeDn.IsNull() && !data.ScopeDn.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["scopeDn"] = data.ScopeDn.ValueString()
	}
	payload, err := json.Marshal(map[string]interface{}{"fvTrackMember": payloadMap})
	if err != nil {
		diags.AddError(
			"Marshalling of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}

	jsonPayload, err := container.ParseJSON(payload)

	if err != nil {
		diags.AddError(
			"Construction of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}
	return jsonPayload
}
