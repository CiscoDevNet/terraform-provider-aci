// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceFvRsBDToNetflowMonitorPolWithFvBD(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "2.2(1k)-") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config:             testConfigFvRsBDToNetflowMonitorPolDataSourceDependencyWithFvBD,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("data.aci_relation_from_bridge_domain_to_netflow_monitor_policy.test", "filter_type", "ipv4"),
					resource.TestCheckResourceAttr("data.aci_relation_from_bridge_domain_to_netflow_monitor_policy.test", "netflow_monitor_policy_name", "test_tn_netflow_monitor_pol_name"),
					resource.TestCheckResourceAttr("data.aci_relation_from_bridge_domain_to_netflow_monitor_policy.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("data.aci_relation_from_bridge_domain_to_netflow_monitor_policy.test", "filter_type", "ipv4"),
				),
			},
			{
				Config:      testConfigFvRsBDToNetflowMonitorPolNotExistingFvBD,
				ExpectError: regexp.MustCompile("Failed to read aci_relation_from_bridge_domain_to_netflow_monitor_policy data source"),
			},
		},
	})
}

const testConfigFvRsBDToNetflowMonitorPolDataSourceDependencyWithFvBD = testConfigFvRsBDToNetflowMonitorPolMinDependencyWithFvBD + `
data "aci_relation_from_bridge_domain_to_netflow_monitor_policy" "test" {
  parent_dn = aci_bridge_domain.test.id
  filter_type = "ipv4"
  netflow_monitor_policy_name = "test_tn_netflow_monitor_pol_name"
  depends_on = [aci_relation_from_bridge_domain_to_netflow_monitor_policy.test]
}
`

const testConfigFvRsBDToNetflowMonitorPolNotExistingFvBD = testConfigFvBDMinDependencyWithFvTenant + `
data "aci_relation_from_bridge_domain_to_netflow_monitor_policy" "test_non_existing" {
  parent_dn = aci_bridge_domain.test.id
  filter_type = "ipv6"
  netflow_monitor_policy_name = "non_existing_tn_netflow_monitor_pol_name"
}
`
