// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/v2/client"
	"github.com/ciscoecosystem/aci-go-client/v2/container"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &VmmUplinkPContResource{}
var _ resource.ResourceWithImportState = &VmmUplinkPContResource{}

func NewVmmUplinkPContResource() resource.Resource {
	return &VmmUplinkPContResource{}
}

// VmmUplinkPContResource defines the resource implementation.
type VmmUplinkPContResource struct {
	client *client.Client
}

// VmmUplinkPContResourceModel describes the resource data model.
type VmmUplinkPContResourceModel struct {
	Id            types.String `tfsdk:"id"`
	ParentDn      types.String `tfsdk:"parent_dn"`
	Annotation    types.String `tfsdk:"annotation"`
	NameAlias     types.String `tfsdk:"name_alias"`
	NumOfUplinks  types.String `tfsdk:"number_of_uplinks"`
	TagAnnotation types.Set    `tfsdk:"annotations"`
	TagTag        types.Set    `tfsdk:"tags"`
	VmmUplinkP    types.Set    `tfsdk:"uplink_policies"`
}

func getEmptyVmmUplinkPContResourceModel() *VmmUplinkPContResourceModel {
	return &VmmUplinkPContResourceModel{
		Id:           basetypes.NewStringNull(),
		ParentDn:     basetypes.NewStringNull(),
		Annotation:   basetypes.NewStringNull(),
		NameAlias:    basetypes.NewStringNull(),
		NumOfUplinks: basetypes.NewStringNull(),
		TagAnnotation: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		TagTag: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		VmmUplinkP: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"annotation":  types.StringType,
				"name_alias":  types.StringType,
				"uplink_id":   types.StringType,
				"uplink_name": types.StringType,
				"annotations": types.SetType{ElemType: TagAnnotationVmmUplinkPVmmUplinkPContType},
				"tags":        types.SetType{ElemType: TagTagVmmUplinkPVmmUplinkPContType},
			},
		}),
	}
}

// TagAnnotationVmmUplinkPContResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationVmmUplinkPContResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagAnnotationVmmUplinkPContResourceModel() TagAnnotationVmmUplinkPContResourceModel {
	return TagAnnotationVmmUplinkPContResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagAnnotationVmmUplinkPContType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// TagTagVmmUplinkPContResourceModel describes the resource data model for the children without relation ships.
type TagTagVmmUplinkPContResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagTagVmmUplinkPContResourceModel() TagTagVmmUplinkPContResourceModel {
	return TagTagVmmUplinkPContResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagTagVmmUplinkPContType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// VmmUplinkPVmmUplinkPContResourceModel describes the resource data model for the children without relation ships.
type VmmUplinkPVmmUplinkPContResourceModel struct {
	Annotation    types.String `tfsdk:"annotation"`
	NameAlias     types.String `tfsdk:"name_alias"`
	UplinkId      types.String `tfsdk:"uplink_id"`
	UplinkName    types.String `tfsdk:"uplink_name"`
	TagAnnotation types.Set    `tfsdk:"annotations"`
	TagTag        types.Set    `tfsdk:"tags"`
}

func getEmptyVmmUplinkPVmmUplinkPContResourceModel() VmmUplinkPVmmUplinkPContResourceModel {
	return VmmUplinkPVmmUplinkPContResourceModel{
		Annotation: basetypes.NewStringNull(),
		NameAlias:  basetypes.NewStringNull(),
		UplinkId:   basetypes.NewStringNull(),
		UplinkName: basetypes.NewStringNull(),
		TagAnnotation: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
		TagTag: types.SetNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"key":   types.StringType,
				"value": types.StringType,
			},
		}),
	}
}

var VmmUplinkPVmmUplinkPContType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"annotation":  types.StringType,
		"name_alias":  types.StringType,
		"uplink_id":   types.StringType,
		"uplink_name": types.StringType,
		"annotations": types.SetType{ElemType: TagAnnotationVmmUplinkPVmmUplinkPContType},
		"tags":        types.SetType{ElemType: TagTagVmmUplinkPVmmUplinkPContType},
	},
}

func VmmUplinkPVmmUplinkPContSetToSetNullWhenStateIsNullPlanIsUnknownDuringUpdate(ctx context.Context, planValue, stateValue types.Set) basetypes.SetValue {
	//  Function is needed to handle the case that an attribute is not yet supported in a version and gets set to null during read
	var planSetValues, stateSetValues []VmmUplinkPVmmUplinkPContResourceModel
	stateValue.ElementsAs(ctx, &stateSetValues, false)
	planValue.ElementsAs(ctx, &planSetValues, false)

	// If the length of the state and plan values are different a change is already detected the loop can be skipped
	if len(stateSetValues) == len(planSetValues) {
		for index, stateValue := range stateSetValues {
			nullInStateFound := false
			if stateValue.Annotation.IsNull() {
				nullInStateFound = true
				planSetValues[index].Annotation = basetypes.NewStringNull()
			}
			if stateValue.NameAlias.IsNull() {
				nullInStateFound = true
				planSetValues[index].NameAlias = basetypes.NewStringNull()
			}
			if stateValue.UplinkId.IsNull() {
				nullInStateFound = true
				planSetValues[index].UplinkId = basetypes.NewStringNull()
			}
			if stateValue.UplinkName.IsNull() {
				nullInStateFound = true
				planSetValues[index].UplinkName = basetypes.NewStringNull()
			}
			if !nullInStateFound {
				// when there are no null fields we can conclude the version supports all attributes in set
				break
			}
		}
	}
	planSet, _ := types.SetValueFrom(ctx, VmmUplinkPVmmUplinkPContType, planSetValues)
	return planSet

}

// TagAnnotationVmmUplinkPVmmUplinkPContResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationVmmUplinkPVmmUplinkPContResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagAnnotationVmmUplinkPVmmUplinkPContResourceModel() TagAnnotationVmmUplinkPVmmUplinkPContResourceModel {
	return TagAnnotationVmmUplinkPVmmUplinkPContResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagAnnotationVmmUplinkPVmmUplinkPContType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

// TagTagVmmUplinkPVmmUplinkPContResourceModel describes the resource data model for the children without relation ships.
type TagTagVmmUplinkPVmmUplinkPContResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func getEmptyTagTagVmmUplinkPVmmUplinkPContResourceModel() TagTagVmmUplinkPVmmUplinkPContResourceModel {
	return TagTagVmmUplinkPVmmUplinkPContResourceModel{
		Key:   basetypes.NewStringNull(),
		Value: basetypes.NewStringNull(),
	}
}

var TagTagVmmUplinkPVmmUplinkPContType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	},
}

func (r *VmmUplinkPContResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	if !req.Plan.Raw.IsNull() {
		var planData, stateData *VmmUplinkPContResourceModel
		resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)
		resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

		if resp.Diagnostics.HasError() {
			return
		}

		if (planData.Id.IsUnknown() || planData.Id.IsNull()) && !planData.ParentDn.IsUnknown() {
			setVmmUplinkPContId(ctx, planData)
		}

		if stateData == nil && !globalAllowExistingOnCreate && !planData.Id.IsUnknown() && !planData.Id.IsNull() {
			CheckDn(ctx, &resp.Diagnostics, r.client, "vmmUplinkPCont", planData.Id.ValueString())
			if resp.Diagnostics.HasError() {
				return
			}
		}

		resp.Diagnostics.Append(resp.Plan.Set(ctx, &planData)...)
	}
}

func (r *VmmUplinkPContResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	tflog.Debug(ctx, "Start metadata of resource: aci_vmm_uplink_container")
	resp.TypeName = req.ProviderTypeName + "_vmm_uplink_container"
	tflog.Debug(ctx, "End metadata of resource: aci_vmm_uplink_container")
}

func (r *VmmUplinkPContResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	tflog.Debug(ctx, "Start schema of resource: aci_vmm_uplink_container")
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The vmm_uplink_container resource for the 'vmmUplinkPCont' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the VMM Uplink Container object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"parent_dn": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The distinguished name (DN) of the parent object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"annotation": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Default:             stringdefault.StaticString(globalAnnotation),
				MarkdownDescription: `The annotation of the VMM Uplink Container object.`,
			},
			"name_alias": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The name alias of the VMM Uplink Container object.`,
			},
			"number_of_uplinks": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The number of uplinks in the VMM Uplink Container object.`,
			},
			"annotations": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
			"tags": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
			"uplink_policies": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
					SetToSetNullWhenStateIsNullPlanIsUnknownDuringUpdate(VmmUplinkPVmmUplinkPContSetToSetNullWhenStateIsNullPlanIsUnknownDuringUpdate),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The annotation of the VMM Uplink Policy object.`,
						},
						"name_alias": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The name alias of the VMM Uplink Policy object.`,
						},
						"uplink_id": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The uplink identifier of the VMM Uplink Policy object.`,
						},
						"uplink_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							MarkdownDescription: `The uplink name of the VMM Uplink Policy object.`,
						},
						"annotations": schema.SetNestedAttribute{
							MarkdownDescription: ``,
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.Set{
								setplanmodifier.UseStateForUnknown(),
							},
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
										},
										MarkdownDescription: `The key used to uniquely identify this configuration object.`,
									},
									"value": schema.StringAttribute{
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
										},
										MarkdownDescription: `The value of the property.`,
									},
								},
							},
						},
						"tags": schema.SetNestedAttribute{
							MarkdownDescription: ``,
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.Set{
								setplanmodifier.UseStateForUnknown(),
							},
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
										},
										MarkdownDescription: `The key used to uniquely identify this configuration object.`,
									},
									"value": schema.StringAttribute{
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
										},
										MarkdownDescription: `The value of the property.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
	tflog.Debug(ctx, "End schema of resource: aci_vmm_uplink_container")
}

func (r *VmmUplinkPContResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	tflog.Debug(ctx, "Start configure of resource: aci_vmm_uplink_container")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	tflog.Debug(ctx, "End configure of resource: aci_vmm_uplink_container")
}

func (r *VmmUplinkPContResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Debug(ctx, "Start create of resource: aci_vmm_uplink_container")
	// On create retrieve information on current state prior to making any changes in order to determine child delete operations
	var stateData *VmmUplinkPContResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &stateData)...)
	if stateData.Id.IsUnknown() || stateData.Id.IsNull() {
		setVmmUplinkPContId(ctx, stateData)
	}
	getAndSetVmmUplinkPContAttributes(ctx, &resp.Diagnostics, r.client, stateData)
	if !globalAllowExistingOnCreate && !stateData.Id.IsNull() {
		resp.Diagnostics.AddError(
			"Object Already Exists",
			fmt.Sprintf("The vmmUplinkPCont object with DN '%s' already exists.", stateData.Id.ValueString()),
		)
		return
	}

	var data *VmmUplinkPContResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.IsUnknown() || data.Id.IsNull() {
		setVmmUplinkPContId(ctx, data)
	}

	tflog.Debug(ctx, fmt.Sprintf("Create of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))

	var tagAnnotationPlan, tagAnnotationState []TagAnnotationVmmUplinkPContResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagVmmUplinkPContResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	var vmmUplinkPPlan, vmmUplinkPState []VmmUplinkPVmmUplinkPContResourceModel
	data.VmmUplinkP.ElementsAs(ctx, &vmmUplinkPPlan, false)
	stateData.VmmUplinkP.ElementsAs(ctx, &vmmUplinkPState, false)
	jsonPayload := getVmmUplinkPContCreateJsonPayload(ctx, &resp.Diagnostics, true, data, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState, vmmUplinkPPlan, vmmUplinkPState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetVmmUplinkPContAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End create of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))
}

func (r *VmmUplinkPContResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Debug(ctx, "Start read of resource: aci_vmm_uplink_container")
	var data *VmmUplinkPContResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Read of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))

	getAndSetVmmUplinkPContAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	if data.Id.IsNull() {
		var emptyData *VmmUplinkPContResourceModel
		resp.Diagnostics.Append(resp.State.Set(ctx, &emptyData)...)
	} else {
		resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	}

	tflog.Debug(ctx, fmt.Sprintf("End read of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))
}

func (r *VmmUplinkPContResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Debug(ctx, "Start update of resource: aci_vmm_uplink_container")
	var data *VmmUplinkPContResourceModel
	var stateData *VmmUplinkPContResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))

	var tagAnnotationPlan, tagAnnotationState []TagAnnotationVmmUplinkPContResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagVmmUplinkPContResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	var vmmUplinkPPlan, vmmUplinkPState []VmmUplinkPVmmUplinkPContResourceModel
	data.VmmUplinkP.ElementsAs(ctx, &vmmUplinkPPlan, false)
	stateData.VmmUplinkP.ElementsAs(ctx, &vmmUplinkPState, false)
	jsonPayload := getVmmUplinkPContCreateJsonPayload(ctx, &resp.Diagnostics, false, data, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState, vmmUplinkPPlan, vmmUplinkPState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetVmmUplinkPContAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End update of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))
}

func (r *VmmUplinkPContResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Debug(ctx, "Start delete of resource: aci_vmm_uplink_container")
	var data *VmmUplinkPContResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Delete of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))
	jsonPayload := GetDeleteJsonPayload(ctx, &resp.Diagnostics, "vmmUplinkPCont", data.Id.ValueString())
	if resp.Diagnostics.HasError() {
		return
	}
	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("End delete of resource aci_vmm_uplink_container with id '%s'", data.Id.ValueString()))
}

func (r *VmmUplinkPContResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Start import state of resource: aci_vmm_uplink_container")
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)

	var stateData *VmmUplinkPContResourceModel
	resp.Diagnostics.Append(resp.State.Get(ctx, &stateData)...)
	tflog.Debug(ctx, fmt.Sprintf("Import state of resource aci_vmm_uplink_container with id '%s'", stateData.Id.ValueString()))

	tflog.Debug(ctx, "End import of state resource: aci_vmm_uplink_container")
}

func getAndSetVmmUplinkPContAttributes(ctx context.Context, diags *diag.Diagnostics, client *client.Client, data *VmmUplinkPContResourceModel) {
	requestData := DoRestRequest(ctx, diags, client, fmt.Sprintf("api/mo/%s.json?rsp-subtree=full&rsp-subtree-class=%s", data.Id.ValueString(), "vmmUplinkPCont,tagAnnotation,tagTag,vmmUplinkP,tagAnnotation,tagTag"), "GET", nil)

	readData := getEmptyVmmUplinkPContResourceModel()

	if diags.HasError() {
		return
	}
	if requestData.Search("imdata").Search("vmmUplinkPCont").Data() != nil {
		classReadInfo := requestData.Search("imdata").Search("vmmUplinkPCont").Data().([]interface{})
		if len(classReadInfo) == 1 {
			attributes := classReadInfo[0].(map[string]interface{})["attributes"].(map[string]interface{})
			for attributeName, attributeValue := range attributes {
				if attributeName == "dn" {
					readData.Id = basetypes.NewStringValue(attributeValue.(string))
					setVmmUplinkPContParentDn(ctx, attributeValue.(string), readData)
				}
				if attributeName == "annotation" {
					readData.Annotation = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "nameAlias" {
					readData.NameAlias = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "numOfUplinks" {
					readData.NumOfUplinks = basetypes.NewStringValue(attributeValue.(string))
				}
			}
			TagAnnotationVmmUplinkPContList := make([]TagAnnotationVmmUplinkPContResourceModel, 0)
			TagTagVmmUplinkPContList := make([]TagTagVmmUplinkPContResourceModel, 0)
			VmmUplinkPVmmUplinkPContList := make([]VmmUplinkPVmmUplinkPContResourceModel, 0)
			_, ok := classReadInfo[0].(map[string]interface{})["children"]
			if ok {
				children := classReadInfo[0].(map[string]interface{})["children"].([]interface{})
				for _, child := range children {
					for childClassName, childClassDetails := range child.(map[string]interface{}) {
						childAttributes := childClassDetails.(map[string]interface{})["attributes"].(map[string]interface{})
						if childClassName == "tagAnnotation" {
							TagAnnotationVmmUplinkPCont := getEmptyTagAnnotationVmmUplinkPContResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagAnnotationVmmUplinkPCont.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagAnnotationVmmUplinkPCont.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagAnnotationVmmUplinkPContList = append(TagAnnotationVmmUplinkPContList, TagAnnotationVmmUplinkPCont)
						}
						if childClassName == "tagTag" {
							TagTagVmmUplinkPCont := getEmptyTagTagVmmUplinkPContResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagTagVmmUplinkPCont.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagTagVmmUplinkPCont.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagTagVmmUplinkPContList = append(TagTagVmmUplinkPContList, TagTagVmmUplinkPCont)
						}
						if childClassName == "vmmUplinkP" {
							VmmUplinkPVmmUplinkPCont := getEmptyVmmUplinkPVmmUplinkPContResourceModel()
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "annotation" {
									VmmUplinkPVmmUplinkPCont.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "nameAlias" {
									VmmUplinkPVmmUplinkPCont.NameAlias = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "uplinkId" {
									VmmUplinkPVmmUplinkPCont.UplinkId = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "uplinkName" {
									VmmUplinkPVmmUplinkPCont.UplinkName = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagAnnotationVmmUplinkPVmmUplinkPContList := make([]TagAnnotationVmmUplinkPVmmUplinkPContResourceModel, 0)
							TagTagVmmUplinkPVmmUplinkPContList := make([]TagTagVmmUplinkPVmmUplinkPContResourceModel, 0)
							childrenOfVmmUplinkPVmmUplinkPCont, childrenOfVmmUplinkPVmmUplinkPContExist := childClassDetails.(map[string]interface{})["children"]
							if childrenOfVmmUplinkPVmmUplinkPContExist {
								for _, childVmmUplinkPVmmUplinkPCont := range childrenOfVmmUplinkPVmmUplinkPCont.([]interface{}) {
									for childClassNameVmmUplinkPVmmUplinkPCont, childClassDetailsVmmUplinkPVmmUplinkPCont := range childVmmUplinkPVmmUplinkPCont.(map[string]interface{}) {
										if childClassNameVmmUplinkPVmmUplinkPCont == "tagAnnotation" {
											TagAnnotationVmmUplinkPVmmUplinkPCont := getEmptyTagAnnotationVmmUplinkPVmmUplinkPContResourceModel()
											tagAnnotationchildAttributeValue := childClassDetailsVmmUplinkPVmmUplinkPCont.(map[string]interface{})["attributes"].(map[string]interface{})
											for childAttributeName, childAttributeValue := range tagAnnotationchildAttributeValue {
												if childAttributeName == "key" {
													TagAnnotationVmmUplinkPVmmUplinkPCont.Key = basetypes.NewStringValue(childAttributeValue.(string))
												}
												if childAttributeName == "value" {
													TagAnnotationVmmUplinkPVmmUplinkPCont.Value = basetypes.NewStringValue(childAttributeValue.(string))
												}
											}
											TagAnnotationVmmUplinkPVmmUplinkPContList = append(TagAnnotationVmmUplinkPVmmUplinkPContList, TagAnnotationVmmUplinkPVmmUplinkPCont)
										}
										if childClassNameVmmUplinkPVmmUplinkPCont == "tagTag" {
											TagTagVmmUplinkPVmmUplinkPCont := getEmptyTagTagVmmUplinkPVmmUplinkPContResourceModel()
											tagTagchildAttributeValue := childClassDetailsVmmUplinkPVmmUplinkPCont.(map[string]interface{})["attributes"].(map[string]interface{})
											for childAttributeName, childAttributeValue := range tagTagchildAttributeValue {
												if childAttributeName == "key" {
													TagTagVmmUplinkPVmmUplinkPCont.Key = basetypes.NewStringValue(childAttributeValue.(string))
												}
												if childAttributeName == "value" {
													TagTagVmmUplinkPVmmUplinkPCont.Value = basetypes.NewStringValue(childAttributeValue.(string))
												}
											}
											TagTagVmmUplinkPVmmUplinkPContList = append(TagTagVmmUplinkPVmmUplinkPContList, TagTagVmmUplinkPVmmUplinkPCont)
										}
									}
								}
							}
							TagAnnotationVmmUplinkPVmmUplinkPContSet, _ := types.SetValueFrom(ctx, TagAnnotationVmmUplinkPVmmUplinkPContType, TagAnnotationVmmUplinkPVmmUplinkPContList)
							VmmUplinkPVmmUplinkPCont.TagAnnotation = TagAnnotationVmmUplinkPVmmUplinkPContSet
							TagTagVmmUplinkPVmmUplinkPContSet, _ := types.SetValueFrom(ctx, TagTagVmmUplinkPVmmUplinkPContType, TagTagVmmUplinkPVmmUplinkPContList)
							VmmUplinkPVmmUplinkPCont.TagTag = TagTagVmmUplinkPVmmUplinkPContSet
							VmmUplinkPVmmUplinkPContList = append(VmmUplinkPVmmUplinkPContList, VmmUplinkPVmmUplinkPCont)
						}
					}
				}
			}
			tagAnnotationSet, _ := types.SetValueFrom(ctx, readData.TagAnnotation.ElementType(ctx), TagAnnotationVmmUplinkPContList)
			readData.TagAnnotation = tagAnnotationSet
			tagTagSet, _ := types.SetValueFrom(ctx, readData.TagTag.ElementType(ctx), TagTagVmmUplinkPContList)
			readData.TagTag = tagTagSet
			vmmUplinkPSet, _ := types.SetValueFrom(ctx, readData.VmmUplinkP.ElementType(ctx), VmmUplinkPVmmUplinkPContList)
			readData.VmmUplinkP = vmmUplinkPSet
		} else {
			diags.AddError(
				"too many results in response",
				fmt.Sprintf("%v matches returned for class 'vmmUplinkPCont'. Please report this issue to the provider developers.", len(classReadInfo)),
			)
		}
	} else {
		readData.Id = basetypes.NewStringNull()
	}
	*data = *readData
}

func getVmmUplinkPContRn(ctx context.Context, data *VmmUplinkPContResourceModel) string {
	return fmt.Sprintf("uplinkpcont")
}

func setVmmUplinkPContParentDn(ctx context.Context, dn string, data *VmmUplinkPContResourceModel) {
	bracketIndex := 0
	rnIndex := 0
	for i := len(dn) - 1; i >= 0; i-- {
		if string(dn[i]) == "]" {
			bracketIndex = bracketIndex + 1
		} else if string(dn[i]) == "[" {
			bracketIndex = bracketIndex - 1
		} else if string(dn[i]) == "/" && bracketIndex == 0 {
			rnIndex = i
			break
		}
	}
	data.ParentDn = basetypes.NewStringValue(dn[:rnIndex])
}

func setVmmUplinkPContId(ctx context.Context, data *VmmUplinkPContResourceModel) {
	rn := getVmmUplinkPContRn(ctx, data)
	data.Id = types.StringValue(fmt.Sprintf("%s/%s", data.ParentDn.ValueString(), rn))
}

func getVmmUplinkPContTagAnnotationChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *VmmUplinkPContResourceModel, tagAnnotationVmmUplinkPContPlan, tagAnnotationVmmUplinkPContState []TagAnnotationVmmUplinkPContResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.TagAnnotation.IsNull() && !data.TagAnnotation.IsUnknown() {
		tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
		for _, tagAnnotationVmmUplinkPCont := range tagAnnotationVmmUplinkPContPlan {
			childMap := NewAciObject()
			if !tagAnnotationVmmUplinkPCont.Key.IsNull() && !tagAnnotationVmmUplinkPCont.Key.IsUnknown() {
				childMap.Attributes["key"] = tagAnnotationVmmUplinkPCont.Key.ValueString()
			}
			if !tagAnnotationVmmUplinkPCont.Value.IsNull() && !tagAnnotationVmmUplinkPCont.Value.IsUnknown() {
				childMap.Attributes["value"] = tagAnnotationVmmUplinkPCont.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": childMap})
			tagAnnotationIdentifier := TagAnnotationIdentifier{}
			tagAnnotationIdentifier.Key = tagAnnotationVmmUplinkPCont.Key
			tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
		}
		for _, tagAnnotation := range tagAnnotationVmmUplinkPContState {
			delete := true
			for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
				if tagAnnotationIdentifier.Key == tagAnnotation.Key {
					delete = false
					break
				}
			}
			if delete {
				tagAnnotationChildMapForDelete := NewAciObject()
				tagAnnotationChildMapForDelete.Attributes["status"] = "deleted"
				tagAnnotationChildMapForDelete.Attributes["key"] = tagAnnotation.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": tagAnnotationChildMapForDelete})
			}
		}
	} else {
		data.TagAnnotation = types.SetNull(data.TagAnnotation.ElementType(ctx))
	}

	return childPayloads
}

func getVmmUplinkPContTagTagChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *VmmUplinkPContResourceModel, tagTagVmmUplinkPContPlan, tagTagVmmUplinkPContState []TagTagVmmUplinkPContResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.TagTag.IsNull() && !data.TagTag.IsUnknown() {
		tagTagIdentifiers := []TagTagIdentifier{}
		for _, tagTagVmmUplinkPCont := range tagTagVmmUplinkPContPlan {
			childMap := NewAciObject()
			if !tagTagVmmUplinkPCont.Key.IsNull() && !tagTagVmmUplinkPCont.Key.IsUnknown() {
				childMap.Attributes["key"] = tagTagVmmUplinkPCont.Key.ValueString()
			}
			if !tagTagVmmUplinkPCont.Value.IsNull() && !tagTagVmmUplinkPCont.Value.IsUnknown() {
				childMap.Attributes["value"] = tagTagVmmUplinkPCont.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagTag": childMap})
			tagTagIdentifier := TagTagIdentifier{}
			tagTagIdentifier.Key = tagTagVmmUplinkPCont.Key
			tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
		}
		for _, tagTag := range tagTagVmmUplinkPContState {
			delete := true
			for _, tagTagIdentifier := range tagTagIdentifiers {
				if tagTagIdentifier.Key == tagTag.Key {
					delete = false
					break
				}
			}
			if delete {
				tagTagChildMapForDelete := NewAciObject()
				tagTagChildMapForDelete.Attributes["status"] = "deleted"
				tagTagChildMapForDelete.Attributes["key"] = tagTag.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagTag": tagTagChildMapForDelete})
			}
		}
	} else {
		data.TagTag = types.SetNull(data.TagTag.ElementType(ctx))
	}

	return childPayloads
}

func getVmmUplinkPContVmmUplinkPChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *VmmUplinkPContResourceModel, vmmUplinkPVmmUplinkPContPlan, vmmUplinkPVmmUplinkPContState []VmmUplinkPVmmUplinkPContResourceModel) []map[string]interface{} {
	childPayloads := []map[string]interface{}{}
	if !data.VmmUplinkP.IsNull() && !data.VmmUplinkP.IsUnknown() {
		vmmUplinkPIdentifiers := []VmmUplinkPIdentifier{}
		for _, vmmUplinkPVmmUplinkPCont := range vmmUplinkPVmmUplinkPContPlan {
			VmmUplinkPVmmUplinkPContChildren := make([]map[string]interface{}, 0)
			childMap := NewAciObject()
			if !vmmUplinkPVmmUplinkPCont.Annotation.IsNull() && !vmmUplinkPVmmUplinkPCont.Annotation.IsUnknown() {
				childMap.Attributes["annotation"] = vmmUplinkPVmmUplinkPCont.Annotation.ValueString()
			} else {
				childMap.Attributes["annotation"] = globalAnnotation
			}
			if !vmmUplinkPVmmUplinkPCont.NameAlias.IsNull() && !vmmUplinkPVmmUplinkPCont.NameAlias.IsUnknown() {
				childMap.Attributes["nameAlias"] = vmmUplinkPVmmUplinkPCont.NameAlias.ValueString()
			}
			if !vmmUplinkPVmmUplinkPCont.UplinkId.IsNull() && !vmmUplinkPVmmUplinkPCont.UplinkId.IsUnknown() {
				childMap.Attributes["uplinkId"] = vmmUplinkPVmmUplinkPCont.UplinkId.ValueString()
			}
			if !vmmUplinkPVmmUplinkPCont.UplinkName.IsNull() && !vmmUplinkPVmmUplinkPCont.UplinkName.IsUnknown() {
				childMap.Attributes["uplinkName"] = vmmUplinkPVmmUplinkPCont.UplinkName.ValueString()
			}

			var tagAnnotationVmmUplinkPVmmUplinkPContPlan, tagAnnotationVmmUplinkPVmmUplinkPContState []TagAnnotationVmmUplinkPVmmUplinkPContResourceModel
			vmmUplinkPVmmUplinkPCont.TagAnnotation.ElementsAs(ctx, &tagAnnotationVmmUplinkPVmmUplinkPContPlan, false)
			for _, tagAnnotationVmmUplinkPVmmUplinkPContstate := range vmmUplinkPVmmUplinkPContState {
				tagAnnotationVmmUplinkPVmmUplinkPContstate.TagAnnotation.ElementsAs(ctx, &tagAnnotationVmmUplinkPVmmUplinkPContState, false)
			}
			if !vmmUplinkPVmmUplinkPCont.TagAnnotation.IsNull() && !vmmUplinkPVmmUplinkPCont.TagAnnotation.IsUnknown() {
				tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
				for _, tagAnnotationVmmUplinkPVmmUplinkPCont := range tagAnnotationVmmUplinkPVmmUplinkPContPlan {
					tagAnnotationVmmUplinkPVmmUplinkPContChildMap := NewAciObject()
					if !tagAnnotationVmmUplinkPVmmUplinkPCont.Key.IsNull() && !tagAnnotationVmmUplinkPVmmUplinkPCont.Key.IsUnknown() {
						tagAnnotationVmmUplinkPVmmUplinkPContChildMap.Attributes["key"] = tagAnnotationVmmUplinkPVmmUplinkPCont.Key.ValueString()
					}
					if !tagAnnotationVmmUplinkPVmmUplinkPCont.Value.IsNull() && !tagAnnotationVmmUplinkPVmmUplinkPCont.Value.IsUnknown() {
						tagAnnotationVmmUplinkPVmmUplinkPContChildMap.Attributes["value"] = tagAnnotationVmmUplinkPVmmUplinkPCont.Value.ValueString()
					}
					VmmUplinkPVmmUplinkPContChildren = append(VmmUplinkPVmmUplinkPContChildren, map[string]interface{}{"tagAnnotation": tagAnnotationVmmUplinkPVmmUplinkPContChildMap})
					tagAnnotationIdentifier := TagAnnotationIdentifier{}
					tagAnnotationIdentifier.Key = tagAnnotationVmmUplinkPVmmUplinkPCont.Key
					tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
				}
				for _, tagAnnotationVmmUplinkPVmmUplinkPCont := range tagAnnotationVmmUplinkPVmmUplinkPContState {
					delete := true
					for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
						if tagAnnotationIdentifier.Key == tagAnnotationVmmUplinkPVmmUplinkPCont.Key {
							delete = false
							break
						}
					}
					if delete {
						tagAnnotationVmmUplinkPVmmUplinkPContChildMapForDelete := NewAciObject()
						tagAnnotationVmmUplinkPVmmUplinkPContChildMapForDelete.Attributes["status"] = "deleted"
						tagAnnotationVmmUplinkPVmmUplinkPContChildMapForDelete.Attributes["key"] = tagAnnotationVmmUplinkPVmmUplinkPCont.Key.ValueString()
						VmmUplinkPVmmUplinkPContChildren = append(VmmUplinkPVmmUplinkPContChildren, map[string]interface{}{"tagAnnotation": tagAnnotationVmmUplinkPVmmUplinkPContChildMapForDelete})
					}
				}
			}

			var tagTagVmmUplinkPVmmUplinkPContPlan, tagTagVmmUplinkPVmmUplinkPContState []TagTagVmmUplinkPVmmUplinkPContResourceModel
			vmmUplinkPVmmUplinkPCont.TagTag.ElementsAs(ctx, &tagTagVmmUplinkPVmmUplinkPContPlan, false)
			for _, tagTagVmmUplinkPVmmUplinkPContstate := range vmmUplinkPVmmUplinkPContState {
				tagTagVmmUplinkPVmmUplinkPContstate.TagTag.ElementsAs(ctx, &tagTagVmmUplinkPVmmUplinkPContState, false)
			}
			if !vmmUplinkPVmmUplinkPCont.TagTag.IsNull() && !vmmUplinkPVmmUplinkPCont.TagTag.IsUnknown() {
				tagTagIdentifiers := []TagTagIdentifier{}
				for _, tagTagVmmUplinkPVmmUplinkPCont := range tagTagVmmUplinkPVmmUplinkPContPlan {
					tagTagVmmUplinkPVmmUplinkPContChildMap := NewAciObject()
					if !tagTagVmmUplinkPVmmUplinkPCont.Key.IsNull() && !tagTagVmmUplinkPVmmUplinkPCont.Key.IsUnknown() {
						tagTagVmmUplinkPVmmUplinkPContChildMap.Attributes["key"] = tagTagVmmUplinkPVmmUplinkPCont.Key.ValueString()
					}
					if !tagTagVmmUplinkPVmmUplinkPCont.Value.IsNull() && !tagTagVmmUplinkPVmmUplinkPCont.Value.IsUnknown() {
						tagTagVmmUplinkPVmmUplinkPContChildMap.Attributes["value"] = tagTagVmmUplinkPVmmUplinkPCont.Value.ValueString()
					}
					VmmUplinkPVmmUplinkPContChildren = append(VmmUplinkPVmmUplinkPContChildren, map[string]interface{}{"tagTag": tagTagVmmUplinkPVmmUplinkPContChildMap})
					tagTagIdentifier := TagTagIdentifier{}
					tagTagIdentifier.Key = tagTagVmmUplinkPVmmUplinkPCont.Key
					tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
				}
				for _, tagTagVmmUplinkPVmmUplinkPCont := range tagTagVmmUplinkPVmmUplinkPContState {
					delete := true
					for _, tagTagIdentifier := range tagTagIdentifiers {
						if tagTagIdentifier.Key == tagTagVmmUplinkPVmmUplinkPCont.Key {
							delete = false
							break
						}
					}
					if delete {
						tagTagVmmUplinkPVmmUplinkPContChildMapForDelete := NewAciObject()
						tagTagVmmUplinkPVmmUplinkPContChildMapForDelete.Attributes["status"] = "deleted"
						tagTagVmmUplinkPVmmUplinkPContChildMapForDelete.Attributes["key"] = tagTagVmmUplinkPVmmUplinkPCont.Key.ValueString()
						VmmUplinkPVmmUplinkPContChildren = append(VmmUplinkPVmmUplinkPContChildren, map[string]interface{}{"tagTag": tagTagVmmUplinkPVmmUplinkPContChildMapForDelete})
					}
				}
			}
			childMap.Children = VmmUplinkPVmmUplinkPContChildren
			childPayloads = append(childPayloads, map[string]interface{}{"vmmUplinkP": childMap})
			vmmUplinkPIdentifier := VmmUplinkPIdentifier{}
			vmmUplinkPIdentifier.UplinkId = vmmUplinkPVmmUplinkPCont.UplinkId
			vmmUplinkPIdentifiers = append(vmmUplinkPIdentifiers, vmmUplinkPIdentifier)
		}
		for _, vmmUplinkP := range vmmUplinkPVmmUplinkPContState {
			delete := true
			for _, vmmUplinkPIdentifier := range vmmUplinkPIdentifiers {
				if vmmUplinkPIdentifier.UplinkId == vmmUplinkP.UplinkId {
					delete = false
					break
				}
			}
			if delete {
				vmmUplinkPChildMapForDelete := NewAciObject()
				vmmUplinkPChildMapForDelete.Attributes["status"] = "deleted"
				vmmUplinkPChildMapForDelete.Attributes["uplinkId"] = vmmUplinkP.UplinkId.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"vmmUplinkP": vmmUplinkPChildMapForDelete})
			}
		}
	} else {
		data.VmmUplinkP = types.SetNull(data.VmmUplinkP.ElementType(ctx))
	}

	return childPayloads
}

func getVmmUplinkPContCreateJsonPayload(ctx context.Context, diags *diag.Diagnostics, createType bool, data *VmmUplinkPContResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationVmmUplinkPContResourceModel, tagTagPlan, tagTagState []TagTagVmmUplinkPContResourceModel, vmmUplinkPPlan, vmmUplinkPState []VmmUplinkPVmmUplinkPContResourceModel) *container.Container {
	payloadMap := map[string]interface{}{}
	payloadMap["attributes"] = map[string]string{}

	if createType && !globalAllowExistingOnCreate {
		payloadMap["attributes"].(map[string]string)["status"] = "created"
	}
	childPayloads := []map[string]interface{}{}

	TagAnnotationchildPayloads := getVmmUplinkPContTagAnnotationChildPayloads(ctx, diags, data, tagAnnotationPlan, tagAnnotationState)
	if TagAnnotationchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagAnnotationchildPayloads...)

	TagTagchildPayloads := getVmmUplinkPContTagTagChildPayloads(ctx, diags, data, tagTagPlan, tagTagState)
	if TagTagchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagTagchildPayloads...)

	VmmUplinkPchildPayloads := getVmmUplinkPContVmmUplinkPChildPayloads(ctx, diags, data, vmmUplinkPPlan, vmmUplinkPState)
	if VmmUplinkPchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, VmmUplinkPchildPayloads...)

	payloadMap["children"] = childPayloads
	if !data.Annotation.IsNull() && !data.Annotation.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["annotation"] = data.Annotation.ValueString()
	}
	if !data.NameAlias.IsNull() && !data.NameAlias.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["nameAlias"] = data.NameAlias.ValueString()
	}
	if !data.NumOfUplinks.IsNull() && !data.NumOfUplinks.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["numOfUplinks"] = data.NumOfUplinks.ValueString()
	}
	payload, err := json.Marshal(map[string]interface{}{"vmmUplinkPCont": payloadMap})
	if err != nil {
		diags.AddError(
			"Marshalling of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}

	jsonPayload, err := container.ParseJSON(payload)

	if err != nil {
		diags.AddError(
			"Construction of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}
	return jsonPayload
}
