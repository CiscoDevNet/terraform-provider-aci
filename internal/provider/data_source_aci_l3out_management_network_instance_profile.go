// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/v2/client"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &MgmtInstPDataSource{}

func NewMgmtInstPDataSource() datasource.DataSource {
	return &MgmtInstPDataSource{}
}

// MgmtInstPDataSource defines the data source implementation.
type MgmtInstPDataSource struct {
	client *client.Client
}

func (d *MgmtInstPDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	tflog.Trace(ctx, "Start metadata of datasource: aci_l3out_management_network_instance_profile")
	resp.TypeName = req.ProviderTypeName + "_l3out_management_network_instance_profile"
	tflog.Trace(ctx, "End metadata of datasource: aci_l3out_management_network_instance_profile")
}

func (d *MgmtInstPDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	tflog.Trace(ctx, "Start schema of datasource: aci_l3out_management_network_instance_profile")
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The l3out_management_network_instance_profile datasource for the 'mgmtInstP' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the L3out Management Network Instance Profile object.",
			},
			"annotation": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `The annotation of the L3out Management Network Instance Profile object.`,
			},
			"description": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `The description of the L3out Management Network Instance Profile object.`,
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: `The name of the L3out Management Network Instance Profile object.`,
			},
			"name_alias": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `The name alias of the L3out Management Network Instance Profile object.`,
			},
			"priority": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `The QoS priority class identifier.`,
			},
			"l3out_management_network_oob_contracts": schema.SetNestedAttribute{
				MarkdownDescription: `An external management entity instance profile to an out-of-band binary contract profile. The instance profiles of external management entities can communicate with nodes that are part of out-of-band management endpoint group. To enable this communication, a contract is required between the instance profile and the out-of-band management endpoint group.`,
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"annotation": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: `The annotation of the L3out Management Network Oob Contract object.`,
						},
						"priority": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: `The Quality of service (QoS) priority class ID. QoS refers to the capability of a network to provide better service to selected network traffic over various technologies. The primary goal of QoS is to provide priority including dedicated bandwidth, controlled jitter and latency (required by some real-time and interactive traffic), and improved loss characteristics. You can configure the bandwidth of each QoS level using QoS profiles.`,
						},
						"out_of_band_contract_name": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: `An out-of-band management endpoint group contract consists of switches (leaves/spines) and APICs that are part of the associated out-of-band management zone. Each node in the group is assigned an IP address that is dynamically allocated from the address pool associated with the corresponding out-of-band management zone.`,
						},
					},
				},
			},
			"annotations": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: `The key or password used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
		},
	}
	tflog.Trace(ctx, "End schema of datasource: aci_l3out_management_network_instance_profile")
}

func (d *MgmtInstPDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	tflog.Trace(ctx, "Start configure of datasource: aci_l3out_management_network_instance_profile")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		resp.Diagnostics.AddError(
			"Provider has not been configured",
			"The req.ProviderData is nil. Please report this issue to the provider developers.",
		)
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	d.client = client
	tflog.Trace(ctx, "End configure of datasource: aci_l3out_management_network_instance_profile")
}

func (d *MgmtInstPDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	tflog.Trace(ctx, "Start read of datasource: aci_l3out_management_network_instance_profile")
	var data *MgmtInstPResourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	setMgmtInstPId(ctx, data)

	tflog.Trace(ctx, fmt.Sprintf("Read of datasource aci_l3out_management_network_instance_profile with id '%s'", data.Id.ValueString()))

	setMgmtInstPAttributes(ctx, &resp.Diagnostics, d.client, data)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Trace(ctx, "End read of datasource: aci_l3out_management_network_instance_profile")
}
