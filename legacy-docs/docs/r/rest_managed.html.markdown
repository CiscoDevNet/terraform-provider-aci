---
# Documentation generated by "gen/generator.go"; DO NOT EDIT.
# Copied from legacy-docs, in order to make changes change this file in legacy-docs and execute `go generate` from the repository root.
# More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).
layout: "aci"
page_title: "ACI: aci_rest_managed"
sidebar_current: "docs-aci-resource-aci_rest_managed"
subcategory: "Generic"
description: |-
  Manages ACI Model Objects via REST API calls. This resource can only manage a single API object and its direct children. It is able to read the state and therefore reconcile configuration drift.
---

# aci_rest_managed #

Manages ACI Model Objects via REST API calls. This resource can only manage a single API object and its direct children. It is able to read the state and therefore reconcile configuration drift.

## Example Usage ##

The configuration snippet below creates a Tenant object.

```terraform
resource "aci_rest_managed" "example_tenant" {
  dn         = "uni/tn-EXAMPLE_TENANT"
  class_name = "fvTenant"
  content = {
    name  = "EXAMPLE_TENANT"
    descr = "Example description"
  }
}
```

The configuration snippet below creates a Management Connectivity Preference object with an annotation overwrite.

```terraform
resource "aci_rest_managed" "example_management_connectivity" {
  dn         = "uni/fabric/connectivityPrefs"
  class_name = "mgmtConnectivityPrefs"
  annotation = "orchestrator:example"
  content = {
    interfacePref = "ooband"
  }
}
```

The configuration snippet below creates a Tenant object with a VRF as child with annotation overwrites.

```terraform
resource "aci_rest_managed" "example_tenant_with_child" {
  dn         = "uni/tn-EXAMPLE_TENANT_WITH_CHILD"
  class_name = "fvTenant"
  content = {
    name = "EXAMPLE_TENANT_WITH_CHILD"
    annotation = "orchestrator:class"
  }
  child {
    rn         = "ctx-VRF1"
    class_name = "fvCtx"
    content = {
      name = "VRF1"
      annotation = "orchestrator:child"
    }
  }
}
```

## Schema ##

### Required ###

* `class_name` - (string) Which class object is being created.

  !> Make sure there is no colon `:` in the classname

* `dn` - (string) Distinguished Name of the object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.

### Read-Only ###

* `id` - (string) The Distinguished Name of the object.

### Optional ###

* `annotation` - (string) Annotation for the class object that is being created.
  - Default: `orchestrator:terraform`
* `content` (map) Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.

  !> The annotation property is not allowed to be set in the content map of the resource.

* `child` - (list) A list of child objects.

  #### Required ####

  * `rn` - (string) The Relative Name of the child object.
  * `class_name` - (string) Class name of child object.

  #### Optional ###

  * `content` (map) Map of key-value pairs which represents the attributes for the child object. When annotation is provided in the content of the child it will take precedence over the annotation set at the parent level.

## Importing ##

An existing object can be [imported](https://www.terraform.io/docs/import/index.html) into this resource via its distinguished name (DN), via the following command:

```
terraform import aci_rest_managed.example_tenant uni/tn-{name}
```

When children need to be imported they must be specified by appending them to the distinguished name (DN) with the below format:

```
terraform import aci_rest_managed.example_tenant uni/tn-{name}:{child-rn-1},{child-rn-N}
```

Starting in Terraform version 1.5, an existing object can be imported using [import blocks](https://developer.hashicorp.com/terraform/language/import) via the following configuration:

```
import {
  id = "uni/tn-{name}"
  to = aci_rest_managed.example_tenant
}
```