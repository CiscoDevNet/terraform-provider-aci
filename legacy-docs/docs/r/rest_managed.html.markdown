---
# Documentation generated by "gen/generator.go"; DO NOT EDIT.
# Copied from legacy-docs, in order to make changes change this file in legacy-docs and execute `go generate` from the repository root.
# More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).
layout: "aci"
page_title: "ACI: aci_rest_managed"
sidebar_current: "docs-aci-resource-aci_rest_managed"
subcategory: "Generic"
description: |-
  Manages ACI Model Objects via REST API calls. This resource can only manage a single API object and its direct children. It is able to read the state and therefore reconcile configuration drift.
---

# aci_rest_managed #

Manages ACI Model Objects via REST API calls. This resource can only manage a single API object and its direct children. It is able to read the state and therefore reconcile configuration drift.

## Example Usage ##

The configuration snippet below creates a Tenant object.

```terraform
resource "aci_rest_managed" "example_tenant" {
  dn         = "uni/tn-EXAMPLE_TENANT"
  class_name = "fvTenant"
  content = {
    name  = "EXAMPLE_TENANT"
    descr = "Example description"
  }
}
```

The configuration snippet below creates a Management Connectivity Preference object with an annotation overwrite.

```terraform
resource "aci_rest_managed" "example_management_connectivity" {
  dn         = "uni/fabric/connectivityPrefs"
  class_name = "mgmtConnectivityPrefs"
  annotation = "orchestrator:example"
  content = {
    interfacePref = "ooband"
  }
}
```

The configuration snippet below creates a Tenant object with a VRF as child with annotation overwrites.

```terraform
resource "aci_rest_managed" "example_tenant_with_child" {
  dn         = "uni/tn-EXAMPLE_TENANT_WITH_CHILD"
  class_name = "fvTenant"
  content = {
    name = "EXAMPLE_TENANT_WITH_CHILD"
    annotation = "orchestrator:class"
  }
  child {
    rn         = "ctx-VRF1"
    class_name = "fvCtx"
    content = {
      name = "VRF1"
      annotation = "orchestrator:child"
    }
  }
}
```

The configuration snippet below demonstrates using content_on_destroy to modify a Tenant object during destroy instead of deleting it.

```terraform
resource "aci_rest_managed" "tenant_with_cleanup" {
  dn         = "uni/tn-PRODUCTION_TENANT"
  class_name = "fvTenant"
  content = {
    name  = "PRODUCTION_TENANT"
    descr = "Production tenant for applications"
  }
  
  child {
    rn         = "ap-web"
    class_name = "fvAp"
    content = {
      name  = "web"
      descr = "Web application profile"
    }
  }
  
  child {
    rn         = "ap-database"
    class_name = "fvAp"
    content = {
      name  = "database"
      descr = "Database application profile"
    }
  }
  
  child {
    rn         = "ctx-production"
    class_name = "fvCtx"
    content = {
      name  = "production"
      descr = "Production VRF"
    }
  }
  
  # Content to apply during terraform destroy
  content_on_destroy = {
    descr = "Decommissioned - Archived Tenant"
  }
  
  # Children to modify during destroy (others will be deleted)
  child_on_destroy {
    rn         = "ap-web"
    class_name = "fvAp"
    content = {
      descr = "Archived - Web application"
    }
  }
  
  child_on_destroy {
    rn         = "ctx-production"
    class_name = "fvCtx"
    content = {
      descr = "Archived - Production VRF"
    }
  }
  
  # Note: ap-database is not listed in child_on_destroy, so it will be deleted normally
}
```

## Schema ##

### Required ###

* `class_name` - (string) Which class object is being created.

  !> Make sure there is no colon `:` in the classname

* `dn` - (string) Distinguished Name of the object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.

### Read-Only ###

* `id` - (string) The Distinguished Name of the object.

### Optional ###

* `annotation` - (string) Annotation for the class object that is being created.
  - Default: `orchestrator:terraform`
* `content` - (map) A map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.

  !> The annotation property is not allowed to be set in the content map of the resource.

* `escape_html` - (boolean) Enable escaping of HTML characters when encoding the JSON payload.
  - Default: `true`

* `content_on_destroy` - (map) A map of key-value pairs to be applied to the parent object during terraform destroy operations. This allows modifying the object with cleanup values instead of deleting it. When this attribute is specified, the object will be updated with these values rather than being deleted from ACI.

!> The annotation property is not allowed to be set in content_on_destroy.

~> Note: child_on_destroy is only processed when content_on_destroy is also specified. If content_on_destroy is not present, child_on_destroy will be ignored and all children will be deleted normally.

~> When adding content_on_destroy to an existing resource, Terraform will show this attribute being added in the plan. This is expected behavior and will not trigger any API calls. The attribute will be used only during terraform destroy.

* `child` - (block) A nested block representing a child object. Multiple child blocks can be specified.

  ~> Omitting child blocks from the configuration causes any existing child blocks present in the state to be removed.

  #### Required ####

  * `rn` - (string) The Relative Name of the child object.
  * `class_name` - (string) Class name of child object.

  #### Optional ###

  * `content` - (map) A map of key-value pairs which represents the attributes for the child object. When annotation is provided in the content of the child it will take precedence over the annotation set at the parent level.

* `child_on_destroy` - (block) A nested block representing a child object to be modified during terraform destroy operations. Multiple child_on_destroy blocks can be specified. Children listed here will be updated with the specified content instead of being deleted. Children not listed in child_on_destroy will be deleted normally during destroy.

!> child_on_destroy only takes effect when content_on_destroy is also specified. Without content_on_destroy, all children will be deleted using the standard deletion process.

~> Only children that have both matching rn and class_name in child_on_destroy will be modified during destroy. All other children will be deleted.

  #### Required ####

  * `rn` - (string) The Relative Name of the child object. Must match the rn of an existing child in the child block.
  * `class_name` - (string) Class name of child object. Must match the class_name of an existing child in the child block.

  #### Optional ###

  * `content` - (map) A map of key-value pairs which represents the attributes to be applied to the child object during destroy.

## Importing ##

An existing object can be [imported](https://www.terraform.io/docs/import/index.html) into this resource via its distinguished name (DN), via the following command:

```
terraform import aci_rest_managed.example_tenant uni/tn-{name}
```

When children need to be imported they must be specified by appending them to the distinguished name (DN) with the below format:

```
terraform import aci_rest_managed.example_tenant uni/tn-{name}:{child-rn-1},{child-rn-N}
```

Starting in Terraform version 1.5, an existing object can be imported using [import blocks](https://developer.hashicorp.com/terraform/language/import) via the following configuration:

```
import {
  id = "uni/tn-{name}"
  to = aci_rest_managed.example_tenant
}
```
