// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"testing"
	"regexp"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
		{{- $parentClassName := capitalize .class_name }}
func TestAccDataSource{{$.resourceClassName}}{{if .class_name}}With{{capitalize .class_name}}{{end}} (t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{$.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testConfig{{$.resourceClassName}}DataSource{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- range $key, $value := $.datasource_required}}
						{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
						{{- else }}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
						{{- end }}
					{{- end}}
					{{- end}}
					{{- range $key, $value := $.default}}
					{{- if eq $key "version_mismatch" }}
        					{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t, "{{$version}}", ">",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if not (definedInList $.exclude_attributes $attributeName) }}
						{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							  {{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							  {{- end}}
						  {{- else}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
						  {{- end}}
					    {{- end}}
					  {{- end}}),
					{{- end}}
					{{- else}}
					{{- if not (definedInList $.exclude_attributes $key) }}
						{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
							{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
						{{- end}}
					  {{- end}}
					{{- end}}
					{{- end}}
					{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("data.aci_{{$.resourceName}}.test", "{{$key}}"),
					{{- end}}
				),
			},
			{
				Config:      testConfig{{$.resourceClassName}}NotExisting{{if .class_name}}{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectError: regexp.MustCompile("Failed to read aci_{{$.resourceName}} data source"),
			},
		},
	})
}
	{{- end}}
{{- else}}
func TestAccDataSource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testConfig{{.resourceClassName}}DataSource{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- range $key, $value := .min}}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
					{{- end}}
					{{- range $key, $value := .all}}
						{{- if eq $key "version_mismatch" }}
        					{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t, "{{$version}}", ">",{{- range $attributeName, $attributeValue := $attributes}}
																{{- if not (definedInList $.exclude_attributes $attributeName) }}
								{{- if (isInterfaceSlice $attributeValue)}}
							resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
								{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
							{{- else}}
							resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
							{{- end}}
						{{- end}}
        			{{- end }}),
				{{- end }}
			{{- else }}
			{{- if not (definedInList $.exclude_attributes $key) }}
						{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
							{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
						{{- end}}
					{{- end}}
					{{- end}}
					{{- end}}
				),
			},
			{
				Config:      testConfig{{.resourceClassName}}NotExisting{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectError: regexp.MustCompile("Failed to read aci_{{$.resourceName}} data source"),
			},
		},
	})
}
{{- end}}

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
		{{- $parentClassName := capitalize .class_name }}
const testConfig{{$.resourceClassName}}DataSource{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}  = testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}  + `
data "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  {{- range $key, $value := $.datasource_required}}
		{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}]
}
`

const testConfig{{$.resourceClassName}}NotExisting{{if .class_name}}{{capitalize .class_name}}{{end}}  = testConfig{{if .class_name}}{{capitalize .class_name}}{{else}}{{$.resourceClassName}}{{end}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
data "aci_{{$.resourceName}}" "test_non_existing" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  {{- range $key, $value := $.datasource_non_existing}}
		{{- if and (eq $key "target_dn") (not (hasPrefix $value "topology/")) }}
  {{$key}} = "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}_not_existing"
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
}
`
	{{- end}}
{{- else}}
const testConfig{{.resourceClassName}}DataSource = testConfig{{.resourceClassName}}All + `
data "aci_{{$.resourceName}}" "test" {
  {{- range $key, $value := $.datasource_required}}
		{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0 false}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`

const testConfig{{$.resourceClassName}}NotExisting = testConfig{{.resourceClassName}}All + `
data "aci_{{$.resourceName}}" "test_non_existing" {
  {{- range $key, $value := $.datasource_non_existing}}
		{{- if and (eq $key "target_dn") (not (hasPrefix $value "topology/")) }}
  {{$key}} = "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}_not_existing"
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
}
`
{{- end}}