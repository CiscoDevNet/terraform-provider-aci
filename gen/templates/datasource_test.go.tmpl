// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{- if .parents}}
	{{- range .parents}}
func TestAccDataSource{{$.resourceClassName}}With{{capitalize .class_name}} (t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testConfig{{$.resourceClassName}}DataSourceDependencyWith{{capitalize .class_name}} ,
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- range $key, $value := $.datasource_required}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
					{{- range $key, $value := $.default}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
				),
			},
		},
	})
}
	{{- end}}
{{- else}}
func TestAccDataSource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testConfig{{.resourceClassName}}DataSource,
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
					{{- range $key, $value := .all}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
				),
			},
		},
	})
}
{{- end}}

{{- if .parents}}
	{{- range .parents}}
const testConfig{{$.resourceClassName}}DataSourceDependencyWith{{capitalize .class_name}}  = testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}}  + `
data "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
  {{- range $key, $value := $.datasource_required}}
  {{$key}} = "{{$value}}"
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`
	{{- end}}
{{- else}}
const testConfig{{.resourceClassName}}DataSource = testConfig{{.resourceClassName}}All + `
data "aci_{{$.resourceName}}" "test" {
  {{- range $key, $value := $.datasource_required}}
  {{$key}} = "{{$value}}"
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`
{{- end}}