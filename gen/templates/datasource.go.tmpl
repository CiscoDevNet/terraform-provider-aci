// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/ciscoecosystem/aci-go-client/v2/client"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	{{- if .HasBitmask}}
	"github.com/hashicorp/terraform-plugin-framework/types"
	{{- end}}
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &{{.ResourceClassName}}DataSource{}

func New{{.ResourceClassName}}DataSource() datasource.DataSource {
	return &{{.ResourceClassName}}DataSource{}
}

// {{.ResourceClassName}}DataSource defines the data source implementation.
type {{.ResourceClassName}}DataSource struct {
	client *client.Client
}

func (d *{{.ResourceClassName}}DataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	tflog.Trace(ctx, "start schema of datasource: aci_{{.ResourceName}}")
	resp.TypeName = req.ProviderTypeName + "_{{.ResourceName}}"
	tflog.Trace(ctx, "end schema of datasource: aci_{{.ResourceName}}")
}

func (d *{{.ResourceClassName}}DataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The {{.ResourceName}} datasource for the '{{.PkgName}}' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinquised name (DN) of the {{getResourceNameAsDescription .ResourceName}} object.",
			},
			{{- if .HasParent}}
			"parent_dn": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The distinquised name (DN) of the parent object.",
			},
			{{- end}}
			{{- range .Properties}}
				{{- if .IsNaming}}
			"{{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: `{{.Comment}}`,
			},{{else if eq .ValueType "bitmask"}}
			"{{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}": schema.SetAttribute{
				Computed:            true,
				MarkdownDescription: `{{.Comment}}`,
				ElementType: types.StringType,
			},{{else}}
			"{{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: `{{.Comment}}`,
			},{{- end}}
			{{- end}}
			{{- range .Children}}
			"{{.ResourceName}}": schema.SetNestedAttribute{
				MarkdownDescription: `{{.Comment}}`,
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
					{{- range .Properties}}
						{{- if eq .ValueType "bitmask"}}
						"{{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}": schema.SetAttribute{
							Computed:            true,
							MarkdownDescription: `{{.Comment}}`,
							ElementType: types.StringType,
						},{{else}}
						"{{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: `{{.Comment}}`,
						},{{- end}}
					{{- end}}
					},
				},
			},
			{{- end}}
		},
	}
}

func (d *{{.ResourceClassName}}DataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	tflog.Trace(ctx, "start configure of datasource: aci_{{.ResourceName}}")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
	tflog.Trace(ctx, "end configure of datasource: aci_{{.ResourceName}}")
}

func (d *{{.ResourceClassName}}DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	tflog.Trace(ctx, "start read of datasource: aci_{{.ResourceName}}")
	var data *{{.ResourceClassName}}ResourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	set{{.ResourceClassName}}Id(ctx, data)

	tflog.Trace(ctx, fmt.Sprintf("read of datasource aci_{{.ResourceName}} with id '%s'", data.Id.ValueString()))

	messageMap := set{{.ResourceClassName}}Attributes(ctx, d.client, data)
	if messageMap != nil {
		resp.Diagnostics.AddError(messageMap.(map[string]string)["message"], messageMap.(map[string]string)["messageDetail"])
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Trace(ctx, "end read of datasource: aci_{{.ResourceName}}")
}
