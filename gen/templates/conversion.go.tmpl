// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/ciscoecosystem/aci-go-client/v2/container"
)

{{ range .Resources }}
func create{{ .ResourceClassName }}(attributes map[string]interface{}) map[string]interface{} {
	ctx := context.Background()
	var diags diag.Diagnostics
	data := &provider.{{ .ResourceClassName }}ResourceModel{}

	{{- range .Properties }}
	data.{{ .Name }} = types.StringValue(attributes["{{ .Name | .SnakeCaseName }}"].(string))
	{{- end }}

	{{- range .Children }}
	plan{{ .ResourceClassName }} := convertTo{{ .ResourceClassName }}{{ $.ResourceClassName }}(attributes["{{ .ResourceName | .SnakeCaseName }}"])
	state{{ .ResourceClassName }} := plan{{ .ResourceClassName }}
	{{- end }}

	new{{ .ResourceClassName }} := provider.Get{{ .ResourceClassName }}CreateJsonPayload(ctx, &diags, data{{- range .Children }}, plan{{ .ResourceClassName }}, state{{ .ResourceClassName }}{{- end }})

	payload_bin := new{{ .ResourceClassName }}.EncodeJSON(container.EncodeOptIndent("", "  "))
	payload, err := parseCustomJSON(payload_bin)
	if err != nil {
		log.Fatalf("Error unmarshalling JSON: %v\n", err)
	}

	provider.Set{{ .ResourceClassName }}Id(ctx, data)
	attrs := payload["{{ .PkgName }}"].(map[string]interface{})["attributes"].(map[string]interface{})
	attrs["dn"] = data.Id.ValueString()
	if attributes["status"] != nil {
		attrs["status"] = attributes["status"]
	}

	return payload
}

{{ range .Children }}
func convertTo{{ .ResourceClassName }}{{ $.ResourceClassName }}(items interface{}) []provider.{{ .ResourceClassName }}{{ $.ResourceClassName }}ResourceModel {
	var planItems []provider.{{ .ResourceClassName }}{{ $.ResourceClassName }}ResourceModel
	if items, ok := items.([]interface{}); ok {
		for _, item := range items {
			itemMap := item.(map[string]interface{})
			planItems = append(planItems, provider.{{ .ResourceClassName }}{{ $.ResourceClassName }}ResourceModel{
				{{- range .Properties }}
				{{ .Name }}: types.StringValue(itemMap["{{ .Name | .SnakeCaseName }}"].(string)),
				{{- end }}
			})
		}
	}
	return planItems
}
{{ end }}

{{ end }}
