// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"testing"
	"regexp"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
		{{- $parentClassName := capitalize .class_name }}
func TestAccResource{{$.resourceClassName}}With{{capitalize .class_name}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}}AllowExisting,
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.#", "{{len $value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}}AllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}}AllowExisting,
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.#", "{{len $value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test_2", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}AllDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.all}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := $.all}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
				{{- if ne $key "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- else}}
					{{- range $dkey, $dvalue := $.default}}
						{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$dkey}}", "{{$dvalue}}"),
						{{- end}}
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{$.resourceClassName}}ResetDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Import testing
			{
				ResourceName:      "aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}",
				ImportState:       true,
        		ImportStateVerify: true,
			},
		{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{$.resourceClassName}}ChildrenDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
			{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
						{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
			{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
			{{- end}}
			{{- range $key, $value := $.children}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index}}"),		
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
				{{- end}}
			{{- end}}
				),
			},
			// Import testing with children
			{	
				ResourceName:      "aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update with children removed from config
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveFromConfigDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
						{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
			{{- if eq (len $value) 1}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "1"),
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "2"),
			{{- end}}
		{{- end}}
				),
			},
			// Update with children first child removed
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveOneDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if $child.deletable_child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "0"),
				{{- else}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 0}}"),		
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "1"),
				{{- end}}
			{{- else}}
				{{- $child := index $value 1 }}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1}}"),
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "1"),
			{{- end}}
		{{- end}}
				),
			},
			// Update with all children removed
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveAllDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if $child.deletable_child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "0"),
				{{- else}}
					{{- range $child_key, $child_value := $child}}
						{{- if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "1"),
				{{- end}}
			{{- else}}
				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "0"),
			{{- end}}
		{{- end}}
				),
			},
		{{- end}}
		},
	})
}	{{- end}}

{{- else}}
func TestAccResource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}MinAllowExisting,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}MinAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}MinAllowExisting,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}Min,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.default}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .default}}
		{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
			{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
			{{- end}}
		{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}All,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .all}}
		{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
			{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
			{{- end}}
		{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{.resourceClassName}}Min,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .all}}
		{{- if ne $key "annotation"}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- else}}
			{{- range $dkey, $dvalue := $.default}}
				{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$dkey}}", "{{$dvalue}}"),
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{.resourceClassName}}Reset,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
	{{- end}}
	{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
		{{- if not $contains}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Import testing
			{
				ResourceName:      "aci_{{$.resourceName}}.test",
				ImportState:       true,
        		ImportStateVerify: true,
			},
	{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{.resourceClassName}}Children,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
		{{- end}}
				),
			},
			// Update with children removed from config
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveFromConfig,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
		{{- end}}
				),
			},
			// Update with children first child removed
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveOne,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if $child.deletable_child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "0"),
				{{- else}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1}}"),
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "1"),
				{{- end}}
			{{- else}}
				{{- $child := index $value 1 }}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1}}"),
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "1"),
			{{- end}}
		{{- end}}
				),
			},
			// Update with all children removed
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveAll,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if $child.deletable_child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "0"),
				{{- else}}
					{{- range $child_key, $child_value := $child}}
						{{- if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "1"),
				{{- end}}
			{{- else}}
				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "0"),
			{{- end}}
		{{- end}}
				),
			},
	{{- end}}
		},
	})
}
{{end}}

{{ $dependencies := false }}
{{- if ne .targets nil }}
{{ $dependencies = true }}
{{ $testIndex := 0 }}
const testDependencyConfig{{$.resourceClassName}} = `
	{{- range $index, $target := .targets}}{{if not $target.static}}
		{{- if ne .parent_dependency "" }}
resource "aci_{{$target.target_resource_name}}" "test_{{$target.target_resource_name}}_{{mod $testIndex 2}}" {
  {{$target.parent_dn_key}} = {{$target.parent_dependency_dn_ref}}
  			{{- range $key, $value := $target.properties}}
  {{$key}} = "{{$value}}"
  			{{- end}}
}{{$testIndex = add $testIndex 1}}

		{{- end }}
	{{- end }}{{- end }}
`
{{- end }}

{{ $childDependencies := false }}
{{ $testIndex := 0 }}
{{- if ne .child_targets nil }}
{{ $childDependencies = true }}
const testChildDependencyConfig{{$.resourceClassName}} = `
	{{- range $index, $target := .child_targets}}{{if not $target.static}}
		{{- if ne .parent_dependency "" }}
resource "aci_{{$target.target_resource_name}}" "test_{{$target.target_resource_name}}_{{mod $testIndex 2}}"{
  {{$target.parent_dn_key}} = {{$target.parent_dependency_dn_ref}}
  			{{- range $key, $value := $target.properties}}
  {{$key}} = "{{$value}}"
  			{{- end}}
}{{$testIndex = add $testIndex 1}}

		{{- end }}
	{{- end }}{{- end }}
`
{{- end }}

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
		{{ $parentClassName := capitalize .class_name }}
const testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}}AllowExisting = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "allow_test" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
resource "aci_{{$.resourceName}}" "allow_test_2" {
  parent_dn = {{.parent_dn}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  depends_on = [aci_{{$.resourceName}}.allow_test]
}
`

const testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}AllDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.all}}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (substract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ResetDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (substract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
		{{- end}}
}
`

		{{- if $.children}}
const testConfig{{$.resourceClassName}}ChildrenDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
  			{{- range $key, $value := $.resource_required}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
  			{{- end}}
  			{{- range $key, $value := $.children}}{{$index := 0}}
  {{$key}} = [
				{{- range $child := $value}}
	{
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index}}
	  {{$child_key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}		
						{{- else if ne $child_key "deletable_child"}}
	  {{$child_key}} = "{{$child_value}}"
	  					{{- end}}
					{{- end}}{{ $index = add $index 1 }}
	},
				{{- end}}
  ]
  			{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveFromConfigDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveOneDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = [ {{$child := index $value 1 }}
	{
	  			{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil 1}}
	  {{$child_key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  				{{- else }}
	  {{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
	},
  ]
			{{- end}}
		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveAllDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = []
			{{- end}}
		{{- end}}
}
`
		{{- end}}
	{{- end}}
{{else}}

const testConfig{{.resourceClassName}}MinAllowExisting = `
resource "aci_{{$.resourceName}}" "allow_test" {
	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
	{{- end}}
}
resource "aci_{{$.resourceName}}" "allow_test_2" {
	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
	{{- end}}
  depends_on = [aci_{{$.resourceName}}.allow_test]
}
`

const testConfig{{.resourceClassName}}Min = `
resource "aci_{{$.resourceName}}" "test" {
	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
	{{- end}}
}
`

const testConfig{{.resourceClassName}}All = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
  	{{- range $key, $value := $.all}}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (substract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
  	{{- end}}
}
`

const testConfig{{.resourceClassName}}Reset = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
		{{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
  	{{- range $key, $value := $.default}}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (substract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
  	{{- end}}
}
`

	{{- if $.children}}
const testConfig{{.resourceClassName}}Children = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}{{$index := 0}}
  {{$key}} = [
			{{- range $child := $value}}
	{
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index}}
	  {{$child_key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}		
					{{- else if ne $child_key "deletable_child"}}
	  {{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
	},
			{{- end}}
  ]
  		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveFromConfig = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveOne = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = [ {{$child := index $value 1 }}
	{
	  			{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil 1}}
	  {{$child_key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  				{{- else }}
	  {{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
	},
  ]
			{{- end}}
		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveAll = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0}}
  {{$key}} = {{if containsString $attributeValue "."}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}
 {{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = []
			{{- end}}
		{{- end}}
}
`

	{{- end}}
{{- end}}