// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"testing"
	"regexp"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{$single_nested_children := checkDeletableChild $.children}}
{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
		{{- $parentClassName := capitalize .class_name }}
func TestAccResource{{$.resourceClassName}}{{if .class_name}}With{{capitalize .class_name}}{{end}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
PreCheck: func() { testAccPreCheck(t, "{{.test_type}}", "{{$.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}AllowExisting{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
				{{- else }}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
					{{- end }}
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- if not (definedInList $.exclude_attributes $attributeName) }}
							{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}", "{{$attributeValue}}"),
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
				{{- end }}
				{{- end }}),
				{{- end }}
			{{- else}}
			{{- if not (definedInList $.exclude_attributes $key) }}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.#", "{{len $value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end }}
		   {{- end }}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{$.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}AllowExisting{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{$.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}AllowExisting{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
				{{- else }}
				    {{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
					{{- end }}
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- if not (definedInList $.exclude_attributes $attributeName) }}
							{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}", "{{$attributeValue}}"),
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
				{{- end }}
				{{- end }}),
				{{- end }}
			  {{- else}}
			{{- if not (definedInList $.exclude_attributes $key) }}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.#", "{{len $value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end}}
			 {{- end}}
		   {{- end }}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test_2", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{$.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
				{{- else }}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- if not (definedInList $.exclude_attributes $attributeName) }}
				{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
				{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
			{{- end}}
			{{- end}}
			{{- end}}),
			{{- end}}
			{{- else}}
			{{- if not (definedInList $.exclude_attributes $key) }}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end}}
			{{- end}}
		  {{- end}}		
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}All{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
				{{- else }}
					{{- if not (definedInList $.exclude_attributes $key) }}
					   resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
					{{- end }}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.all}}
		{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
																{{- if not (definedInList $.exclude_attributes $attributeName) }}
			{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
				{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
				{{- end}}
			{{- end}}
        			{{- end }}),
				{{- end }}
		{{- else }}
        {{- if not (definedInList $.exclude_attributes $key) }}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
        {{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
			{{- else }}
					{{- if not (definedInList $.exclude_attributes $key) }}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
					{{- end}}
			{{- end }}
		{{- end}}
		{{- range $key, $value := $.all}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
				{{- if ne $key "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- else}}
					{{- range $dkey, $dvalue := $.default}}
						{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$dkey}}", "{{$dvalue}}"),
						{{- end}}
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{$.resourceClassName}}Reset{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
			{{- else }}
				{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end }}
		{{- end}}
	{{- if $.resource_required }}
		{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						{{- if not (definedInList $.exclude_attributes $attributeName) }}
				{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
					{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
				{{- end}}
				{{- end}}
			{{- end}}
			{{- end}}),
			{{- end}}
			{{- else}}
			{{- $contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
            {{- if not (definedInList $.exclude_attributes $key) }}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
			{{- end}}
		{{- end}}
        {{- end}}
        {{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
				),
			},
			// Import testing
			{
				ResourceName:      "aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}",
				ImportState:       true,
        		ImportStateVerify: true,
				{{- if $.exclude_attributes }}
				ImportStateVerifyIgnore: []string{
                {{- range $.exclude_attributes }}"{{.}}",{{- end}}
            	},
				{{- end}}
			},
		{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{$.resourceClassName}}Children{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
			{{- else }}
            {{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
        {{- end }}
			{{- range $key, $value := $.default}}
				{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						{{- if not (definedInList $.exclude_attributes  $attributeName) }}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
					{{- end}}
				  {{- end}}
				{{- end}}
			{{- end}}),
            {{- end }}
			{{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
				{{- if not (definedInList $.exclude_attributes $key) }}
					{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
						{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
					{{- end}}
				{{- end}}
			  {{- end }}
			{{- end}}
            {{- end }}
			{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
			{{- end}}
			{{- range $key, $value := $.children}}
				{{- if eq (len $value) 1}}
					{{- range $child_index, $child := $value}}
						{{- range $child_key, $child_value := $child}}
							{{- if eq $child_key "children"}}
								{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) -}}
								{{- template "testNestedChildren" $newCtx }}
							{{- else if eq $child_key "version_mismatch" }}
								{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
					{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
							{{- if eq $child_key "target_dn"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{getTestTargetDn  $.child_targets $key $child_value false nil $child_index false }}"),	
					{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}	
							{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				  {{- end}}
				{{- else}}
					{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key "." $child_index) "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildren" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
							{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
							{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
								{{- end}}
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- end}}
				),
			},
			// Refresh State before import testing to ensure that the state is up to date
			{
				RefreshState: true,
				ExpectNonEmptyPlan: {{.class_in_parent}},
			},
			// Import testing with children
			{	
				ResourceName:      "aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}",
				ImportState:       true,
				ImportStateVerify: true,
				{{- if $.exclude_attributes }}
				ImportStateVerifyIgnore: []string{
                {{- range $.exclude_attributes }}"{{.}}",{{- end}}
            	},
				{{- end}}
			},
			// Update with children removed from config
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveFromConfig{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- if $.resource_required }}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
					{{- end}}
				{{- end}}
			{{- end}}),
			{{- end}}
				{{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "{{len $value}}"),
						{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		  {{- end}}
		{{- end}}
        {{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenRemovedFromConfig" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
					{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),				
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),	
					{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}	
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
				{{- end}}
			  {{- end}}
			{{- else}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key "." $child_index) "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
						{{- template "testNestedChildrenRemovedFromConfig" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
								{{- end}}
							{{- end}}
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "2"),
			{{- end}}
		{{- end}}
				),
			},
			// Update with children first child removed
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveOne{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
						{{- end}}),
					{{- end}}
				{{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
			{{- end}}
		  {{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenWithFirstChilRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
					{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 0 false}}"),	
					{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}	
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				{{- $child := index $value 1 }}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key "." 0) "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
						{{- template "testNestedChildrenWithFirstChilRemoved" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1 false}}"),
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "1"),
			{{- end}}
		{{- end}}
				),
		{{- if $single_nested_children}}
				ConfigStateChecks: []statecheck.StateCheck{
			{{- range $key, $value := $.children}}
				{{- $newCtx := emptyChild -}}
				{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
					{{- if $child.deletable_child}}
					statecheck.ExpectKnownValue("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}",
						tfjsonpath.New("{{$key}}"),
						knownvalue.MapExact(
							map[string]knownvalue.Check{
						{{- range $child_key, $child_value := $child}}
							{{- if and (ne $child_key "deletable_child") (ne $child_key "version_mismatch") (ne $child_key "children") }}
								"{{$child_key}}": knownvalue.Null(),
							{{- else if eq $child_key "version_mismatch"}}
								{{- range $version, $attributes := $child_value }}
									{{- range $attributeName, $attributeValue := $attributes}}
										"{{$attributeName}}" : knownvalue.Null(),
									{{- end}}
								{{- end}}
							{{- else if eq $child_key "children"}}
								{{- range $key, $value := $child_value}}
									{{- if gt (len $value) 1}}
										"{{$key}}": knownvalue.Null(),
									{{- end}}
								{{- end}}
							{{- end}}
						{{- end}}
							},
						),
					),
					{{- end}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- if checkDeletableChild $child_value }}
							{{- $newCtx = addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print "tfjsonpath.New(\"" $key "\")") "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
						{{- end}}
					{{- end}}
				{{- end}}
				{{- end}}
				{{- template "singleNestedChildrenDeletionCheck" $newCtx }}
			{{- end}}
				},

		{{- end}}
			},
			// Update with all children removed
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveAll{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
					{{- end}}),
					{{- end}}
				{{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenAllChildrenRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.#", "{{len $attributeValue}}"),
					{{- range $index, $subvalue := $attributeValue}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),							
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}.#", "0"),
			{{- end}}
		{{- end}}
				),
		{{- if $single_nested_children}}
				ConfigStateChecks: []statecheck.StateCheck{
			{{- range $key, $value := $.children}}
				{{- $newCtx := emptyChild -}}
				{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
					{{- if $child.deletable_child}}
					statecheck.ExpectKnownValue("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}",
						tfjsonpath.New("{{$key}}"),
						knownvalue.MapExact(
							map[string]knownvalue.Check{
						{{- range $child_key, $child_value := $child}}
							{{- if and (ne $child_key "deletable_child") (ne $child_key "version_mismatch") (ne $child_key "children")}}
								"{{$child_key}}": knownvalue.Null(),
							{{- else if eq $child_key "version_mismatch"}}
								{{- range $version, $attributes := $child_value }}
									{{- range $attributeName, $attributeValue := $attributes}}
										"{{$attributeName}}" : knownvalue.Null(),
									{{- end}}
								{{- end}}	
								{{- else if eq $child_key "children"}}
								{{- range $key, $value := $child_value}}
									{{- if gt (len $value) 1}}
										"{{$key}}": knownvalue.Null(),
									{{- end}}
								{{- end}}
							{{- end}}
						{{- end}}
							},
						),
					),
					{{- end}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- if checkDeletableChild $child_value }}
								{{- $newCtx = addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print "tfjsonpath.New(\"" $key "\")") "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
							{{- end}}
						{{- end}}
					{{- end}}
					{{- end}}
				{{- template "singleNestedChildrenDeletionCheck" $newCtx }}
			{{- end}}
				},

		{{- end}}
			},
		{{- end}}
		{{- if $.custom_type}}
			// Update with minimum config and custom type semantic equivalent values
			{
				Config: testConfig{{$.resourceClassName}}CustomTypeDependencyWith{{capitalize .class_name}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
			{{- range $key, $value := $.custom_type}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0 false}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
				),
			},
		{{- end}}
		{{- if $.legacy_attributes}}
			// Update with legacy attribute config
			{
				Config: testConfig{{$.resourceClassName}}LegacyAttributesWith{{capitalize .class_name}}{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
			},
		{{- end}}
		},
		CheckDestroy: testCheckResourceDestroy,
	})
}	{{- end}}
{{- else}}
func TestAccResource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}MinAllowExisting{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
					{{- if eq $key "version_mismatch" }}
        				{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}", "{{$attributeValue}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}", "{{$attributeValue}}"),
							{{- end}}),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
					{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}MinAllowExisting,
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}MinAllowExisting{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
					{{- if eq $key "version_mismatch" }}
        				{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$attributeName}}", "{{$attributeValue}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$attributeName}}", "{{$attributeValue}}"),
							{{- end}}),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test", "{{$key}}", "{{$value}}"),
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.allow_test_2", "{{$key}}", "{{$value}}"),
					{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.allow_test", "{{$key}}"),
		{{- end}}
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.class_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}Min{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.default}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .default}}
		{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
					{{- end}}
	  			{{- end}}),
	  		{{- end}}
		{{- else}}
		{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
			{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
			{{- end}}
		{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
	  {{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}All{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .all}}
		{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
																{{- if not (definedInList $.exclude_attributes $attributeName) }}
			{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
				{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
				{{- end}}
			{{- end}}
        			{{- end }}),
				{{- end }}
		{{- else }}
		{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
			{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
			{{- end}}
		{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end }}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{.resourceClassName}}Min{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .all}}
		{{- if ne $key "annotation"}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
																{{- if not (definedInList $.exclude_attributes $attributeName) }}
			{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
				{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
				{{- end}}
			{{- end}}
        			{{- end }}),
				{{- end }}
		{{- else }}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- else}}
			{{- range $dkey, $dvalue := $.default}}
				{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$dkey}}", "{{$dvalue}}"),
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{.resourceClassName}}Reset{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
	{{- end}}
	{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- $contains := definedInMap $attributeName $.resource_required}}
					{{- if not $contains}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
					  {{- end}}
					{{- end}}),
				{{- end}}
			{{- else}}
			{{- $contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
			{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
				{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
				{{- end}}
			{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
	{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
	{{- end}}
				),
			},
			// Import testing
			{
				ResourceName:      "aci_{{$.resourceName}}.test",
				ImportState:       true,
        		ImportStateVerify: true,
			},
	{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{.resourceClassName}}Children{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        			{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- $contains := definedInMap $attributeName $.resource_required}}
							{{- if not $contains}}
							{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
								{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
							{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
							{{- end}}
						   {{- end}}
						{{- end}}),
					{{- end}}
				{{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		  {{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) -}}
							{{- template "testNestedChildrenWithNoParent" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
								{{- range $index, $subvalue := $attributeValue}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
							{{- else}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
						{{- else if (isInterfaceSlice $child_value)}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
						{{- else if ne $child_key "deletable_child"}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end }}
			{{- else}}
				{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key "." $child_index) -}}
							{{- template "testNestedChildrenWithNoParent" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
					{{- range $index, $subvalue := $attributeValue}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end}}{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
				{{- end}}
			{{- end}}
				),
			},
			// Update with children removed from config
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveFromConfig{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        			{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					        {{- $contains := definedInMap $attributeName $.resource_required}}
							{{- if not $contains}}
						{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
						{{- end}}
						{{- end}}),
					{{- end}}
			    {{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) -}}
							{{- template "testNestedChildrenWithNoParentAndChildrenRemovedFromConfig" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
								{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
						{{- else}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
						{{- else if (isInterfaceSlice $child_value)}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
						{{- else if ne $child_key "deletable_child"}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key "." $child_index) -}}
						{{- template "testNestedChildrenWithNoParentAndChildrenRemovedFromConfig" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
								{{- end}}
							{{- end}}
						{{- end}}
					{{- end}}
						resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
			{{- end}}
		{{- end}}
				),
			},
			// Update with children first child removed
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveOne{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        			{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					    {{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
						{{- end}}
					{{- end}}),
					{{- end}}
				{{- else}}
				{{- $contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
				{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
					{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
					{{- end}}
				{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) -}}
							{{- template "testNestedChildrenWithNoParentAndFirstChildRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- if (isInterfaceSlice $attributeValue)}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
								resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
							{{- else}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1 false}}"),
						{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				{{- $child := index $value 1 }}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key "." 0) -}}
						{{- template "testNestedChildrenWithNoParentAndFirstChildRemoved" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1 false}}"),
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "1"),
			{{- end}}
		{{- end}}
				),
		{{- if $single_nested_children}}
				ConfigStateChecks: []statecheck.StateCheck{
			{{- range $key, $value := $.children}}
				{{- $newCtx := emptyChild -}}
				{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
					{{- if $child.deletable_child}}
					statecheck.ExpectKnownValue("aci_{{$.resourceName}}.test",
						tfjsonpath.New("{{$key}}"),
						knownvalue.MapExact(
							map[string]knownvalue.Check{
						{{- range $child_key, $child_value := $child}}
							{{- if and (ne $child_key "deletable_child") (ne $child_key "version_mismatch") (ne $child_key "children") }}
								"{{$child_key}}": knownvalue.Null(),	
							{{- else if eq $child_key "version_mismatch"}}
								{{- range $version, $attributes := $child_value }}
									{{- range $attributeName, $attributeValue := $attributes}}
										"{{$attributeName}}" : knownvalue.Null(),
									{{- end}}
								{{- end}}
								{{- else if eq $child_key "children"}}
								{{- range $key, $value := $child_value}}
									{{- if gt (len $value) 1}}
										"{{$key}}": knownvalue.Null(),
									{{- end}}
								{{- end}}
							{{- end}}
						{{- end}}
							},
						),
					),
					{{- end}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- if eq $child_key "children"}}
							{{- if checkDeletableChild $child_value }}
								{{- $newCtx = addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print "tfjsonpath.New(\"" $key "\")") -}}
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
					{{- end}}
				{{- template "singleNestedChildrenDeletionCheck2" $newCtx }}
			{{- end}}
				},

		{{- end}}
			},
			// Update with all children removed
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveAll{{if $.version_mismatch}} + testConfigDataSourceSystem{{end}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}
				{{- if eq $key "version_mismatch" }}
        			{{- range $version, $attributes := $value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- $contains := definedInMap $attributeName $.resource_required}}
						{{- if not $contains}}
						{{- if (isInterfaceSlice $attributeValue)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}", "{{$attributeValue}}"),
						{{- end}}
					  {{- end}}
					{{- end}}),
				  {{- end}}
				{{- else}}
					{{- $contains := definedInMap $key $.resource_required}}
					{{- if not $contains}}
					{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
						{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- range $index, $key := $.read_only}}
					resource.TestCheckResourceAttrSet("aci_{{$.resourceName}}.test", "{{$key}}"),
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $key) -}}
							{{- template "testNestedChildrenWithNoParentAndAllChildrenRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- if (isInterfaceSlice $attributeValue)}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
								resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
							{{- else}}
							resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end}}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "0"),
			{{- end}}
		{{- end}}
				),
		{{- if $single_nested_children}}
				ConfigStateChecks: []statecheck.StateCheck{
			{{- range $key, $value := $.children}}
				{{- $newCtx := emptyChild -}}
				{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
					{{- if $child.deletable_child}}
					statecheck.ExpectKnownValue("aci_{{$.resourceName}}.test",
						tfjsonpath.New("{{$key}}"),
						knownvalue.MapExact(
							map[string]knownvalue.Check{
						{{- range $child_key, $child_value := $child}}
							{{- if and (ne $child_key "deletable_child") (ne $child_key "version_mismatch") (ne $child_key "children") }}
								"{{$child_key}}": knownvalue.Null(),	
							{{- else if eq $child_key "version_mismatch"}}
								{{- range $version, $attributes := $child_value }}
									{{- range $attributeName, $attributeValue := $attributes}}
										"{{$attributeName}}" : knownvalue.Null(),
									{{- end}}
								{{- end}}
								{{- else if eq $child_key "children"}}
								{{- range $key, $value := $child_value}}
									{{- if gt (len $value) 1}}
										"{{$key}}": knownvalue.Null(),
									{{- end}}
							{{- end}}
							{{- end}}
						{{- end}}
							},
						),
					),
					{{- end}}
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- if checkDeletableChild $child_value }}
							{{- $newCtx = addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print "tfjsonpath.New(\"" $key "\")") -}}
						{{- end}}
					{{- end}}
				{{- end}}
					{{- end}}
				{{- template "singleNestedChildrenDeletionCheck2" $newCtx }}
			{{- end}}
				},

		{{- end}}
			},
	{{- end}}
		{{- if $.custom_type}}
			// Update with minimum config and custom type semantic equivalent values
			{
				Config: testConfig{{$.resourceClassName}}CustomType,
				Check: resource.ComposeAggregateTestCheckFunc(
			{{- range $key, $value := $.custom_type}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false nil 0 false}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
				),
			},
		{{- end}}
		},
		CheckDestroy: testCheckResourceDestroy,
	})
}
{{end}}

{{ $dependencies := false }}
{{- if ne .targets nil }}
{{ $dependencies = true }}
{{ $testIndex := 0 }}
const testDependencyConfig{{$.resourceClassName}} = `
	{{- range $index, $target := .targets}}{{if not $target.static}}
resource "aci_{{$target.target_resource_name}}" "test_{{$target.target_resource_name}}_{{mod $testIndex 2}}" {
  {{- if ne $target.parent_dependency_dn_ref ""}}
  {{$target.parent_dn_key}} = {{$target.parent_dependency_dn_ref}}
  {{- end}}
  			{{- range $key, $value := $target.properties}}
  {{$key}} = "{{$value}}"
  			{{- end}}
}{{$testIndex = add $testIndex 1}}

	{{- end }}{{- end }}
`
{{- end }}

{{ $childDependencies := false }}
{{ $testIndex := 0 }}
{{- if ne .child_targets nil }}
{{ $childDependencies = true }}
const testChildDependencyConfig{{$.resourceClassName}} = `
	{{- range $index, $target := .child_targets}}{{if not $target.static}}
resource "aci_{{$target.target_resource_name}}" "test_{{$target.target_resource_name}}_{{mod $testIndex 2}}"{
  {{- if ne $target.parent_dependency_dn_ref ""}}
  {{$target.parent_dn_key}} = {{$target.parent_dependency_dn_ref}}
  {{- end}}
  			{{- range $key, $value := $target.properties}}
				{{- if contains $value "."}}
  {{$key}} = {{$value}}
				{{- else}}
  {{$key}} = "{{$value}}"
				{{- end}}
  			{{- end}}
}{{$testIndex = add $testIndex 1}}

	{{- end }}{{- end }}
`
{{- end }}

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
		{{ $parentClassName := capitalize .class_name }}
const testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{- end}}AllowExisting = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "allow_test" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
resource "aci_{{$.resourceName}}" "allow_test_2" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  depends_on = [aci_{{$.resourceName}}.allow_test]
}
`

const testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}All{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.all}}
		    {{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue) }}
                    {{- if lt 0 (len $attributeValue) }}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
							{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
							{{- end}}
						{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
                {{- end}}
            {{- end }}
        {{- end }}
			{{- else }}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (subtract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
			{{- end}}
		{{- end}}
}
`

const testConfig{{$.resourceClassName}}Reset{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
{{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					{{- range $attributeName, $attributeValue := $attributes}}
						{{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
							{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
							{{- end}}
						{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
                {{- end}}
            {{- end }}
        {{- end }}
			{{- else }}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (subtract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
		{{- end}}
		{{- end}}
}
`

		{{- if $.children}}
const testConfig{{$.resourceClassName}}Children{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  			{{- range $key, $value := $.resource_required}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
  			{{- end}}
  			{{- range $key, $value := $.children}}{{$index := 0}}
				{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
  {{$key}} = {
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "Indent" "  " -}}
  							{{- template "nestedChildren" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
  	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
						{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$child_key}} = []
				{{- end}}	
						{{- else if ne $child_key "deletable_child"}}{{$attributeValue := getTestTargetValue $.child_targets $child_key $child_value}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  					{{- end}}
					{{- end}}
					{{- end}}{{ $index = add $index 1 }}
  }
				{{- else}}
  {{$key}} = [
					{{- range $child := $value}}
    {
						{{- range $child_key, $child_value := $child}}
							{{- if eq $child_key "children"}}
								{{- $newCtx := addToChild $child_value "Indent" "    " -}}
  								{{- template "nestedChildren" $newCtx }}
							{{- else if eq $child_key "version_mismatch" }}
        						{{- range $version, $attributes := $child_value }}
									{{- range $attributeName, $attributeValue := $attributes}}
      {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        							{{- end }}
								{{- end }}
							{{- else }}
								{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
      {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}		
								{{- else if ne $child_key "deletable_child"}}{{$attributeValue := getTestTargetValue $.child_targets $child_key $child_value}}
      {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  							{{- end}}
							{{- end}}
						{{- end}}{{ $index = add $index 1 }}
    },
					{{- end}}
  ]
  				{{- end}}
			{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveFromConfig{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveOne{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
{{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
{{- end}}
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}{{$index := 0}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = {}
				{{- else}}
  {{$key}} = {
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "Indent" "  " -}}
  							{{- template "nestedChildrenRemoveOne" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
  	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
						{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$child_key}} = []
				{{- end}}		
						{{- else if ne $child_key "deletable_child"}}{{$attributeValue := getTestTargetValue $.child_targets $child_key $child_value}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  					{{- end}}
					{{- end}}
					{{- end}}{{ $index = add $index 1 }}
  }
				{{- end}}
			{{- else}}
  {{$key}} = [ {{$child := index $value 1 }}
	{
	  			{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" "    " -}}
  						{{- template "nestedChildrenRemoveOne" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
  	  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
					{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil 1 false}}
	  {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  					{{- else }}{{$attributeValue := getTestTargetValue $.child_targets $child_key $child_value}}
	  {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  					{{- end}}
					{{- end}}
				{{- end}}
	},
  ]
	{{- end}}
{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveAll{{ if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}{{$index := 0}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = {}
				{{- else }}
  {{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" "  " -}}
  						{{- template "nestedChildrenRemoveAll" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
  	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
					{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$child_key}} = []
				{{- end}}		
					{{- else if ne $child_key "deletable_child"}}{{$attributeValue := getTestTargetValue $.child_targets $child_key $child_value}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  }
				{{- end}}
			{{- else}}
  {{$key}} = []
			{{- end}}
        {{- end}}
}
`
		{{- end}}

		{{if $.custom_type}}
const testConfig{{$.resourceClassName}}CustomTypeDependencyWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
  parent_dn = {{.parent_dn}}
  			{{- range $key, $value := $.custom_type}}
  				{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true $target_classes 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
  			{{- end}}
}
`
		{{- end}}
		{{- if $.legacy_attributes }}
const testConfig{{$.resourceClassName}}LegacyAttributesWith{{capitalize .class_name}} = {{- if $dependencies }} testDependencyConfig{{$.resourceClassName}} + {{- end }}{{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }} {{if .class_name}}testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{if and (ne .parent_dependency_name nil) (ne .parent_dependency_name "")}}{{capitalize .parent_dependency_name }}{{- end }}{{- end}} + {{- end}} `
resource "aci_{{$.resourceName}}" "test{{- if eq $.resourceClassName $parentClassName }}_1{{- end }}" {
			{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
			{{- end}}
			{{- range $key, $value := $.legacy_attributes}}
				{{- if isInterfaceSlice $value}}{{$list_value := index $value 0}}
  {{$key}} = {{if isReference $list_value}}{{$value}}{{else}}["{{$list_value}}"]{{end}}
				{{- else}}
  {{$key}} = {{if isReference $value}}{{$value}}{{else}}"{{$value}}"{{end}}
				{{- end}}
			{{- end}}
			{{- range $key, $value := $.legacy_blocks}}
  {{$key}} {
				{{- range $block_key, $block_value := $value}}
    {{$block_key}} = {{if isReference $block_value}}{{$block_value}}{{else}}"{{$block_value}}"{{end}}
				{{- end}}
  }
			{{- end}}
}
`
		{{- end}}
	{{- end}}
{{else}}

const testConfig{{.resourceClassName}}MinAllowExisting = `
resource "aci_{{$.resourceName}}" "allow_test" {
	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
	{{- end}}
}
resource "aci_{{$.resourceName}}" "allow_test_2" {
	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
	{{- end}}
  depends_on = [aci_{{$.resourceName}}.allow_test]
}
`

const testConfig{{.resourceClassName}}Min = `
resource "aci_{{$.resourceName}}" "test" {
	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
	{{- end}}
}
`

const testConfig{{.resourceClassName}}All = `
resource "aci_{{$.resourceName}}" "test" {
{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
  {{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
  	{{- range $key, $value := $.all}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue) }}
                    {{- if lt 0 (len $attributeValue) }}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
							{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
							{{- end}}
						{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
                {{- end}}
            {{- end }}
        {{- end }}
			{{- else }}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (subtract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
		{{- end}}
  	{{- end}}
}
`

const testConfig{{.resourceClassName}}Reset = `
resource "aci_{{$.resourceName}}" "test" {
{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
  {{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
  	{{- range $key, $value := $.default}}
			{{- if eq $key "version_mismatch" }}
        		{{- range $version, $attributes := $value }}
					{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue) }}
                    {{- if lt 0 (len $attributeValue) }}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
							{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
							{{- end}}
						{{- else}}
  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
                {{- end}}
            {{- end }}
        {{- end }}
			{{- else }}
			{{- if (isInterfaceSlice $value)}}
				{{- if lt 0 (len $value)}}
  {{$key}} = [{{range $index, $subvalue := $value}}{{if lt $index (subtract (len $value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
  {{$key}} = []
				{{- end}}
			{{- else}}
  {{$key}} = "{{$value}}"
			{{- end}}
		{{- end}}
  	{{- end}}
}
`

	{{- if $.children}}
const testConfig{{.resourceClassName}}Children = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}{{$index := 0}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
  {{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" "  " -}}
  						{{- template "nestedChildren" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
		{{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
								{{- else}}
	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
								{{- end}}
							{{- else}}
  	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
					{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$child_key}} = []
				{{- end}}		
					{{- else if ne $child_key "deletable_child"}}
    {{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  }
			{{- else}}
  {{$key}} = [
				{{- range $child := $value}}
	{
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "Indent" "    " -}}
  							{{- template "nestedChildren" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
  	  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
					{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
	  {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}		
						{{- else if ne $child_key "deletable_child"}}
	  {{$child_key}} = "{{$child_value}}"
	  						{{- end}}
						{{- end}}
					{{- end}}{{ $index = add $index 1 }}
	},
				{{- end}}
  ]
			{{- end}}
  		{{- end}}
	  {{- if $childDependencies }}
	  	{{ $testIndex := 0 }}
	  	{{- range $index, $target := .child_targets}}{{if not $target.static}}
  depends_on = [aci_{{$target.target_resource_name}}.test_{{$target.target_resource_name}}_{{mod $testIndex 2}}]
			{{- end}}
		{{- end}}
  	  {{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveFromConfig = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveOne = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}{{$index := 0}}
			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = {}
			{{- else }}
  {{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" "  " -}}
  						{{- template "nestedChildrenRemoveOne" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
	{{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
								{{- else}}
	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
								{{- end}}
							{{- else}}
  	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
					{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$child_key}} = []
				{{- end}}		
					{{- else if ne $child_key "deletable_child"}}
    {{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  }
				{{- end}}
			{{- else}}
  {{$key}} = [ {{$child := index $value 1 }}
	{
	  			{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" "    " -}}
  						{{- template "nestedChildrenRemoveOne" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
  	  {{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
					{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil 1 false}}
	  {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  					{{- else }}
	  {{$child_key}} = "{{$child_value}}"
	  					{{- end}}
					{{- end}}
				{{- end}}
	},
  ]
			{{- end}}
		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveAll = {{- if $childDependencies }} testChildDependencyConfig{{$.resourceClassName}} + {{- end }}`
resource "aci_{{$.resourceName}}" "test" {
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}{{$attributeValue := getTestTargetDn $.targets $.resourceName $value true nil 0 false}}
  {{$key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}{{$index := 0}}
 			{{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$key}} = {}
				{{- else }}
  {{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" "  " -}}
  						{{- template "nestedChildrenRemoveAll" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
	{{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
								{{- else}}
	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
								{{- end}}
							{{- else}}
  	{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
					{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$child_key}} = []
				{{- end}}		
					{{- else if ne $child_key "deletable_child"}}
    {{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  }
				{{- end}}
			{{- else}}
  {{$key}} = []
			{{- end}}
		{{- end}}
}
`
	{{- end}}

	{{if $.custom_type}}
const testConfig{{.resourceClassName}}CustomType = `
resource "aci_{{$.resourceName}}" "test" {
	{{- range $key, $value := $.custom_type}}
  {{$key}} = "{{$value}}"
	{{- end}}
}
`
	{{- end}}
{{- end}}

{{/* Sub Templates */}}

{{/* A sub template for including nested children in the test config. */}}
{{- define "nestedChildren" -}}
  {{- $indent := .TemplateProperties.Indent -}}
  {{- range $key, $value := .childValue}}{{$index := 0}}
  {{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
  {{$indent}}{{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" (print $indent "  ") -}}
  						{{- template "nestedChildren" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
	 		{{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
								{{- else}}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
								{{- end}}
							{{- else}}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$indent}}{{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
	 				{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$indent}}{{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$indent}}{{$child_key}} = []
				{{- end}}		
					{{- else if ne $child_key "deletable_child"}}
    {{$indent}}{{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  {{$indent}}}
			{{- else}}
  {{$indent}}{{$key}} = [
				{{- range $child := $value}}
	{{$indent}}{
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "Indent" (print $indent "    ") -}}
  							{{- template "nestedChildren" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
      {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
					{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
      {{$indent}}{{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}		
						{{- else if ne $child_key "deletable_child"}}
      {{$indent}}{{$child_key}} = "{{$child_value}}"
	  						{{- end}}
						{{- end}}
					{{- end}}{{ $index = add $index 1 }}
	{{$indent}}},
				{{- end}}
  {{$indent}}]
			{{- end}}

{{- end}}
{{- end}}

{{/* A sub template for including nested children by removing only one child that is deletable in the test config. */}}
{{- define "nestedChildrenRemoveOne" -}}
  {{- $indent := .TemplateProperties.Indent -}}
  {{- range $key, $value := .childValue}}{{$index := 0}}
  {{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$indent}}{{$key}} = {}
  {{- else }}
  {{$indent}}{{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" (print $indent "  ") -}}
  						{{- template "nestedChildrenRemoveOne" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
	 {{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
								{{- else}}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
								{{- end}}
							{{- else}}					
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$indent}}{{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
	 				{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$indent}}{{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$indent}}{{$child_key}} = []
				{{- end}}			
					{{- else if ne $child_key "deletable_child"}}
    {{$indent}}{{$child_key}} = "{{$child_value}}"
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  {{$indent}}}
				{{- end}}
			{{- else}}
  {{$indent}}{{$key}} = [ {{$child := index $value 1 }}
	{{$indent}}{
	  			{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" (print $indent "    ") -}}
  						{{- template "nestedChildrenRemoveOne" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
      {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
					{{- else }}
						{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil 1 false}}
      {{$indent}}{{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  					{{- else }}
      {{$indent}}{{$child_key}} = "{{$child_value}}"
	  					{{- end}}
					{{- end}}
				{{- end}}
	{{$indent}}},
  {{$indent}}]
			{{- end}}
{{- end}}
{{- end}}

{{/* A sub template for including nested children by removing all deletable children in the test config. */}}
{{- define "nestedChildrenRemoveAll" -}}
  {{- $indent := .TemplateProperties.Indent -}}
  {{- range $key, $value := .childValue}}{{$index := 0}}
  {{- if eq (len $value) 1}}
				{{- $child := index $value 0}}
				{{- if $child.deletable_child}}
  {{$indent}}{{$key}} = {}
  {{- else }}
  {{$indent}}{{$key}} = {
				{{- range $child_key, $child_value := $child}}
					{{- if eq $child_key "children"}}
						{{- $newCtx := addToChild $child_value "Indent" (print $indent "  ") -}}
  						{{- template "nestedChildrenRemoveAll" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
        					{{- range $version, $attributes := $child_value }}
								{{- range $attributeName, $attributeValue := $attributes}}
	 {{- if (isInterfaceSlice $attributeValue) }}
						{{- if lt 0 (len $attributeValue) }}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [{{range $index, $subvalue := $attributeValue}}{{if lt $index (subtract (len $attributeValue) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}] : null
								{{- else}}
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? [] : null
								{{- end}}
							{{- else}}				
    {{$indent}}{{$attributeName}} = provider::aci::compare_versions(data.aci_system.version.version,">=","{{ $version }}") ? "{{$attributeValue}}" : null
        						{{- end }}
							{{- end }}
						{{- end }}
					{{- else }}
					{{- if eq $child_key "target_dn"}}{{$attributeValue := getTestTargetDn $.child_targets $key $child_value true nil $index false}}
    {{$indent}}{{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}	
	 				{{- else if (isInterfaceSlice $child_value)}}
							{{- if lt 0 (len $child_value)}}
    {{$indent}}{{$child_key}} = [{{range $index, $subvalue := $child_value}}{{if lt $index (subtract (len $child_value) 1)}}"{{$subvalue}}", {{else}}"{{$subvalue}}"{{end}}{{end}}]
				{{- else}}
    {{$indent}}{{$child_key}} = []
				{{- end}}			
					{{- else if ne $child_key "deletable_child"}}{{$attributeValue := getTestTargetValue $.child_targets $child_key $child_value}}
    {{$indent}}{{$child_key}} = {{if isReference $attributeValue}}{{$attributeValue}}{{else}}"{{$attributeValue}}"{{end}}
	  				{{- end}}
				{{- end}}
				{{- end}}{{ $index = add $index 1 }}
  {{$indent}}}
				{{- end}}
			{{- else}}
  {{$indent}}{{$key}} = []
			{{- end}}
{{- end}}
{{- end}}

{{/* A sub template for testing nested children resource attributes */}}
{{- define "testNestedChildren" -}}
  {{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- $resourceClassName := .TemplateProperties.ResourceClassName -}}
  {{- $parentClassName := .TemplateProperties.ParentClassName -}}
  {{- range $key, $value := .childValue}}
  	{{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) -}}
							{{- template "testNestedChildren" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
						{{- else}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
						{{- else if (isInterfaceSlice $child_value)}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else if ne $child_key "deletable_child"}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end }}
			{{- end }}
		{{- else }}
  	{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key "." $child_index) "ResourceClassName" $resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildren" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
{{- end}}

{{- define "testNestedChildrenRemovedFromConfig" -}}
  {{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- $resourceClassName := .TemplateProperties.ResourceClassName -}}
  {{- $parentClassName := .TemplateProperties.ParentClassName -}}
  {{- range $key, $value := .childValue}}
			{{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $inheritedKey "." $key) "ResourceClassName" $resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenRemovedFromConfig" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
						{{- else}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
						{{- else if (isInterfaceSlice $child_value)}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
						{{- else if ne $child_key "deletable_child"}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end }}
			{{- else}}
				{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $inheritedKey "." $key "." $child_index) "ResourceClassName" $resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenRemovedFromConfig" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$key}}.#", "{{len $value}}"),
				{{- end}}
			{{- end}}
        {{- end}}

{{- define "testNestedChildrenWithFirstChilRemoved" -}}
  {{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- $resourceClassName := .TemplateProperties.ResourceClassName -}}
  {{- $parentClassName := .TemplateProperties.ParentClassName -}}
  {{- range $key, $value := .childValue}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
                        {{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) "ResourceClassName" $resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenWithFirstChilRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 0 false}}"),	
						{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}	
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				{{- $child := index $value 1 }}
				{{- range $child_key, $child_value := $child}}
                    {{- if eq $child_key "children"}}
                    	{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key "." 0) "ResourceClassName" $resourceClassName "ParentClassName" $parentClassName -}}
                    	{{- template "testNestedChildrenWithFirstChilRemoved" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.0.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1 false}}"),
					{{- else}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.#", "1"),
			{{- end}}
		{{- end}}
		{{- end}}

{{- define "testNestedChildrenAllChildrenRemoved" -}}
  {{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- $resourceClassName := .TemplateProperties.ResourceClassName -}}
  {{- $parentClassName := .TemplateProperties.ParentClassName -}}
  {{- range $key, $value := .childValue}}
  	{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) "ResourceClassName" $resourceClassName "ParentClassName" $parentClassName -}}
							{{- template "testNestedChildrenAllChildrenRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
						{{- else}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),							
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				resource.TestCheckResourceAttr("{{$resourceName}}{{- if eq $resourceClassName $parentClassName }}_1{{- end }}", "{{$inheritedKey}}.{{$key}}.#", "0"),
			{{- end}}
		{{- end}}
{{- end}}

{{- define "testNestedChildrenWithNoParent" -}}
  {{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- range $key, $value := .childValue}}
			{{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) -}}
							{{- template "testNestedChildrenWithNoParent" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
						composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
						{{- if (isInterfaceSlice $attributeValue)}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
						{{- range $index, $subvalue := $attributeValue}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
						{{- end}}
						{{- else}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
						{{- else if (isInterfaceSlice $child_value)}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
								{{- end}}
						{{- else if ne $child_key "deletable_child"}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
								{{- end}}
						{{- end}}
					{{- end}}
				{{- end }}
			{{- else}}
				{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key "." $child_index) -}}
							{{- template "testNestedChildrenWithNoParent" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
						{{- end}}
					{{- end}}
					{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.#", "{{len $value}}"),
				{{- end}}
			{{- end}}
			{{- end}}

{{- define "testNestedChildrenWithNoParentAndChildrenRemovedFromConfig" -}}
{{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- range $key, $value := .childValue}}
            {{- if eq (len $value) 1}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
                        	{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) -}}
                        	{{- template "testNestedChildrenWithNoParentAndChildrenRemovedFromConfig" $newCtx }}
                        {{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- if (isInterfaceSlice $attributeValue)}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
								resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
							{{- else}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),	
						{{- else if (isInterfaceSlice $child_value)}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
								{{- range $index, $subvalue := $child_value}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}	
						{{- else if ne $child_key "deletable_child"}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
                    {{- if eq $child_key "children"}}
                    	{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key "." $child_index) -}}
                    	{{- template "testNestedChildrenWithNoParentAndChildrenRemovedFromConfig" $newCtx }}
					{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil $child_index false}}"),		
					{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
								{{- end}}
							{{- end}}
						{{- end}}
					{{- end}}
						resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.#", "{{len $value}}"),
				{{- end}}
        	{{- end}}
		{{- end}}

{{- define "testNestedChildrenWithNoParentAndFirstChildRemoved" -}}
{{- $inheritedKey := .TemplateProperties.InheritedKey -}}
{{- $resourceName := .TemplateProperties.ResourceName -}}
        {{- range $key, $value := .childValue}}
			{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
                        	{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) -}}
                        	{{- template "testNestedChildrenWithNoParentAndFirstChildRemoved" $newCtx }}
                        {{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- if (isInterfaceSlice $attributeValue)}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
								resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
							{{- else}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1 false}}"),
						{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				{{- $child := index $value 1 }}
				{{- range $child_key, $child_value := $child}}
                    {{- if eq $child_key "children"}}
                        {{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key "." 0) -}}
                        {{- template "testNestedChildrenWithNoParentAndFirstChildRemoved" $newCtx }}
                    {{- else if eq $child_key "version_mismatch" }}
						{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.0.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}),
								{{- end }}
						{{- else }}
					{{- if eq $child_key "target_dn"}}
	  				resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.0.{{$child_key}}", "{{getTestTargetDn $.child_targets $key $child_value false nil 1 false}}"),
					{{- else}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
							{{- end}}
						{{- end}}
					{{- end}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.#", "1"),
			{{- end}}
		{{- end}}
    {{- end}}

{{- define "testNestedChildrenWithNoParentAndAllChildrenRemoved" -}}
  {{- $inheritedKey := .TemplateProperties.InheritedKey -}}
  {{- $resourceName := .TemplateProperties.ResourceName -}}
  {{- range $key, $value := .childValue}}
  	{{- if eq (len $value) 1}}{{- $child := index $value 0 }}
				{{- if not $child.deletable_child}}
					{{- range $child_key, $child_value := $child}}
						{{- if eq $child_key "children"}}
							{{- $newCtx := addToChild $child_value "ResourceName" $resourceName "InheritedKey" (print $inheritedKey "." $key) -}}
							{{- template "testNestedChildrenWithNoParentAndAllChildrenRemoved" $newCtx }}
						{{- else if eq $child_key "version_mismatch" }}
							{{- range $version, $attributes := $child_value }}
					composeAggregateTestCheckFuncWithVersion(t,"{{$version}}", ">=",{{- range $attributeName, $attributeValue := $attributes}}
							{{- if (isInterfaceSlice $attributeValue)}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.#", "{{len $attributeValue}}"),
							{{- range $index, $subvalue := $attributeValue}}
								resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
							{{- else}}
							resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$attributeName}}", "{{$attributeValue}}"),						
									{{- end }}{{- end }}),
								{{- end }}
						{{- else }}
						{{- if ne $child_key "deletable_child"}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}", "{{$child_value}}"),
						{{- else if (isInterfaceSlice $child_value)}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.#", "{{len $child_value}}"),
							{{- range $index, $subvalue := $child_value}}
					resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.{{$child_key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
			{{- else}}
				resource.TestCheckResourceAttr("{{$resourceName}}", "{{$inheritedKey}}.{{$key}}.#", "0"),
			{{- end}}
		{{- end}}
{{- end}}

{{- define "singleNestedChildrenDeletionCheck" -}}
{{- $inheritedKey := .TemplateProperties.InheritedKey -}}
{{- $resourceName := .TemplateProperties.ResourceName -}}
{{- $resourceClassName := .TemplateProperties.ResourceClassName -}}
{{- $parentClassName := .TemplateProperties.ParentClassName -}}
{{- range $key, $value := .childValue}}
	{{- $newCtx := emptyChild -}}
    {{- if eq (len $value) 1}}{{- $child := index $value 0 }}
        {{- if $child.deletable_child}}
        statecheck.ExpectKnownValue("{{$resourceName}}",
            {{$inheritedKey}}.AtMapKey("{{$key}}"),
            knownvalue.MapExact(
                map[string]knownvalue.Check{
            {{- range $child_key, $child_value := $child}}
                {{- if and (ne $child_key "deletable_child") (ne $child_key "version_mismatch") (ne $child_key "children") }}
                    "{{$child_key}}": knownvalue.Null(),
                {{- else if eq $child_key "version_mismatch"}}
                    {{- range $version, $attributes := $child_value }}
                        {{- range $attributeName, $attributeValue := $attributes}}
                            "{{$attributeName}}" : knownvalue.Null(),
                        {{- end}}
                    {{- end}}
					{{- else if eq $child_key "children"}}
				 {{- range $key, $value := $child_value}}
				 	{{- if gt (len $value) 1}}
						"{{$key}}": knownvalue.Null(),
					{{- end}}
				 {{- end}}
                {{- end}}
            {{- end}}
                },
            ),
        ),
        {{- end}}
	{{- range $child_key, $child_value := $child}}
		{{- if eq $child_key "children"}}
			{{- if checkDeletableChild $child_value }}
				{{- $newCtx = addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $inheritedKey ".AtMapKey(" $key ")") "ResourceClassName" $.resourceClassName "ParentClassName" $parentClassName -}}
			{{- end}}
		{{- end}}
	{{- end}}
		{{- end}}
		{{- template "singleNestedChildrenDeletionCheck" $newCtx }}
    	{{- end}}
{{- end}}

{{- define "singleNestedChildrenDeletionCheck2" -}}
{{- $inheritedKey := .TemplateProperties.InheritedKey -}}
{{- $resourceName := .TemplateProperties.ResourceName -}}
{{- range $key, $value := .childValue}}
	{{- $newCtx := emptyChild -}}
    {{- if eq (len $value) 1}}{{- $child := index $value 0 }}
        {{- if $child.deletable_child}}
        statecheck.ExpectKnownValue("{{$resourceName}}",
            {{$inheritedKey}}.AtMapKey("{{$key}}"),
            knownvalue.MapExact(
                map[string]knownvalue.Check{
            {{- range $child_key, $child_value := $child}}
                {{- if and (ne $child_key "deletable_child") (ne $child_key "version_mismatch") (ne $child_key "children") }}
                    "{{$child_key}}": knownvalue.Null(),
                {{- else if eq $child_key "version_mismatch"}}
                    {{- range $version, $attributes := $child_value }}
                        {{- range $attributeName, $attributeValue := $attributes}}
                            "{{$attributeName}}" : knownvalue.Null(),
                        {{- end}}
                    {{- end}}
				{{- else if eq $child_key "children"}}
				 {{- range $key, $value := $child_value}}
				 	{{- if gt (len $value) 1}}
						"{{$key}}": knownvalue.Null(),
					{{- end}}
				 {{- end}}
                {{- end}}
            {{- end}}
                },
            ),
        ),
        {{- end}}
	{{- range $child_key, $child_value := $child}}
		{{- if eq $child_key "children"}}
			{{- if checkDeletableChild $child_value }}
				{{- $newCtx = addToChild $child_value "ResourceName" (print "aci_" $.resourceName ".test") "InheritedKey" (print $inheritedKey ".AtMapKey(" $key ")") -}}
			{{- end}}
		{{- end}}
	{{- end}}
		{{- end}}
		{{- template "singleNestedChildrenDeletionCheck2" $newCtx }}
    	{{- end}}
{{- end}}