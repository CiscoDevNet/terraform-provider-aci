// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{- if .parents}}
	{{- range .parents}}
func TestAccResource{{$.resourceClassName}}With{{capitalize .class_name}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}AllDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
				{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
				{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.all}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := $.all}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
				{{- if ne $key "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- else}}
					{{- range $dkey, $dvalue := $.default}}
						{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$dkey}}", "{{$dvalue}}"),
						{{- end}}
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{$.resourceClassName}}ResetDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
				),
			},
			// Import testing
			{
				ResourceName:      "aci_{{$.resourceName}}.test",
				ImportState:       true,
        		ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
			{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
				),
			},
		{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{$.resourceClassName}}ChildrenDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
			{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
			{{- range $key, $value := $.children}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
				),
			},
			// Import testing with children
			{	
				ResourceName:      "aci_{{$.resourceName}}.test",
				ImportState:       true,
				ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
			{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
			{{- range $key, $value := $.children}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
				),
			},
			// Update with children removed from config
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveFromConfigDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
				{{- end}}
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "2"),
		{{- end}}
				),
			},
			// Update with children first child removed
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveOneDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}{{$child := index $value 1 }}
			{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "1"),
		{{- end}}
				),
			},
			// Update with all children removed
			{
				Config: testConfig{{$.resourceClassName}}ChildrenRemoveAllDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}
				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "0"),
		{{- end}}
				),
			},
		{{- end}}
		},
	})
}	{{- end}}

{{- else}}
func TestAccResource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}Min,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.default}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .default}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}All,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .all}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{.resourceClassName}}Min,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
	{{- end}}
	{{- range $key, $value := .all}}
		{{- if ne $key "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- else}}
			{{- range $dkey, $dvalue := $.default}}
				{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$dkey}}", "{{$dvalue}}"),
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{.resourceClassName}}Reset,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
	{{- end}}
	{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
		{{- if not $contains}}
			resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
	{{- end}}
				),
			},
			// Import testing
			{
				ResourceName:      "aci_{{$.resourceName}}.test",
				ImportState:       true,
        		ImportStateVerify: true,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := $.resource_required}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
	{{- end}}
	{{- range $key, $value := $.default}}{{$contains := definedInMap $key $.resource_required}}
		{{- if not $contains}}
			resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
	{{- end}}
				),
			},
	{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{.resourceClassName}}Children,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
				{{- end}}
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "2"),
		{{- end}}
				),
			},
			// Update with children removed from config
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveFromConfig,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
				{{- end}}
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "2"),
		{{- end}}
				),
			},
			// Update with children first child removed
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveOne,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}{{$child := index $value 1 }}
			{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.0.{{$child_key}}", "{{$child_value}}"),
			{{- end}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "1"),
		{{- end}}
				),
			},
			// Update with all children removed
			{
				Config: testConfig{{.resourceClassName}}ChildrenRemoveAll,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
			{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$.targetDn}}"),
			{{- else }}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end }}
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := definedInMap $key $.resource_required}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}
				resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.#", "0"),
		{{- end}}
				),
			},
	{{- end}}
		},
	})
}
{{end}}

{{- if ne .targets nil }}
	{{- range .targets}}
		{{- if ne .parent_dependency "" }}
const testConfig{{.class_name}}MinDependencyWith{{capitalize .parent_dependency}} = `
resource "aci_{{$.targetResourceName}}" "test" {
  parent_dn = {{.parent_dependency_dn}}
  			{{- range $key, $value := .resource_required}}
  {{$key}} = "{{$value}}"
  			{{- end}}
}
`
		{{- end }}
	{{- end }}
{{- end }}

{{ $parentConfig := "" }}
{{- if ne $.targetResourceParentClassName ""  }}
	{{ $parentConfig = getTestConfigVariableName $.targetResourceClassName "MinDependencyWith" $.targetResourceParentClassName }}
{{- end }}
{{- if .parents}}
	{{- range .parents}}

const testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}AllDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
			{{- if not $contains}}
  				{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.all}}
  {{$key}} = "{{$value}}"
		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ResetDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
			{{- if not $contains}}
  				{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.default}}
  {{$key}} = "{{$value}}"
		{{- end}}
}
`

		{{- if $.children}}
const testConfig{{$.resourceClassName}}ChildrenDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
  			{{- range $key, $value := $.resource_required}}
  				{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  				{{- else }}
  {{$key}} = "{{$value}}"
  				{{- end }}
  			{{- end}}
  			{{- range $key, $value := $.children}}
  {{$key}} = [
				{{- range $child := $value}}
	{
					{{- range $child_key, $child_value := $child}}
	  {{$child_key}} = "{{$child_value}}"
					{{- end}}
	},
				{{- end}}
  ]
  			{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveFromConfigDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
  		{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveOneDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}
  {{$key}} = [ {{$child := index $value 1 }}
	{
	  		{{- range $child_key, $child_value := $child}}
	  {{$child_key}} = "{{$child_value}}"
			{{- end}}
	},
  ]
		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ChildrenRemoveAllDependencyWith{{capitalize .class_name}} = {{- if ne $parentConfig ""}} {{ $parentConfig  }} + {{- end }} testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
    	{{- range $key, $value := $.resource_required}}
  			{{- if eq $key "target_dn" }}
  {{$key}} = {{$value}}
  			{{- else }}
  {{$key}} = "{{$value}}"
  			{{- end }}
  		{{- end}}
  		{{- range $key, $value := $.children}}
  {{$key}} = []
		{{- end}}
}
`
		{{- end}}
	{{- end}}
{{else}}
const testConfig{{.resourceClassName}}Min = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  	{{- end}}
}
`

const testConfig{{.resourceClassName}}All = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.all}}
		{{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
  	{{- range $key, $value := $.all}}
  {{$key}} = "{{$value}}"
  	{{- end}}
}
`

const testConfig{{.resourceClassName}}Reset = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}{{$contains := definedInMap $key $.default}}
		{{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
  	{{- range $key, $value := $.default}}
  {{$key}} = "{{$value}}"
  	{{- end}}
}
`

	{{- if $.children}}
const testConfig{{.resourceClassName}}Children = `
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  		{{- end}}
  		{{- range $key, $value := $.children}}
  {{$key}} = [
			{{- range $child := $value}}
	{
				{{- range $child_key, $child_value := $child}}
	  {{$child_key}} = "{{$child_value}}"
				{{- end}}
	},
			{{- end}}
  ]
  		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveFromConfig = `
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveOne = `
resource "aci_{{$.resourceName}}" "test" {
    	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  		{{- end}}
  		{{- range $key, $value := $.children}}
  {{$key}} = [ {{$child := index $value 1 }}
	{
	  		{{- range $child_key, $child_value := $child}}
	  {{$child_key}} = "{{$child_value}}"
			{{- end}}
	},
  ]
		{{- end}}
}
`

const testConfig{{.resourceClassName}}ChildrenRemoveAll = `
resource "aci_{{$.resourceName}}" "test" {
    	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  		{{- end}}
  		{{- range $key, $value := $.children}}
  {{$key}} = []
		{{- end}}
}
`

	{{- end}}
{{- end}}