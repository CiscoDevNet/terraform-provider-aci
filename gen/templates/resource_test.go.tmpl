// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{- if .parents}}
	{{- range .parents}}
func TestAccResource{{$.resourceClassName}}With{{capitalize .class_name}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.relationship_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := $.default}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{$.resourceClassName}}AllDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.relationship_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := $.all}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := $.all_sets}}
			{{- range $child_index, $child := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}", "{{$child}}"),
			{{- end}}
		{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.relationship_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := $.all}}
			{{- if ne $key "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- else}}
				{{- range $dkey, $dvalue := $.default}}
					{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$dkey}}", "{{$dvalue}}"),
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{$.resourceClassName}}ResetDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.relationship_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- if $.reset}}
			{{- range $key, $value := $.reset}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- else}}
			{{- range $key, $value := $.default}}{{$contains := containsStringAttributeValue $key $.not_default_after_reset}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
				),
			},
		{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{$.resourceClassName}}ChildrenDependencyWith{{capitalize .class_name}},
				ExpectNonEmptyPlan: {{.relationship_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := $.resource_required}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
			{{- range $key, $value := $.default}}{{$contains := containsStringAttributeValue $key $.not_default_after_reset}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
				{{- end}}
			{{- end}}
			{{- range $key, $value := $.children}}
				{{- range $child_index, $child := $value}}
					{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
					{{- end}}
				{{- end}}
			{{- end}}
				),
			},
		{{- end}}
		},
	})
}	{{- end}}

{{- else}}
func TestAccResource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}Min,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
	{{- range $key, $value := .default}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
				),
			},
			// Update with all config and verify default APIC values
			{
				Config: testConfig{{.resourceClassName}}All,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
	{{- range $key, $value := .all}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
	{{- range $key, $value := $.all_sets}}
		{{- range $child_index, $child := $value}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}", "{{$child}}"),
		{{- end}}
	{{- end}}
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config: testConfig{{.resourceClassName}}Min,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
	{{- range $key, $value := .all}}
		{{- if ne $key "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- else}}
			{{- range $dkey, $dvalue := $.default}}
				{{- if eq $dkey "annotation"}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$dkey}}", "{{$dvalue}}"),
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
				),
			},
			// Update with empty strings config or default value
			{
				Config: testConfig{{.resourceClassName}}Reset,
				Check: resource.ComposeAggregateTestCheckFunc(
	{{- range $key, $value := $.resource_required}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
	{{- end}}
	{{- if $.reset}}
		{{- range $key, $value := $.reset}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
	{{- else}}
		{{- range $key, $value := $.default}}{{$contains := containsStringAttributeValue $key $.not_default_after_reset}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
	{{- end}}
				),
			},
	{{- if $.children}}
			// Update with children
			{
				Config: testConfig{{.resourceClassName}}Children,
				Check: resource.ComposeAggregateTestCheckFunc(
		{{- range $key, $value := .min}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
		{{- end}}
		{{- range $key, $value := .default}}{{$contains := containsStringAttributeValue $key $.not_default_after_reset}}
				{{- if not $contains}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
			{{- end}}
		{{- end}}
		{{- range $key, $value := $.children}}
			{{- range $child_index, $child := $value}}
				{{- range $child_key, $child_value := $child}}
					resource.TestCheckResourceAttr("aci_{{$.resourceName}}.test", "{{$key}}.{{$child_index}}.{{$child_key}}", "{{$child_value}}"),
				{{- end}}
			{{- end}}
		{{- end}}
				),
			},
	{{- end}}
		},
	})
}
{{end}}

{{- if .parents}}
	{{- range .parents}}

const testConfig{{$.resourceClassName}}MinDependencyWith{{capitalize .class_name}} = testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
  		{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}AllDependencyWith{{capitalize .class_name}} = testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
		{{- end}}
		{{- range $key, $value := $.all}}
  {{$key}} = "{{$value}}"
		{{- end}}
		{{- range $key, $value := $.all_sets}}
  {{$key}} = [{{- range $child := $value}}
  	"{{$child}}",{{ end}}
  ]
  		{{- end}}
}
`

const testConfig{{$.resourceClassName}}ResetDependencyWith{{capitalize .class_name}} = testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
		{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
		{{- end}}
		{{- if $.reset}}
			{{- range $key, $value := $.reset}}
  {{$key}} = "{{$value}}"
			{{- end}}	
  		{{- else}}
			{{- range $key, $value := $.default}}{{$contains := containsStringAttributeValue $key $.not_default_after_reset}}
				{{- if not $contains}}
  {{$key}} = "{{$value}}"
				{{- end}}
			{{- end}}
  		{{- end}}
}
`

		{{- if $.children}}
const testConfig{{$.resourceClassName}}ChildrenDependencyWith{{capitalize .class_name}} = testConfig{{capitalize .class_name}}Min{{- if ne .parent_dependency ""}}DependencyWith{{capitalize .parent_dependency}}{{- end}} + `
resource "aci_{{$.resourceName}}" "test" {
  parent_dn = {{.parent_dn}}
  			{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  			{{- end}}
  			{{- range $key, $value := $.children}}
  {{$key}} = [
				{{- range $child := $value}}
	{
					{{- range $child_key, $child_value := $child}}
	  {{$child_key}} = "{{$child_value}}"
					{{- end}}
	},
				{{- end}}
  ]
  			{{- end}}
}
`
		{{- end}}
	{{- end}}
{{else}}
const testConfig{{.resourceClassName}}Min = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  	{{- end}}
}
`

const testConfig{{.resourceClassName}}All = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  	{{- end}}
  	{{- range $key, $value := $.all}}
  {{$key}} = "{{$value}}"
  	{{- end}}
  	{{- range $key, $value := $.all_sets}}
  {{$key}} = [{{- range $child := $value}}
  	"{{$child}}",{{ end}}
  ]
  	{{- end}}
}
`

const testConfig{{.resourceClassName}}Reset = `
resource "aci_{{$.resourceName}}" "test" {
  	{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  	{{- end}}
  	{{- range $key, $value := $.default}}{{$contains := containsStringAttributeValue $key $.not_default_after_reset}}
		{{- if not $contains}}
  {{$key}} = "{{$value}}"
		{{- end}}
  	{{- end}}
}
`

	{{- if $.children}}
const testConfig{{.resourceClassName}}Children = `
resource "aci_{{$.resourceName}}" "test" {
  		{{- range $key, $value := $.resource_required}}
  {{$key}} = "{{$value}}"
  		{{- end}}
  		{{- range $key, $value := $.children}}
  {{$key}} = [
			{{- range $child := $value}}
	{
				{{- range $child_key, $child_value := $child}}
	  {{$child_key}} = "{{$child_value}}"
				{{- end}}
	},
			{{- end}}
  ]
  		{{- end}}
}
`
	{{- end}}
{{- end}}