{{define "processResource"}}
func processResource(resourceName string, resourceValues map[string]interface{}) map[string]Item {
	attributes := make(map[string]interface{})
	var children []map[string]Item

	switch resourceName {
	{{range $resource := .Resources}}
	case "{{$resource.ResourceName}}":
		{{range $attribute := $resource.Attributes}}
		if val, exists := resourceValues["{{$attribute.TerraformFieldName}}"].(string); exists && val != "" {
			attributes["{{$attribute.ACIFieldName}}"] = val
		}
		{{end}}
		if val, exists := resourceValues["parent_dn"].(string); exists && val != "" {
			attributes["dn"] = fmt.Sprintf("{{$resource.DnFormat}}", val{{range $field := $resource.DnFields}}, attributes["{{$field}}"]{{end}})
			attributes["parent_dn"] = val
		}
		if status, exists := attributes["status"].(string); exists {
			attributes["status"] = status
		}

		children = createChildrenFromAttributes(resourceValues)
		return map[string]Item{
			"{{$resource.ItemName}}": {
				Attributes: attributes,
				Children:   children,
			},
		}
	{{end}}
	}
	return nil
}
{{end}}

{{template "processResource"}}
