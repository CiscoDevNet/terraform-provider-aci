# Code generated by "gen/generator.go"; DO NOT EDIT.
# In order to regenerate this file execute `go generate` from the repository root.
# More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

{{- if .LegacyAttributes}}
legacy_attributes:
  {{- range .LegacyAttributes}}
		{{- if ne .ReplacedBy.AttributeName "" }}
			{{- if eq (getMigrationType .ValueType) "String"}}
  {{.AttributeName}}: "{{getLegacyPropertyTestValue .Name $}}"
			{{- else if eq (getMigrationType .ValueType) "Set"}}
  {{.AttributeName}}: ["{{getLegacyPropertyTestValue .Name $}}"]
			{{- end}}
		{{- end}}
	{{- end }}
{{- end}}
{{- if .LegacyBlocks}}
legacy_blocks:
  {{- range .LegacyBlocks}}{{$ClassName := .ClassName}}
  {{.Name }}:
    {{- range .Attributes}}
      {{- if ne .ReplacedBy.AttributeName "" }}
        {{- if eq (getMigrationType .ValueType) "String"}}
    {{.AttributeName}}: "{{getLegacyBlockTestValue $ClassName .Name $}}"
        {{- else if eq (getMigrationType .ValueType) "Set"}}
    {{.AttributeName}}: ["{{getLegacyBlockTestValue $ClassName .Name $}}"]
        {{- end}}
      {{- end}}
    {{- end }}
  {{- end}}
{{ end}}

{{ $versionMismatch := .VersionMismatched}}
default:
{{- $versionMismatchExists := false}}
{{- range .Properties}}
  {{- if keyExists $versionMismatch .RawVersion}}{{$versionMismatchExists = true}}{{- end}}
  {{- if and (not (keyExists $versionMismatch .RawVersion)) (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if .DefaultValue}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions}}"
      {{- end}}
    {{- else if not .IsNaming}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions}}"
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
{{- if $versionMismatchExists}}{{- $properties := .Properties }}
  version_mismatch:
  {{- range $versionMismatchNumber, $propertyNames := $versionMismatch }}{{- $printedVersionMismatchNumberAll := false }}
    {{- range $propertyNames }}{{- $propertyInMismatch := .}}
      {{- range $properties}}
        {{- if and (not .IgnoreInTest) (not .ReadOnly)}}
          {{- if eq .PropertyName $propertyInMismatch}}
            {{- if not $printedVersionMismatchNumberAll }}{{- $printedVersionMismatchNumberAll = true }}
    {{ $versionMismatchNumber }}:
            {{- end }}
        {{- $overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
            {{- if .DefaultValue}}
              {{- if eq .ValueType "bitmask"}}
                {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions))}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions)}}
        - "{{ $value}}"
                  {{- end}}
                {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
                {{- end}}
              {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions}}"
              {{- end}}
            {{- else if not .IsNaming}}
              {{- if eq .ValueType "bitmask"}}
                {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions))}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions)}}
        - "{{ $value}}"
                  {{- end}}
                {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
                {{- end}}
              {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions}}"
              {{- end}}
            {{- end}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}
  {{- end}}  
{{- end}}
{{ if .HasNaming }}
datasource_non_existing:
  {{- range .Properties}}
    {{- if and (not (keyExists $versionMismatch .RawVersion)) (not .IgnoreInTest) (not .ReadOnly)}}{{$testValue := createNonExistingValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
      {{- if .IsNaming }}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "datasource_non_existing" 0 $.Definitions}}"
      {{- end}}
    {{- end}}
  {{- end}}

datasource_required:
  {{- range .Properties}}{{$testValue := createTestValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if or .IsNaming (isRequiredInTestValue .PkgName $overwritePropertyName $.Definitions "datasource_required") }}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "datasource_required" 0 $.Definitions}}"
    {{- end}}
  {{- end}}

resource_required:
  {{- range .Properties}}{{$testValue := createTestValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if or .IsNaming (or .IsRequired (isRequiredInTestValue .PkgName $overwritePropertyName $.Definitions "resource_required"))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "resource_required" 0 $.Definitions}}"
    {{- end}}
  {{- end}}
  {{- if .HasCustomTypeProperties}}

custom_type:
    {{- range .Properties}}{{$testValue := createTestValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
      {{- if .HasCustomType}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{$validValuesMap := .ValidValuesMap}}{{range $key, $value := $validValuesMap}}{{- if or (ne $value "unspecified") (eq (len $validValuesMap) 1)}}"{{$key}}"{{break}}{{end}}{{end}}
      {{- else if or .IsNaming (or .IsRequired (isRequiredInTestValue .PkgName $overwritePropertyName $.Definitions "resource_required"))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "resource_required" 0 $.Definitions}}"
      {{- end}}
    {{- end}}
  {{- end}}
{{- end }}
{{- if .HasReadOnlyProperties}}

read_only:
  {{- range .Properties}}
    {{- if .ReadOnly}}
  - "{{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}"
    {{- end}}
  {{- end}}
{{- end}}

all:
{{- $versionMismatchExists = false}}
{{- range .Properties}}
  {{- if keyExists $versionMismatch .RawVersion}}{{$versionMismatchExists = true}}{{- end}}
    {{- if and (not (keyExists $versionMismatch .RawVersion)) (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
      {{- if overwriteProperty .PkgName .SnakeCaseName $.Definitions | eq "annotation"}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "annotation"
      {{- else if .DefaultValue}}{{$length := len .ValidValues}}
        {{- if eq .ValueType "bitmask"}}
          {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else if eq $length 0}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions}}"
      {{- else }}{{$testValue := index .ValidValues 0 }}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "all" 0 $.Definitions}}"
      {{- end}}
    {{- else if not .IsNaming}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions}}"
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
{{- if $versionMismatchExists}}{{- $properties := .Properties }}
  version_mismatch:
  {{- range $versionMismatchNumber, $propertyNames := $versionMismatch }}{{- $printedVersionMismatchNumberAll := false }}
    {{- range $propertyNames }}{{- $propertyInMismatch := .}}
      {{- range $properties}}
        {{- if and (not .IgnoreInTest) (not .ReadOnly)}}
          {{- if eq .PropertyName $propertyInMismatch}}
            {{- if not $printedVersionMismatchNumberAll }}{{- $printedVersionMismatchNumberAll = true }}
    {{ $versionMismatchNumber }}:
            {{- end }}
          {{- $overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
            {{- if .DefaultValue}}{{$length := len .ValidValues}}
              {{- if eq .ValueType "bitmask"}}
                {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions))}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions)}}
          - "{{ $value}}"
                  {{- end}}
                {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
                {{- end}}
              {{- else if eq $length 0}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions}}"
              {{- else }}{{$testValue := index .ValidValues 0 }}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "all" 0 $.Definitions}}"
              {{- end}}
            {{- else if not .IsNaming}}
              {{- if eq .ValueType "bitmask"}}
                {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}
          - "{{ $value}}"
                  {{- end}}
                {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
                {{- end}}
              {{- else}}
      {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions}}"
              {{- end}}
            {{- end}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
{{ if .Children}}
children:
  {{- range $key, $value := .Children}}
    {{- $newCtx := addToTemplateProperties . "Indent" "" -}}
    {{- template "nestedChildren" $newCtx }}
  {{- end}}
{{- end}}
{{- if and .ContainedBy (not .MultiParentFormats)}}
parents:
    {{- $index := 0}}
    {{- range $key := .DocumentationExamples}}{{$parentDependency := getParentTestDependencies $.PkgName $index $.Definitions}}{{$index = add $index 1}}
  - class_name: "{{ $key }}"
    parent_dependency: "{{$parentDependency.parent_dependency}}"
    parent_dn: "{{createParentDnValue $key "test" $.Definitions}}"
    class_in_parent: {{$parentDependency.class_in_parent}}
      {{- if ne $parentDependency.parent_dependency_name "" }}
    parent_dependency_name: "{{$parentDependency.parent_dependency_name}}"
      {{- end }}
      {{- if ne (len $parentDependency.target_classes) 0}}
    target_classes:
        {{- range $parentDependency.target_classes}}
        - "{{ . }}"
        {{- end }}
      {{- end }}
    test_type: {{$.TestType}}
    {{- end}}
  {{- if .TestDependencies}}
targets:
    {{- range .TestDependencies }}
  - class_name: "{{ .ClassName }}"
    target_dn: "{{ .TargetDn }}"
    target_dn_ref: "{{ .TargetDnRef }}"
        {{- if .TargetDnOverwriteDocs}}
    target_dn_overwrite_docs: "{{ .TargetDnOverwriteDocs }}"
        {{- end}}
    parent_dependency: "{{ .ParentDependency}}"
    parent_dependency_dn_ref: "{{.ParentDependencyDnRef}}"
    target_resource_name: "{{ .TargetResourceName }}"
    relation_resource_name: "{{ .RelationResourceName }}"
    parent_dn_key: "{{ .ParentDnKey }}"
    static: {{ .Static }}
    properties:
        {{- range $key, $value := .Properties}}
        {{ $key }}: "{{ $value }}"
        {{- end }}
      {{- end }}
    {{- end }}
  {{- if .ChildTestDependencies}}
child_targets:
    {{- range .ChildTestDependencies }}
  - class_name: "{{ .ClassName }}"
    target_dn: "{{ .TargetDn }}"
      {{- if .TargetDnOverwriteDocs}}
    target_dn_overwrite_docs: "{{ .TargetDnOverwriteDocs }}"
      {{- end}}
    relation_resource_name: "{{ .RelationResourceName }}"
    static: {{ .Static }}
      {{- if not .Static}}
    target_dn_ref: "{{ .TargetDnRef }}"
    parent_dependency: "{{ .ParentDependency}}"
    parent_dependency_dn_ref: "{{.ParentDependencyDnRef}}"
    target_resource_name: "{{ .TargetResourceName }}"
    parent_dn_key: "{{ .ParentDnKey }}"
    properties:
        {{- range $key, $value := .Properties}}
        {{ $key }}: "{{ $value }}"
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end}}
{{- end}}

{{- if .MultiParentFormats}}
parents:
{{- $topContext := . -}}
{{- range $key, $value := .MultiParentFormats }}{{$parentDependency := getParentTestDependencies $topContext.PkgName 0 $topContext.Definitions}}
  - class_name: "{{ $value.ContainedBy }}"
    parent_dependency: "{{ $parentDependency.parent_dependency }}"
    parent_dn: {{ if eq $key "default" }}""{{ else }}"{{ createParentDnValue $value.ContainedBy "test" $topContext.Definitions }}"{{ end }}
    class_in_parent: false
    target_classes:
        {{- range $parentDependency.target_classes}}
        - "{{ . }}"
        {{- end}}
    {{- $testType := $value.TestType }}
    {{- if $testType }}
    test_type: {{ $testType }}
    {{- else }}
    test_type: both
    {{- end }}
  {{- end }}

  {{- if .TestDependencies}}
targets:
    {{- range .TestDependencies }}
  - class_name: "{{ .ClassName }}"
    target_dn: "{{ .TargetDn }}"
    target_dn_ref: "{{ .TargetDnRef }}"
    parent_dependency: "{{ .ParentDependency}}"
    parent_dependency_dn_ref: "{{.ParentDependencyDnRef}}"
    target_resource_name: "{{ .TargetResourceName }}"
    relation_resource_name: "{{ .RelationResourceName }}"
    parent_dn_key: "{{ .ParentDnKey }}"
    properties:
      {{- range $key, $value := .Properties}}
        {{ $key }}: "{{ $value }}"
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{- if or (and (not .ContainedBy) (not .MultiParentFormats)) (and (.ContainedBy) (not .DocumentationExamples) (not .MultiParentFormats))  }}
  {{- if .ChildTestDependencies}}
child_targets:
    {{- range .ChildTestDependencies }}
  - class_name: "{{ .ClassName }}"
    target_dn: "{{ .TargetDn }}"
      {{- if .TargetDnOverwriteDocs}}
    target_dn_overwrite_docs: "{{ .TargetDnOverwriteDocs }}"
      {{- end}}
    relation_resource_name: "{{ .RelationResourceName }}"
    static: {{ .Static }}
      {{- if not .Static}}
    target_dn_ref: "{{ .TargetDnRef }}"
    parent_dependency: "{{ .ParentDependency}}"
    parent_dependency_dn_ref: "{{.ParentDependencyDnRef}}"
    target_resource_name: "{{ .TargetResourceName }}"
    parent_dn_key: "{{ .ParentDnKey }}"
    properties:
        {{- range $key, $value := .Properties}}
        {{ $key }}: "{{ $value }}"
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end}}

test_type: {{ .TestType }}
{{- end }}
class_version: {{.ClassVersion}}
{{- $exists_exclude := false -}}
{{- range .Properties }}
  {{- if eq .ValueType "password" }}
    {{- $exists_exclude = true -}}
  {{- end }}
{{- end }}
{{- if $exists_exclude }}
exclude_attributes:
  {{- range .Properties }}
    {{- if eq .ValueType "password" }}
  - "{{ overwriteProperty .PkgName .SnakeCaseName $.Definitions }}"
    {{- end }}
  {{- end }}
{{- end }}
{{- if gt (len $versionMismatch) 0 }}
version_mismatch: true
{{- end }}

{{- /* A sub template for including vars in nested children. */}}
{{- define "nestedChildren" -}}
{{ $versionMismatch := .VersionMismatched}}
{{- $indent := .TemplateProperties.Indent -}}
{{$name := .ResourceName}}{{$child_deletable := .AllowDelete}}
  {{ $indent }}{{overwriteProperty $.PkgName .ResourceName $.Definitions}}:
  {{- if or (not .IdentifiedBy) .MaxOneClassAllowed}}
  {{- $versionMismatchExists := false}}
  {{- $enteredPropertiesZone := false }}
    {{ $indent }}- {{ range .Properties}}{{- if $enteredPropertiesZone }}{{ $indent }}{{- else}}{{- $enteredPropertiesZone = true }}{{- end}}{{- if keyExists $versionMismatch .RawVersion}}{{$versionMismatchExists = true}}{{- end}}{{- if and (not (keyExists $versionMismatch .RawVersion)) (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty $.PkgName .SnakeCaseName $.Definitions}}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{- if eq .ValueType "bitmask"}}{{- if lt 0 (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}[{{range $index, $value := (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}"{{ $value}}"{{- if ne (add $index 1) (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}},{{- end}}{{- end}}]{{- else}}[]{{- end}}{{else if ne $length 0}}"{{ index .ValidValues 0 }}"{{else if not .IsNaming}}"{{overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions }}"{{- else}}{{lookupChildTestValue $.PkgName $.ResourceName .SnakeCaseName $.TestVars 0 $.Definitions}}{{- end}}
      {{ end}}{{ end}}
      {{- if $child_deletable -}}
    {{ $indent }}deletable_child: true
      {{- else -}}
    {{ $indent }}deletable_child: false
      {{ end}}
    {{- if $versionMismatchExists}}
      {{- $properties := .Properties }}
      {{ $indent }}version_mismatch:
      {{- range $versionMismatchNumber, $propertyNames := $versionMismatch }}
      {{- $printedVersionMismatchNumberChildOne := false }}
        {{- range $propertyNames }}
          {{- $propertyInMismatch := .}}
          {{- range $properties}}
            {{- if eq .PropertyName $propertyInMismatch}}
             {{- if not $printedVersionMismatchNumberChildOne }}
              {{- $printedVersionMismatchNumberChildOne = true }}
        {{ $indent }}{{ $versionMismatchNumber }}:
              {{- end }}
          {{- $overwritePropertyName := overwriteProperty $.PkgName .SnakeCaseName $.Definitions}}
          {{ $indent }}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{- if eq .ValueType "bitmask"}}{{- if lt 0 (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}[{{range $index, $value := (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}"{{ $value}}"{{- if ne (add $index 1) (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}},{{- end}}{{- end}}]{{- else}}[]{{- end}}{{else if ne $length 0}}"{{ index .ValidValues 0 }}"{{else if not .IsNaming}}"{{overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions }}"{{- else}}{{lookupChildTestValue $.PkgName $.ResourceName .SnakeCaseName $.TestVars 0 $.Definitions}}
            {{- end}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}
    {{- end}}
    {{- $enteredGrandChildZone := false }}
   {{- range .Children}}
      {{- if not $enteredGrandChildZone }}
        {{- $enteredGrandChildZone = true }}
      {{ $indent }}children:
      {{- end }}
   {{- end }}
      {{- range $key, $value := .Children}}
        {{- $newCtx := addToTemplateProperties . "Indent" (print $indent "      ") -}}
        {{- template "nestedChildren" $newCtx }}
      {{- end}}
  {{- else}}
  {{- $enteredPropertiesZone1 := false }}
   {{- $versionMismatchExists := false}}
    {{ $indent }}- {{ range .Properties}}{{- if $enteredPropertiesZone1 }}{{ $indent }}{{- else}}{{- $enteredPropertiesZone1 = true }}{{- end}}{{- if keyExists $versionMismatch .RawVersion}}{{$versionMismatchExists = true}}{{- end}}{{- if and (not (keyExists $versionMismatch .RawVersion)) (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty $.PkgName .SnakeCaseName $.Definitions}}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{- if eq .ValueType "bitmask"}}{{- if lt 0 (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}[{{range $index, $value := (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}"{{ $value}}"{{- if ne (add $index 1) (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}},{{- end}}{{- end}}]{{- else}}[]{{- end}}{{else if ne $length 0}}"{{ index .ValidValues 0 }}"{{else if not .IsNaming}}"{{overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions }}"{{- else}}{{lookupChildTestValue $.PkgName $.ResourceName .SnakeCaseName $.TestVars 0 $.Definitions}}{{- end}}
      {{ end}}{{ end}}
      {{- if $versionMismatchExists}}
      {{- $properties := .Properties }}
      {{ $indent }}version_mismatch:
      {{- range $versionMismatchNumber, $propertyNames := $versionMismatch }}
      {{- $printedVersionMismatchNumberChildTwo := false }}
        {{- range $propertyNames }}
          {{- $propertyInMismatch := .}}
          {{- range $properties}}
            {{- if eq .PropertyName $propertyInMismatch}}
             {{- if not $printedVersionMismatchNumberChildTwo }}
              {{- $printedVersionMismatchNumberChildTwo = true }}
        {{ $indent }}{{ $versionMismatchNumber }}:
              {{- end }}
          {{- $overwritePropertyName := overwriteProperty $.PkgName .SnakeCaseName $.Definitions}}
          {{ $indent }}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{- if eq .ValueType "bitmask"}}{{- if lt 0 (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}[{{range $index, $value := (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}"{{ $value}}"{{- if ne (add $index 1) (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}},{{- end}}{{- end}}]{{- else}}[]{{- end}}{{else if ne $length 0}}"{{ index .ValidValues 0 }}"{{else if not .IsNaming}}"{{overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions }}"{{- else}}{{lookupChildTestValue $.PkgName $.ResourceName .SnakeCaseName $.TestVars 0 $.Definitions}}
            {{- end}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}
    {{- end}}
    {{- $enteredGrandChildZone := false }}
   {{- range .Children}}
      {{- if not $enteredGrandChildZone }}
        {{- $enteredGrandChildZone = true }}
      {{ $indent }}children:
      {{- end }}
   {{- end }}
      {{- range $key, $value := .Children}}
        {{- $newCtx := addToTemplateProperties . "Indent" (print $indent "      ") -}}
        {{- template "nestedChildren" $newCtx }}
      {{- end}}
  {{- $enteredPropertiesZone2 := false }}
  {{- $versionMismatchExists := false}}
    {{ $indent }}- {{ range .Properties}}{{- if $enteredPropertiesZone2 }}{{ $indent }}{{- else}}{{- $enteredPropertiesZone2 = true }}{{- end}}{{- if keyExists $versionMismatch .RawVersion}}{{$versionMismatchExists = true}}{{- end}}{{- if and (not (keyExists $versionMismatch .RawVersion)) (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty $.PkgName .SnakeCaseName $.Definitions}}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{- if eq .ValueType "bitmask"}}{{- if lt 0 (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions))}}[{{range $index, $value := (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions)}}"{{ $value}}"{{- if ne (add $index 1) (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions))}},{{- end}}{{- end}}]{{- else}}[]{{- end}}{{else if ge $length 2}}"{{ index .ValidValues 1 }}"{{else if not .IsNaming}}"{{overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions }}"{{- else}}{{lookupChildTestValue $.PkgName $.ResourceName .SnakeCaseName $.TestVars 1 $.Definitions}}{{- end}}
      {{ end}}{{- end}}
    {{- if $versionMismatchExists}}
      {{- $properties := .Properties }}
      {{ $indent }}version_mismatch:
      {{- range $versionMismatchNumber, $propertyNames := $versionMismatch }}
      {{- $printedVersionMismatchNumberChildThree := false }}
        {{- range $propertyNames }}
          {{- $propertyInMismatch := .}}
          {{- range $properties}}
            {{- if eq .PropertyName $propertyInMismatch}}
            {{- if not $printedVersionMismatchNumberChildThree }}
              {{- $printedVersionMismatchNumberChildThree = true }}
        {{ $indent }}{{ $versionMismatchNumber }}:
              {{- end }}
          {{- $overwritePropertyName := overwriteProperty $.PkgName .SnakeCaseName $.Definitions}}
          {{ $indent }}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{- if eq .ValueType "bitmask"}}{{- if lt 0 (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions))}}[{{range $index, $value := (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions)}}"{{ $value}}"{{- if ne (add $index 1) (len (overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions))}},{{- end}}{{- end}}]{{- else}}[]{{- end}}{{else if ge $length 2}}"{{ index .ValidValues 1 }}"{{else if not .IsNaming}}"{{overwritePropertyValue $.PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions }}"{{- else}}{{lookupChildTestValue $.PkgName $.ResourceName .SnakeCaseName $.TestVars 1 $.Definitions}}
      {{- end}}
      {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}
    {{- end}}
    {{- $enteredGrandChildZone := false }}
   {{- range .Children}}
      {{- if not $enteredGrandChildZone }}
        {{- $enteredGrandChildZone = true }}
      {{ $indent }}children:
      {{- end }}
   {{- end }}
      {{- range $key, $value := .Children}}
        {{- $newCtx := addToTemplateProperties . "Indent" (print $indent "      ") -}}
        {{- template "nestedChildren" $newCtx }}
      {{- end}}
    {{- end}}
      {{- end}}
