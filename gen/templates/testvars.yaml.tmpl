# Code generated by "gen/generator.go"; DO NOT EDIT.
# In order to regenerate this file execute `go generate` from the repository root.
# More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

default:
  {{- range .Properties}}{{- if and (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if .DefaultValue}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "default" 0 $.Definitions}}"
      {{- end}}
    {{- else if not .IsNaming}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName "" "default" 0 $.Definitions}}"
      {{- end}}
    {{- end}}
  {{- end}}{{- end}}
{{ if .HasNaming }}
datasource_non_existing:
  {{- range .Properties}}{{- if and (not .IgnoreInTest) (not .ReadOnly)}}{{$testValue := createNonExistingValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if .IsNaming }}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "datasource_non_existing" 0 $.Definitions}}"
    {{- end}}
  {{- end}}{{- end}}

datasource_required:
  {{- range .Properties}}{{$testValue := createTestValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if .IsNaming }}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "datasource_required" 0 $.Definitions}}"
    {{- end}}
  {{- end}}

resource_required:
  {{- range .Properties}}{{$testValue := createTestValue .SnakeCaseName}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if or .IsNaming .IsRequired}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "resource_required" 0 $.Definitions}}"
    {{- end}}
  {{- end}}
{{- end}}

all:
  {{- range .Properties}}{{- if and (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}
    {{- if overwriteProperty .PkgName .SnakeCaseName $.Definitions | eq "annotation"}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "annotation"
    {{- else if .DefaultValue}}{{$length := len .ValidValues}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else if eq $length 0}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName .DefaultValue "all" 0 $.Definitions}}"
      {{- else }}{{$testValue := index .ValidValues 0 }}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $testValue "all" 0 $.Definitions}}"
      {{- end}}
    {{- else if not .IsNaming}}
      {{- if eq .ValueType "bitmask"}}
        {{- if lt 0 (len (overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions))}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: {{range $index, $value := (overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions)}}
    - "{{ $value}}"
          {{- end}}
        {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: []
        {{- end}}
      {{- else}}
  {{overwriteProperty .PkgName .SnakeCaseName $.Definitions}}: "{{overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions}}"
      {{- end}}
    {{- end}}
  {{- end}}{{- end}}
{{ if .Children}}
children:
  {{- range $key, $value := .Children}}{{$name := .ResourceName}}{{$child_deletable := .AllowDelete}}
  {{.ResourceName}}:
  {{- if or (not .IdentifiedBy) .MaxOneClassAllowed}}
    - {{ range .Properties}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}{{- if and (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{if ne $length 0}}"{{ index .ValidValues 0 }}"{{else if not .IsNaming}}"{{overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions }}"{{- else}}"{{lookupChildTestValue .PkgName $.ResourceName .SnakeCaseName $.TestVars 0 $.Definitions}}"{{- end}}
      {{ end}}{{ end}}
      {{- if $child_deletable -}}
      deletable_child: true
      {{- else -}}
      deletable_child: false
      {{ end}}
  {{- else}}
    - {{ range .Properties}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}{{- if and (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{if ne $length 0}}"{{ index .ValidValues 0 }}"{{else if not .IsNaming}}"{{overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "all" 0 $.Definitions }}"{{- else}}"{{lookupChildTestValue .PkgName $.ResourceName .SnakeCaseName $.TestVars 0 $.Definitions}}"{{- end}}
      {{ end}}{{ end}}
    - {{ range .Properties}}{{$overwritePropertyName := overwriteProperty .PkgName .SnakeCaseName $.Definitions}}{{- if and (not .IgnoreInTest) (not .ReadOnly)}}{{$overwritePropertyName}}: {{$length := len .ValidValues}}{{if ge $length 2}}"{{ index .ValidValues 1 }}"{{else if not .IsNaming}}"{{overwritePropertyValue .PkgName $overwritePropertyName $overwritePropertyName "default" 0 $.Definitions }}"{{- else}}"{{lookupChildTestValue .PkgName $.ResourceName .SnakeCaseName $.TestVars 1 $.Definitions}}"{{- end}}
      {{ end}}{{- end}}{{- end}}{{- end}}{{ end}}
{{- if .ContainedBy}}
parents:
    {{- $index := 0}}{{- range $key := .DocumentationExamples}}{{$parentDependency := getParentTestDependencies $.PkgName $index $.Definitions}}{{$index = add $index 1}}
  - class_name: "{{ $key }}"
    parent_dependency: "{{$parentDependency.parent_dependency}}"
    parent_dn: "{{createParentDnValue $key "test" $.Definitions}}"
    class_in_parent: {{$parentDependency.class_in_parent}}
      {{- if ne $parentDependency.parent_dependency_name "" }}
    parent_dependency_name: "{{$parentDependency.parent_dependency_name}}"
      {{- end }}
      {{- if ne (len $parentDependency.target_classes) 0}}
    target_classes:
        {{- range $parentDependency.target_classes}}
        - "{{ . }}"
        {{- end}}
      {{- end}}
    {{- end}}
    {{- if .TestDependencies}}
targets:
        {{- range .TestDependencies }}
  - class_name: "{{ .ClassName }}"
    target_dn: "{{ .TargetDn }}"
    target_dn_ref: "{{ .TargetDnRef }}"
    parent_dependency: "{{ .ParentDependency}}"
    parent_dependency_dn_ref: "{{.ParentDependencyDnRef}}"
    target_resource_name: "{{ .TargetResourceName }}"
    relation_resource_name: "{{ .RelationResourceName }}"
    parent_dn_key: "{{ .ParentDnKey }}"
    static: {{ .Static }}
    properties:
            {{- range $key, $value := .Properties}}
        {{ $key }}: "{{ $value }}"
            {{- end }}
        {{- end }}
    {{- end }}
    {{- if .ChildTestDependencies}}
child_targets:
        {{- range .ChildTestDependencies }}
  - class_name: "{{ .ClassName }}"
    target_dn: "{{ .TargetDn }}"
    relation_resource_name: "{{ .RelationResourceName }}"
    static: {{ .Static }}
    {{- if not .Static}}
    target_dn_ref: "{{ .TargetDnRef }}"
    parent_dependency: "{{ .ParentDependency}}"
    parent_dependency_dn_ref: "{{.ParentDependencyDnRef}}"
    target_resource_name: "{{ .TargetResourceName }}"
    parent_dn_key: "{{ .ParentDnKey }}"
    properties:
            {{- range $key, $value := .Properties}}
        {{ $key }}: "{{ $value }}"
            {{- end }}
        {{- end }}
    {{- end }}
    {{- end}}
{{- end}}
